{"version":3,"sources":["../../../../../../../assets/mahjong/script/wahua/prefab/assets/mahjong/script/wahua/prefab/whVotingPop.js"],"names":["DisbandState","cc","Enum","applicant","agree","disagree","wait","Class","extends","Component","properties","back","type","Node","default","playerList","applicantTabel","RichText","TimeLabel","Label","btnDisagree","btnAgree","onLoad","children","i","length","active","MineUserId","fun","db","getData","UserId","toString","setBtnAgreeActive","getChildByName","on","onBtnAgreeClick","onBtnDisagreeClick","update","dt","_isUpdate","time","parseInt","string","node","dtTime","newTime","setData","data","count","timeBreak","applyStatu","id","p","utils","loadUrlRes","headUrl","getComponent","name","ok","no","state","net","send"],"mappings":"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","file":"whVotingPop.js","sourceRoot":"../../../../../../../assets/mahjong/script/wahua/prefab","sourcesContent":["const DisbandState = cc.Enum({\n    applicant: 0,\n    agree: 1,\n    disagree: 2,\n    wait: 3,\n});\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        back: {\n            type: cc.Node,\n            default: null,\n        },\n\n        playerList: {\n            type: cc.Node,\n            default: null,\n        },\n\n        applicantTabel: {\n            type: cc.RichText,\n            default: null,\n        },\n\n        TimeLabel: {\n            type: cc.Label,\n            default: null,\n        },\n\n        btnDisagree: {\n            type: cc.Node,\n            default: null,\n        },\n\n        btnAgree: {\n            type: cc.Node,\n            default: null,\n        },\n    },\n\n    onLoad () {\n        let children = this.playerList.children;\n        for (let i=0; i<children.length; ++i) {\n            children[i].active = false;\n        }\n        this.MineUserId = fun.db.getData('UserInfo').UserId.toString();\n        this.setBtnAgreeActive(false);\n        this.back.getChildByName('btnAgree').on('click', this.onBtnAgreeClick, this);\n        this.back.getChildByName('btnDisagree').on('click', this.onBtnDisagreeClick, this);\n    },\n\n    update(dt) {\n        if (this._isUpdate) {\n            let time = parseInt(this.TimeLabel.string);\n            if (time <= 0) {\n                this._isUpdate = false;\n                this.node.active = false;\n            } else {\n                this.dtTime = (this.dtTime || 0) + dt;\n                if (this.dtTime >= 1) {\n                    this.dtTime -= 1;\n                    let newTime = time - 1;\n                    this.TimeLabel.string = newTime <= 0 ? 0 : newTime;\n                }\n            }\n        }\n    },\n\n    setData(data) {\n        let count = -1;\n        if (data.timeBreak) {\n            this.TimeLabel.string = data.timeBreak;\n        }\n        this._isUpdate = true;\n        let applyStatu = data.applyStatu;\n        for (let id in applyStatu) {\n            count++;\n            let p = this.playerList.getChildByName('player_'+count);\n            p.active = true;\n            fun.utils.loadUrlRes(applyStatu[id].headUrl, p.getChildByName('img'));\n            p.getChildByName('name').getComponent(cc.Label).string = applyStatu[id].name;\n            let ok = p.getChildByName('ok');\n            let no = p.getChildByName('no');\n            if (id === this.MineUserId && applyStatu[id].state === DisbandState.wait) {\n                this.setBtnAgreeActive(true);\n            }\n            switch(applyStatu[id].state){\n                case DisbandState.applicant:\n                    ok.active = true;\n                    no.active = false;\n                    this.applicantTabel.string = '玩家' + applyStatu[id].name + '申请退出游戏，请投票';\n                    break;\n                case DisbandState.agree:\n                    ok.active = true;\n                    no.active = false;\n                    break;\n                case DisbandState.disagree:\n                    ok.active = false;\n                    no.active = true;\n                    break;\n                case DisbandState.wait:\n                    ok.active = false;\n                    no.active = false;\n                    break;\n                default:\n                    break;\n            }\n        }\n    },\n\n    setBtnAgreeActive : function (active) {\n        this.btnAgree.active    = active;\n        this.btnDisagree.active = active;\n    },\n\n    onBtnAgreeClick() {\n        fun.net.send(\"DisbandRoomVote\", { applyStatu : 1 });\n        this.setBtnAgreeActive(false);\n    },\n\n    onBtnDisagreeClick() {\n        fun.net.send(\"DisbandRoomVote\", { applyStatu : 2 });\n        this.setBtnAgreeActive(false);\n    },\n\n});\n"]}