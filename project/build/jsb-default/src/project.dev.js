require = function e(t, n, r) {
  function s(o, u) {
    if (!n[o]) {
      if (!t[o]) {
        var a = "function" == typeof require && require;
        if (!u && a) return a(o, !0);
        if (i) return i(o, !0);
        var f = new Error("Cannot find module '" + o + "'");
        throw f.code = "MODULE_NOT_FOUND", f;
      }
      var l = n[o] = {
        exports: {}
      };
      t[o][0].call(l.exports, function(e) {
        var n = t[o][1][e];
        return s(n || e);
      }, l, l.exports, e, t, n, r);
    }
    return n[o].exports;
  }
  var i = "function" == typeof require && require;
  for (var o = 0; o < r.length; o++) s(r[o]);
  return s;
}({
  AesUtils: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "95f9ex0QyJC14Utxay6kIMF", "AesUtils");
    "use strict";
    (function(root) {
      function checkInt(value) {
        return parseInt(value) === value;
      }
      function checkInts(arrayish) {
        if (!checkInt(arrayish.length)) return false;
        for (var i = 0; i < arrayish.length; i++) if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) return false;
        return true;
      }
      function coerceArray(arg, copy) {
        if (arg.buffer && ArrayBuffer.isView(arg) && "Uint8Array" === arg.name) {
          copy && (arg = arg.slice ? arg.slice() : Array.prototype.slice.call(arg));
          return arg;
        }
        if (Array.isArray(arg)) {
          if (!checkInts(arg)) throw new Error("Array contains invalid value: " + arg);
          return new Uint8Array(arg);
        }
        if (checkInt(arg.length) && checkInts(arg)) return new Uint8Array(arg);
        throw new Error("unsupported array-like object");
      }
      function createArray(length) {
        return new Uint8Array(length);
      }
      function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
        null == sourceStart && null == sourceEnd || (sourceArray = sourceArray.slice ? sourceArray.slice(sourceStart, sourceEnd) : Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd));
        targetArray.set(sourceArray, targetStart);
      }
      var convertUtf8 = function() {
        function toBytes(text) {
          var result = [], i = 0;
          text = encodeURI(text);
          while (i < text.length) {
            var c = text.charCodeAt(i++);
            if (37 === c) {
              result.push(parseInt(text.substr(i, 2), 16));
              i += 2;
            } else result.push(c);
          }
          return coerceArray(result);
        }
        function fromBytes(arr) {
          if ("string" === typeof arr) return arr;
          var str = "", _arr = arr;
          for (var i = 0; i < _arr.length; i++) {
            var one = _arr[i].toString(2), v = one.match(/^1+?(?=0)/);
            if (v && 8 == one.length) {
              var bytesLength = v[0].length;
              var store = _arr[i].toString(2).slice(7 - bytesLength);
              for (var st = 1; st < bytesLength; st++) store += _arr[st + i].toString(2).slice(2);
              str += String.fromCharCode(parseInt(store, 2));
              i += bytesLength - 1;
            } else str += String.fromCharCode(_arr[i]);
          }
          return str;
        }
        return {
          toBytes: toBytes,
          fromBytes: fromBytes
        };
      }();
      var convertHex = function() {
        function toBytes(text) {
          var result = [];
          for (var i = 0; i < text.length; i += 2) result.push(parseInt(text.substr(i, 2), 16));
          return result;
        }
        function toTwoBytes(text) {
          var result = [];
          for (var i = 0; i < text.length; i++) result.push(text.charCodeAt(i).toString(2));
          return result;
        }
        var Hex = "0123456789abcdef";
        function fromBytes(bytes) {
          var result = [];
          for (var i = 0; i < bytes.length; i++) {
            var v = bytes[i];
            result.push(Hex[(240 & v) >> 4] + Hex[15 & v]);
          }
          return result.join("");
        }
        return {
          toBytes: toBytes,
          fromBytes: fromBytes,
          toTwoBytes: toTwoBytes
        };
      }();
      var numberOfRounds = {
        16: 10,
        24: 12,
        32: 14
      };
      var rcon = [ 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145 ];
      var S = [ 99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22 ];
      var Si = [ 82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125 ];
      var T1 = [ 3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986 ];
      var T2 = [ 2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766 ];
      var T3 = [ 1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126 ];
      var T4 = [ 1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436 ];
      var T5 = [ 1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890 ];
      var T6 = [ 1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935 ];
      var T7 = [ 2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600 ];
      var T8 = [ 4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480 ];
      var U1 = [ 0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795 ];
      var U2 = [ 0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855 ];
      var U3 = [ 0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150 ];
      var U4 = [ 0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925 ];
      function convertToInt32(bytes) {
        var result = [];
        for (var i = 0; i < bytes.length; i += 4) result.push(bytes[i] << 24 | bytes[i + 1] << 16 | bytes[i + 2] << 8 | bytes[i + 3]);
        return result;
      }
      var AES = function AES(key) {
        if (!(this instanceof AES)) throw Error("AES must be instanitated with `new`");
        Object.defineProperty(this, "key", {
          value: coerceArray(key, true)
        });
        this._prepare();
      };
      AES.prototype._prepare = function() {
        var rounds = numberOfRounds[this.key.length];
        if (null == rounds) throw new Error("invalid key size (must be 16, 24 or 32 bytes)");
        this._Ke = [];
        this._Kd = [];
        for (var i = 0; i <= rounds; i++) {
          this._Ke.push([ 0, 0, 0, 0 ]);
          this._Kd.push([ 0, 0, 0, 0 ]);
        }
        var roundKeyCount = 4 * (rounds + 1);
        var KC = this.key.length / 4;
        var tk = convertToInt32(this.key);
        var index;
        for (var i = 0; i < KC; i++) {
          index = i >> 2;
          this._Ke[index][i % 4] = tk[i];
          this._Kd[rounds - index][i % 4] = tk[i];
        }
        var rconpointer = 0;
        var t = KC, tt;
        while (t < roundKeyCount) {
          tt = tk[KC - 1];
          tk[0] ^= S[tt >> 16 & 255] << 24 ^ S[tt >> 8 & 255] << 16 ^ S[255 & tt] << 8 ^ S[tt >> 24 & 255] ^ rcon[rconpointer] << 24;
          rconpointer += 1;
          if (8 != KC) for (var i = 1; i < KC; i++) tk[i] ^= tk[i - 1]; else {
            for (var i = 1; i < KC / 2; i++) tk[i] ^= tk[i - 1];
            tt = tk[KC / 2 - 1];
            tk[KC / 2] ^= S[255 & tt] ^ S[tt >> 8 & 255] << 8 ^ S[tt >> 16 & 255] << 16 ^ S[tt >> 24 & 255] << 24;
            for (var i = KC / 2 + 1; i < KC; i++) tk[i] ^= tk[i - 1];
          }
          var i = 0, r, c;
          while (i < KC && t < roundKeyCount) {
            r = t >> 2;
            c = t % 4;
            this._Ke[r][c] = tk[i];
            this._Kd[rounds - r][c] = tk[i++];
            t++;
          }
        }
        for (var r = 1; r < rounds; r++) for (var c = 0; c < 4; c++) {
          tt = this._Kd[r][c];
          this._Kd[r][c] = U1[tt >> 24 & 255] ^ U2[tt >> 16 & 255] ^ U3[tt >> 8 & 255] ^ U4[255 & tt];
        }
      };
      AES.prototype.encrypt = function(plaintext) {
        if (16 != plaintext.length) throw new Error("invalid plaintext size (must be 16 bytes)");
        var rounds = this._Ke.length - 1;
        var a = [ 0, 0, 0, 0 ];
        var t = convertToInt32(plaintext);
        for (var i = 0; i < 4; i++) t[i] ^= this._Ke[0][i];
        for (var r = 1; r < rounds; r++) {
          for (var i = 0; i < 4; i++) a[i] = T1[t[i] >> 24 & 255] ^ T2[t[(i + 1) % 4] >> 16 & 255] ^ T3[t[(i + 2) % 4] >> 8 & 255] ^ T4[255 & t[(i + 3) % 4]] ^ this._Ke[r][i];
          t = a.slice();
        }
        var result = createArray(16), tt;
        for (var i = 0; i < 4; i++) {
          tt = this._Ke[rounds][i];
          result[4 * i] = 255 & (S[t[i] >> 24 & 255] ^ tt >> 24);
          result[4 * i + 1] = 255 & (S[t[(i + 1) % 4] >> 16 & 255] ^ tt >> 16);
          result[4 * i + 2] = 255 & (S[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8);
          result[4 * i + 3] = 255 & (S[255 & t[(i + 3) % 4]] ^ tt);
        }
        return result;
      };
      AES.prototype.decrypt = function(ciphertext) {
        if (16 != ciphertext.length) throw new Error("invalid ciphertext size (must be 16 bytes)");
        var rounds = this._Kd.length - 1;
        var a = [ 0, 0, 0, 0 ];
        var t = convertToInt32(ciphertext);
        for (var i = 0; i < 4; i++) t[i] ^= this._Kd[0][i];
        for (var r = 1; r < rounds; r++) {
          for (var i = 0; i < 4; i++) a[i] = T5[t[i] >> 24 & 255] ^ T6[t[(i + 3) % 4] >> 16 & 255] ^ T7[t[(i + 2) % 4] >> 8 & 255] ^ T8[255 & t[(i + 1) % 4]] ^ this._Kd[r][i];
          t = a.slice();
        }
        var result = createArray(16), tt;
        for (var i = 0; i < 4; i++) {
          tt = this._Kd[rounds][i];
          result[4 * i] = 255 & (Si[t[i] >> 24 & 255] ^ tt >> 24);
          result[4 * i + 1] = 255 & (Si[t[(i + 3) % 4] >> 16 & 255] ^ tt >> 16);
          result[4 * i + 2] = 255 & (Si[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8);
          result[4 * i + 3] = 255 & (Si[255 & t[(i + 1) % 4]] ^ tt);
        }
        return result;
      };
      var ModeOfOperationECB = function ModeOfOperationECB(key) {
        if (!(this instanceof ModeOfOperationECB)) throw Error("AES must be instanitated with `new`");
        this.description = "Electronic Code Block";
        this.name = "ecb";
        this._aes = new AES(key);
      };
      ModeOfOperationECB.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);
        if (plaintext.length % 16 !== 0) throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);
        for (var i = 0; i < plaintext.length; i += 16) {
          copyArray(plaintext, block, 0, i, i + 16);
          block = this._aes.encrypt(block);
          copyArray(block, ciphertext, i);
        }
        return ciphertext;
      };
      ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);
        if (ciphertext.length % 16 !== 0) throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);
        for (var i = 0; i < ciphertext.length; i += 16) {
          copyArray(ciphertext, block, 0, i, i + 16);
          block = this._aes.decrypt(block);
          copyArray(block, plaintext, i);
        }
        return plaintext;
      };
      var ModeOfOperationCBC = function ModeOfOperationCBC(key, iv) {
        if (!(this instanceof ModeOfOperationCBC)) throw Error("AES must be instanitated with `new`");
        this.description = "Cipher Block Chaining";
        this.name = "cbc";
        if (iv) {
          if (16 != iv.length) throw new Error("invalid initialation vector size (must be 16 bytes)");
        } else iv = createArray(16);
        this._lastCipherblock = coerceArray(iv, true);
        this._aes = new AES(key);
      };
      ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);
        if (plaintext.length % 16 !== 0) throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);
        for (var i = 0; i < plaintext.length; i += 16) {
          copyArray(plaintext, block, 0, i, i + 16);
          for (var j = 0; j < 16; j++) block[j] ^= this._lastCipherblock[j];
          this._lastCipherblock = this._aes.encrypt(block);
          copyArray(this._lastCipherblock, ciphertext, i);
        }
        return ciphertext;
      };
      ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);
        if (ciphertext.length % 16 !== 0) throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);
        for (var i = 0; i < ciphertext.length; i += 16) {
          copyArray(ciphertext, block, 0, i, i + 16);
          block = this._aes.decrypt(block);
          for (var j = 0; j < 16; j++) plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
          copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
        }
        return plaintext;
      };
      var ModeOfOperationCFB = function ModeOfOperationCFB(key, iv, segmentSize) {
        if (!(this instanceof ModeOfOperationCFB)) throw Error("AES must be instanitated with `new`");
        this.description = "Cipher Feedback";
        this.name = "cfb";
        if (iv) {
          if (16 != iv.length) throw new Error("invalid initialation vector size (must be 16 size)");
        } else iv = createArray(16);
        segmentSize || (segmentSize = 1);
        this.segmentSize = segmentSize;
        this._shiftRegister = coerceArray(iv, true);
        this._aes = new AES(key);
      };
      ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
        if (plaintext.length % this.segmentSize != 0) throw new Error("invalid plaintext size (must be segmentSize bytes)");
        var encrypted = coerceArray(plaintext, true);
        var xorSegment;
        for (var i = 0; i < encrypted.length; i += this.segmentSize) {
          xorSegment = this._aes.encrypt(this._shiftRegister);
          for (var j = 0; j < this.segmentSize; j++) encrypted[i + j] ^= xorSegment[j];
          copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
          copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }
        return encrypted;
      };
      ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
        if (ciphertext.length % this.segmentSize != 0) throw new Error("invalid ciphertext size (must be segmentSize bytes)");
        var plaintext = coerceArray(ciphertext, true);
        var xorSegment;
        for (var i = 0; i < plaintext.length; i += this.segmentSize) {
          xorSegment = this._aes.encrypt(this._shiftRegister);
          for (var j = 0; j < this.segmentSize; j++) plaintext[i + j] ^= xorSegment[j];
          copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
          copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }
        return plaintext;
      };
      var ModeOfOperationOFB = function ModeOfOperationOFB(key, iv) {
        if (!(this instanceof ModeOfOperationOFB)) throw Error("AES must be instanitated with `new`");
        this.description = "Output Feedback";
        this.name = "ofb";
        if (iv) {
          if (16 != iv.length) throw new Error("invalid initialation vector size (must be 16 bytes)");
        } else iv = createArray(16);
        this._lastPrecipher = coerceArray(iv, true);
        this._lastPrecipherIndex = 16;
        this._aes = new AES(key);
      };
      ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);
        for (var i = 0; i < encrypted.length; i++) {
          if (16 === this._lastPrecipherIndex) {
            this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
            this._lastPrecipherIndex = 0;
          }
          encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
        }
        return encrypted;
      };
      ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;
      var Counter = function Counter(initialValue) {
        if (!(this instanceof Counter)) throw Error("Counter must be instanitated with `new`");
        0 === initialValue || initialValue || (initialValue = 1);
        if ("number" === typeof initialValue) {
          this._counter = createArray(16);
          this.setValue(initialValue);
        } else this.setBytes(initialValue);
      };
      Counter.prototype.setValue = function(value) {
        if ("number" !== typeof value || parseInt(value) != value) throw new Error("invalid counter value (must be an integer)");
        if (value > Number.MAX_SAFE_INTEGER) throw new Error("integer value out of safe range");
        for (var index = 15; index >= 0; --index) {
          this._counter[index] = value % 256;
          value = parseInt(value / 256);
        }
      };
      Counter.prototype.setBytes = function(bytes) {
        bytes = coerceArray(bytes, true);
        if (16 != bytes.length) throw new Error("invalid counter bytes size (must be 16 bytes)");
        this._counter = bytes;
      };
      Counter.prototype.increment = function() {
        for (var i = 15; i >= 0; i--) {
          if (255 !== this._counter[i]) {
            this._counter[i]++;
            break;
          }
          this._counter[i] = 0;
        }
      };
      var ModeOfOperationCTR = function ModeOfOperationCTR(key, counter) {
        if (!(this instanceof ModeOfOperationCTR)) throw Error("AES must be instanitated with `new`");
        this.description = "Counter";
        this.name = "ctr";
        counter instanceof Counter || (counter = new Counter(counter));
        this._counter = counter;
        this._remainingCounter = null;
        this._remainingCounterIndex = 16;
        this._aes = new AES(key);
      };
      ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);
        for (var i = 0; i < encrypted.length; i++) {
          if (16 === this._remainingCounterIndex) {
            this._remainingCounter = this._aes.encrypt(this._counter._counter);
            this._remainingCounterIndex = 0;
            this._counter.increment();
          }
          encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
        }
        return encrypted;
      };
      ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;
      function pkcs7pad(data) {
        data = coerceArray(data, true);
        var padder = 16 - data.length % 16;
        var result = createArray(data.length + padder);
        copyArray(data, result);
        for (var i = data.length; i < result.length; i++) result[i] = padder;
        return result;
      }
      function pkcs7strip(data) {
        data = coerceArray(data, true);
        if (data.length < 16) throw new Error("PKCS#7 invalid length");
        var padder = data[data.length - 1];
        if (padder > 16) throw new Error("PKCS#7 padding byte out of range");
        var length = data.length - padder;
        for (var i = 0; i < padder; i++) if (data[length + i] !== padder) throw new Error("PKCS#7 invalid padding byte");
        var result = createArray(length);
        copyArray(data, result, 0, 0, length);
        return result;
      }
      var AESMgr = {
        modeFunc: ModeOfOperationCBC,
        ModeOfOperation: {
          ecb: ModeOfOperationECB,
          cbc: ModeOfOperationCBC,
          cfb: ModeOfOperationCFB,
          ofb: ModeOfOperationOFB,
          ctr: ModeOfOperationCTR
        },
        init: function init(modeName) {
          this.modeFunc = this.ModeOfOperation[modeName] || this.modeFunc;
          Uint8Array.prototype.slice = Uint8Array.prototype.slice || function(begin, end) {
            end = "undefined" !== typeof end ? end : this.length;
            if ("[object Array]" === Object.prototype.toString.call(this)) return _slice.call(this, begin, end);
            var i, cloned = [], size, len = this.length;
            var start = begin || 0;
            start = start >= 0 ? start : len + start;
            var upTo = end || len;
            end < 0 && (upTo = len + end);
            size = upTo - start;
            if (size > 0) {
              cloned = new Array(size);
              if (this.charAt) for (i = 0; i < size; i++) cloned[i] = this.charAt(start + i); else for (i = 0; i < size; i++) cloned[i] = this[start + i];
            }
            return cloned;
          };
        },
        enc: function enc(word, key) {
          var keyBytes = convertUtf8.toBytes(key);
          var textBytes = convertUtf8.toBytes(word);
          var addLen = 16 - textBytes.length % 16;
          var totalLen = addLen + textBytes.length;
          var newArray = new Uint8Array(new ArrayBuffer(totalLen));
          newArray.set(textBytes, 0);
          for (var i = totalLen - addLen; i < totalLen; i++) newArray[i] = addLen;
          var aesCbc = new this.modeFunc(keyBytes, keyBytes);
          var encryptedBytes = aesCbc.encrypt(newArray);
          return encryptedBytes;
        },
        dec: function dec(aBuffer, key) {
          var keyBytes = convertUtf8.toBytes(key);
          var encryptedBytes = new Uint8Array(aBuffer);
          var aesCbc = new this.modeFunc(keyBytes, keyBytes);
          var decryptedBytes = aesCbc.decrypt(encryptedBytes);
          var addLen = decryptedBytes[decryptedBytes.length - 1];
          var tureArray = decryptedBytes.slice(0, decryptedBytes.length - addLen);
          var decryptedText = convertUtf8.fromBytes(tureArray);
          return decryptedText;
        },
        toTwo: function toTwo(text) {
          return convertHex.toTwoBytes(text);
        }
      };
      module.exports = AESMgr;
    })(void 0);
    cc._RF.pop();
  }, {} ],
  Audio: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bea12mlKy5H8KaQSweMLRE6", "Audio");
    "use strict";
    var hall_EffectPath = "res/raw-assets/resources/hall/audio/sound/";
    var hall_MusicPath = "res/raw-assets/resources/hall/audio/music/";
    var Pork_EffectPath = "res/raw-assets/resources/poker/audio/sound/";
    var Pork_MusicPath = "res/raw-assets/resources/poker/audio/music/";
    var Mahjong_EffectPath = "res/raw-assets/resources/mahjong/audio/sound/";
    var Mahjong_MusicPath = "res/raw-assets/resources/mahjong/audio/music/";
    module.exports = {
      playMusic: function playMusic(from, name, loop, volume) {
        var m_loop = void 0 === loop || loop;
        var m_volume = void 0 === volume ? this.getMusicVolume() : volume;
        this.stopMusic();
        var path = void 0;
        "hall" === from ? path = hall_MusicPath + name : "pork" === from ? path = Pork_MusicPath + name : "mahjong" === from && (path = Mahjong_MusicPath + name);
        this._musicId = cc.audioEngine.play(path, m_loop, m_volume);
      },
      pauseMusic: function pauseMusic() {
        void 0 !== this._musicId && cc.audioEngine.pause(this._musicId);
      },
      resumeMusic: function resumeMusic() {
        void 0 !== this._musicId && cc.audioEngine.resume(this._musicId);
      },
      stopMusic: function stopMusic() {
        void 0 !== this._musicId && cc.audioEngine.stop(this._musicId);
      },
      setMusicVolume: function setMusicVolume(volume) {
        volume >= 0 && volume <= 1 && void 0 !== this._musicId && cc.audioEngine.setVolume(this._musicId, volume);
      },
      getMusicVolume: function getMusicVolume() {
        return fun.gameCfg.musicValume;
      },
      isMusicPlaying: function isMusicPlaying() {
        return cc.audioEngine.getState(this._musicId) === cc.audioEngine.AudioState.PLAYING;
      },
      playEffect: function playEffect(from, pName, sex) {
        var more = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "";
        var path = void 0;
        var name = cc.sys.isNative ? pName.slice(0, -4) + more + ".mp3" : pName;
        if ("hall" === from) path = hall_EffectPath + name; else if ("pork" === from) path = void 0 === sex ? Pork_EffectPath + name : Pork_EffectPath + "mandarin/" + sex + "_" + name; else if ("mahjong" === from) {
          var gameType = fun.db.getData("RoomInfo").GameType;
          path = sex ? Mahjong_EffectPath + sex + name : Mahjong_EffectPath + name;
        }
        if (cc.sys.isNative && !jsb.fileUtils.isFileExist(path)) {
          this.playEffect(from, pName, sex);
          return;
        }
        try {
          this._soundId = cc.audioEngine.play(path, false, this.getEffectVolume());
        } catch (err) {}
      },
      pauseEffect: function pauseEffect() {
        void 0 !== this._soundId && cc.audioEngine.pause(this._soundId);
      },
      resumeEffect: function resumeEffect() {
        void 0 !== this._soundId && cc.audioEngine.resume(this._soundId);
      },
      stopEffect: function stopEffect() {
        void 0 !== this._soundId && cc.audioEngine.stop(this._soundId);
      },
      setEffectVolume: function setEffectVolume(volume) {
        volume >= 0 && volume <= 1 && (this._soundVolume = volume);
      },
      setEffectIsPlay: function setEffectIsPlay(isPlay) {
        this._isEffectPlay = isPlay;
      },
      getEffectVolume: function getEffectVolume() {
        if (!this._isEffectPlay) return fun.gameCfg.soundValume;
        var s = this._soundVolume;
        var sound = s || (0 === s ? s : fun.gameCfg.soundValume);
        return sound;
      },
      pauseAll: function pauseAll() {
        this.setEffectIsPlay(false);
        cc.audioEngine.pauseAll();
      },
      resumeAll: function resumeAll() {
        this.setEffectIsPlay(true);
        cc.audioEngine.resumeAll();
      },
      stopAll: function stopAll() {
        cc.audioEngine.stopAll();
      }
    };
    cc._RF.pop();
  }, {} ],
  ChatCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b97d8C3KRpHPZ9ARn3X5iQQ", "ChatCfg");
    "use strict";
    var _exporText;
    function _defineProperty(obj, key, value) {
      key in obj ? Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      }) : obj[key] = value;
      return obj;
    }
    var gameConst = require("GameCfg");
    var wenLingText = [ "等一下，我上个厕所！", "神经啊，快等到过年了！", "那么慢，像老中医把脉一样！", "看错，6条看成9条，差点打错了！", "怎么老不胡，整个人都烦躁死了！", "上家，放点救济粮吃吃好吗？", "胆子这么大，这牌都敢打！", "养猪专业户啊？这样喂下家？", "没吃又没碰，坐着都要睡着了！", "手气这么差，摸猪屎了吧！", "那么会胡，挣死你！", "财神翻白板，双眼也发白！" ];
    var huangYanText = [ "快点嘛！又少打两把了！", "稍等一下，我想想打哪张牌！", "你们小心点，我听牌了！", "不要走！决战到天亮！", "你这牌也打的太好了！", "等下，我上个厕所！", "好久都没胡过牌了！", "今天的手气太差了,输惨了！" ];
    var porkText = [ "嘿，今天的牌好到爆！", "同志们，走起，走起哦！", "喂，快点亮牌吧，等到花都谢了！", "哎呦，你们太厉害了！", "顺儿郎当，庄刮四方！", "哎呀，今天的手气太差了！", "庄上霉，下重锤！", "唉，又是一个豌豆庄！" ];
    var DDZText = [ "老天爷，赐我一把好牌吧", "嘿嘿，这把稳赢了", "快点吧，我等到花儿都谢了", "别催，别催，我好好想想怎么打", "唉呀，全是套路", "你的牌打的太好了", "怎么又断线了？网络这么差啊？", "别吵，别吵，好好打牌", "不好意思，我要离开一下", "不要走，决战到天亮", "胆子这么大，这牌都敢打！" ];
    var exporText = (_exporText = {}, _defineProperty(_exporText, gameConst.gameType.maJiangWenLing, wenLingText), 
    _defineProperty(_exporText, gameConst.gameType.maJiangHuangYan, huangYanText), _defineProperty(_exporText, gameConst.gameType.sanGong, porkText), 
    _defineProperty(_exporText, gameConst.gameType.niuNiu, porkText), _defineProperty(_exporText, gameConst.gameType.DDZ, DDZText), 
    _exporText);
    var emoji = [ "jianxiao", "fadai", "han", "ku", "kubile", "kuxiao", "yun", "bishi", "tu", "wabishi", "shengqi", "zan" ];
    module.exports = {
      exporText: exporText,
      emoji: emoji
    };
    cc._RF.pop();
  }, {
    GameCfg: "GameCfg"
  } ],
  CuoPai: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a4b08RwMtVCTqy3p/ZKDzxU", "CuoPai");
    "use strict";
    var PukeDefine = require("PukeDefine");
    var PukeUtils = require("PukeUtils");
    cc.Class({
      extends: cc.Component,
      properties: {
        Background: cc.Node,
        PukeNode: cc.Node,
        Puke: sp.Skeleton,
        CuoPaiTime: 1e3,
        ScaleTime: 1.2,
        liangPaiScaleTime: 4
      },
      startTouchFunc: function startTouchFunc(event) {
        this.beganTime = Date.parse(new Date());
        if (!cc.sys.isNative) {
          this.beganPos = event.getStartLocation();
          this.lastPos = cc.p(this.beganPos.x, this.beganPos.y);
        }
      },
      moveTouchFunc: function moveTouchFunc(event) {
        if (cc.sys.isNative) this.setDisy(event.touch.getDelta().y); else {
          var movePos = event.getLocation();
          var disy = movePos.y - this.lastPos.y;
          this.setDisy(disy);
          this.lastPos = cc.p(movePos.x, movePos.y);
        }
      },
      endCancelTouchFunc: function endCancelTouchFunc(event) {
        this.endTime = Date.parse(new Date());
        if (this.endTime - this.beganTime < this.CuoPaiTime) if (cc.sys.isNative) {
          var disy = event.touch.getDelta().y;
          if (disy > 80) {
            this.fanPai();
            return;
          }
        } else {
          var pos = event.getLocation();
          var _disy = pos.y - this.beganPos.y;
          if (_disy > 80) {
            this.fanPai();
            return;
          }
        }
        this.cancelFanPai();
      },
      touchOn: function touchOn() {
        this.Background.on("touchstart", this.startTouchFunc, this);
        this.Background.on("touchmove", this.moveTouchFunc, this);
        this.Background.on("touchend", this.endCancelTouchFunc, this);
        this.Background.on("touchcancel", this.endCancelTouchFunc, this);
      },
      touchOff: function touchOff() {
        this.Background.off("touchstart", this.startTouchFunc, this);
        this.Background.off("touchmove", this.moveTouchFunc, this);
        this.Background.off("touchend", this.endCancelTouchFunc, this);
        this.Background.off("touchcancel", this.endCancelTouchFunc, this);
      },
      update: function update(dt) {
        if (this.isFan) return;
        if (this.disy > 0) {
          if ("Bei" === this.state) {
            this.Puke.setAnimation(0, "Fan", false);
            this.Puke.timeScale = this.ScaleTime;
            this.state = "Fan";
          } else if ("Fan" === this.state) if (this.playing) this.Puke.timeScale = this.ScaleTime; else {
            this.Puke.setAnimation(0, "Zheng", false);
            this.state = "Zheng";
          }
          this.disy = 0;
        } else if (this.disy < 0) {
          this.Puke.setAnimation(0, "Bei", false);
          this.Puke.timeScale = this.ScaleTime;
          this.state = "Bei";
          this.playing = true;
          this.disy = 0;
        } else 0 === this.disy && (this.Puke.timeScale = 0);
      },
      onDestroy: function onDestroy() {
        this.touchOff();
      },
      setDisy: function setDisy(disy) {
        if (disy < 0) {
          this.tmpDisy = this.tmpDisy + disy;
          if (this.tmpDisy < -5) {
            this.disy = this.tmpDisy;
            this.tmpDisy = 0;
          }
        } else {
          this.disy = disy;
          this.tmpDisy = 0;
        }
      },
      initPuke: function initPuke(data) {
        this.pukeNumber = Math.abs(data.num) - 3 || 4;
        this.modelIndex = 0;
        this.callback = data.cb;
        this.GameType = data.GameType;
        this.state = "Bei";
        this.isFan = false;
        this._rotateDelay = false;
        this.touchOn();
        "liangPai" === data.from || "showCard" === data.from ? this.initAnimation("liangPai") : this.initAnimation();
      },
      initAnimation: function initAnimation(type) {
        var self = this;
        this.playing = true;
        this.state = "Bei";
        this.disy = 0;
        this.tmpDisy = 0;
        var modelName = PukeDefine.PUKE["MODULE_NAME_" + this.GameType][this.modelIndex];
        var spName = modelName + "/" + modelName + "_" + this.pukeNumber;
        var url = PukeDefine.RESOURCE_FOLDER_PATH.SPINE.FAN_PAI + spName;
        self.Puke.setAnimation(0, "Bei", false);
        PukeUtils.LoadRes(url, "sp.SkeletonData", function(res) {
          self.Puke.skeletonData = res;
          self.Puke.setAnimation(0, "Bei", false);
          self.PukeNode.rotation = 0;
          if (type && "liangPai" === type) {
            self.fanPai();
            self.touchOff();
          } else self.touchOn();
        });
        this.Puke.setCompleteListener(function(trackEntry) {
          "Shang" !== trackEntry.animation.name && "Xia" !== trackEntry.animation.name && "Fan" !== trackEntry.animation.name && "Zheng" !== trackEntry.animation.name || self.callback();
        });
      },
      fanPai: function fanPai() {
        this.isFan = true;
        if ("Bei" === this.state) {
          this.Puke.setAnimation(0, "Fan", false);
          this.Puke.addAnimation(0, "Zheng", false);
        } else "Fan" === this.state && this.Puke.addAnimation(0, "Zheng", false);
        this.Puke.timeScale = 2 * this.ScaleTime;
      },
      cancelFanPai: function cancelFanPai() {
        if ("Zheng" === this.state) return;
        if ("Fan" === this.state) {
          this.fanPai();
          return;
        }
        if (!this._rotateDelay) {
          this._rotateDelay = true;
          this.changCardModel();
        }
      },
      changCardModel: function changCardModel() {
        var self = this;
        this.Puke.setAnimation(0, "Bei", false);
        this.Puke.timeScale = this.ScaleTime;
        this.state = "Bei";
        this.isFan = false;
        this.playing = true;
        this.disy = 0;
        this.tmpDisy = 0;
        var rotation = cc.rotateBy(.5, 90);
        this.PukeNode.runAction(cc.sequence(rotation, cc.callFunc(function() {
          self.modelIndex += 1;
          self.modelIndex >= 4 && (self.modelIndex = 0);
          self.initAnimation();
          self._rotateDelay = false;
        })));
      },
      onBtnCloseClicked: function onBtnCloseClicked() {
        this.fanPai();
      }
    });
    cc._RF.pop();
  }, {
    PukeDefine: "PukeDefine",
    PukeUtils: "PukeUtils"
  } ],
  DDZ_AllGameOverItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "06e48uhCbRH37gOYjW476sh", "DDZ_AllGameOverItem");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        atlas: cc.SpriteAtlas
      },
      start: function start() {},
      initItemNode: function initItemNode(data) {
        this.bindNode();
        this.initUI(data);
      },
      bindNode: function bindNode() {
        this.headNode = this.node.getChildByName("HeadNode");
        this.totalInfoNode = this.node.getChildByName("TotalInfo");
        this.totalCoinNode = this.node.getChildByName("TotalCoin");
        this.fangKaNode = this.node.getChildByName("FangKa");
        this.IDNode = this.headNode.getChildByName("IDBG").getChildByName("ID");
        this.headSprNode = this.headNode.getChildByName("HeadSpr");
        this.nickNameNode = this.headNode.getChildByName("nickName");
        this.winIconNode = this.headNode.getChildByName("WinIcon");
        this.zadan = this.totalInfoNode.getChildByName("title1").getChildByName("Num");
        this.feiji = this.totalInfoNode.getChildByName("title2").getChildByName("Num");
        this.liandui = this.totalInfoNode.getChildByName("title3").getChildByName("Num");
        this.spring = this.totalInfoNode.getChildByName("title4").getChildByName("Num");
        this.totalCoin = this.totalCoinNode.getChildByName("Title").getChildByName("Num");
        this.totalCoin_l = this.totalCoinNode.getChildByName("Title").getChildByName("Num_l");
        this.useFangKa = this.fangKaNode.getChildByName("cardSpr").getChildByName("Num");
        this.leaveFangKa = this.fangKaNode.getChildByName("cardSpr_1").getChildByName("Num");
      },
      initUI: function initUI(data) {
        fun.utils.loadUrlRes(data.headUrl, this.headSprNode);
        if (true == data.isChampion) {
          this.winIconNode.active = true;
          this.node.getComponent(cc.Sprite).spriteFrame = this.atlas.getSpriteFrame("dz_dajiesuan_di2");
          this.winIconNode.stopAllActions();
          this.winIconNode.runAction(cc.sequence(cc.scaleTo(.4, 2.3), cc.scaleTo(.4, 1.8).easing(cc.easeBackOut())));
        } else {
          this.winIconNode.active = false;
          this.node.getComponent(cc.Sprite).spriteFrame = this.atlas.getSpriteFrame("dz_dajiesuan_di1");
        }
        this.IDNode.getComponent(cc.Label).string = data.userId;
        this.nickNameNode.getComponent(cc.Label).string = data.nickName;
        this.zadan.getComponent(cc.Label).string = data.boomCount;
        this.feiji.getComponent(cc.Label).string = data.airCount;
        this.liandui.getComponent(cc.Label).string = data.lianDuiCount;
        this.spring.getComponent(cc.Label).string = data.springCount;
        this.useFangKa.getComponent(cc.Label).string = data.expendCardsCount;
        this.leaveFangKa.getComponent(cc.Label).string = data.remainCardsCount;
        if (data.score >= 0) {
          this.totalCoin.getComponent(cc.Label).string = data.score;
          this.totalCoin_l.active = false;
        } else {
          this.totalCoin_l.getComponent(cc.Label).string = data.score;
          this.totalCoin.active = false;
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_AllGameOver: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d7418iMm/pJYpKR5FV+SftP", "DDZ_AllGameOver");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        item: cc.Prefab
      },
      start: function start() {},
      initAllGameOverNode: function initAllGameOverNode(data) {
        this.node.getChildByName("BG").getChildByName("Mid").removeAllChildren();
        for (var i = 0; i < data.usersLotteryInfo.length; i++) {
          var itemNode = cc.instantiate(this.item);
          this.node.getChildByName("BG").getChildByName("Mid").addChild(itemNode);
          itemNode.getComponent("DDZ_AllGameOverItem").initItemNode(data.usersLotteryInfo[i]);
        }
        this.node.getChildByName("BG").getChildByName("Top").getChildByName("TimeBG").getChildByName("time").getComponent(cc.Label).string = cc.YL.DDZ_Osdate.LocalTimeString().toString();
        this.node.getChildByName("BG").getChildByName("Buttom").getChildByName("RoomInfo").getChildByName("lun").getComponent(cc.Label).string = "第" + data.round + "局";
        this.node.getChildByName("BG").getChildByName("Buttom").getChildByName("RoomInfo").getChildByName("PassWord").getComponent(cc.Label).string = data.password;
        cc.YL.DDZAllGameOverData = null;
      },
      onShareClick: function onShareClick() {
        require("JSPhoneWeChat").WxShareFriendScreen();
      },
      onClickExitClick: function onClickExitClick(event) {
        cc.YL.DDZAudio.playBtnClick();
        cc.director.loadScene("hall");
        fun.db.setData("RoomInfo", {
          GameType: 0
        });
        event.target.active = false;
      }
    });
    cc._RF.pop();
  }, {
    JSPhoneWeChat: "JSPhoneWeChat"
  } ],
  DDZ_AnimationManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3ccf5kOApdH6LrYiHEiay1u", "DDZ_AnimationManager");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        spring: cc.Prefab,
        Dizhu: cc.Prefab,
        Boom: cc.Prefab,
        rocket: cc.Prefab,
        shunzi: cc.Prefab,
        waring: cc.Prefab
      },
      start: function start() {},
      PlaySpring: function PlaySpring(spr, respr) {
        this.clearNode();
        var springNode = this.node.getChildByName("DDZ_Spring") ? this.node.getChildByName("DDZ_Spring") : cc.instantiate(this.spring);
        this.node.getChildByName("DDZ_Spring") ? this.node.getChildByName("DDZ_Spring").active = true : this.node.addChild(springNode);
        if (spr) var name = "Chuntian"; else if (respr) var name = "Fanchun";
        var finishFunc = function() {
          this.clearNode();
        }.bind(this);
        springNode.getComponent(sp.Skeleton).animation = name;
        springNode.getComponent(sp.Skeleton).setCompleteListener(finishFunc);
      },
      PlayShunLianFei: function PlayShunLianFei(playerIndex, str) {
        this.clearNode();
        var ShunLianFeiNode = this.node.getChildByName("DDZ_Shunzi") ? this.node.getChildByName("DDZ_Shunzi") : cc.instantiate(this.shunzi);
        this.node.getChildByName("DDZ_Shunzi") ? this.node.getChildByName("DDZ_Shunzi").active = true : this.node.addChild(ShunLianFeiNode);
        var playerIndeArr = [ "_Zuo", "_You", "_Zuo" ];
        var finishFunc = function() {
          this.clearNode();
        }.bind(this);
        ShunLianFeiNode.getComponent(sp.Skeleton).animation = str + playerIndeArr[playerIndex];
        ShunLianFeiNode.getComponent(sp.Skeleton).setCompleteListener(finishFunc);
        if ("Feiji" == str) ShunLianFeiNode.setPosition(0, -100); else {
          var posArr = [ cc.p(50, -114), cc.p(340, 56), cc.p(-326, 56) ];
          ShunLianFeiNode.setPosition(posArr[playerIndex]);
        }
      },
      PlayBoom: function PlayBoom(playerIndex) {
        this.clearNode();
        var boomNode = this.node.getChildByName("DDZ_Boom") ? this.node.getChildByName("DDZ_Boom") : cc.instantiate(this.Boom);
        this.node.getChildByName("DDZ_Boom") ? this.node.getChildByName("DDZ_Boom").active = true : this.node.addChild(boomNode);
        var animClipArr = [ "Xia", "You", "Zuo", "Bao" ];
        boomNode.getComponent(sp.Skeleton).animation = animClipArr[playerIndex];
        var firstFunc = function() {
          this.clearNode();
        }.bind(this);
        boomNode.getComponent(sp.Skeleton).setCompleteListener(firstFunc);
      },
      PlayDizhu: function PlayDizhu(playerIndex) {
        this.clearNode();
        var DiZhuNode = this.node.getChildByName("DDZ_Dizhu") ? this.node.getChildByName("DDZ_Dizhu") : cc.instantiate(this.Dizhu);
        this.node.getChildByName("DDZ_Dizhu") ? this.node.getChildByName("DDZ_Dizhu").active = true : this.node.addChild(DiZhuNode);
        var animaArr = [ "Luo_Zuo", "Luo_Zuo", "Luo_Zuo" ];
        var posArr = [ cc.p(-591, -108), cc.p(593, 258), cc.p(-582, 258) ];
        var posArrEnd = [ cc.p(-625, -150), cc.p(580, 197), cc.p(-603, 197) ];
        DiZhuNode.getComponent(sp.Skeleton).animation = "Chuxian";
        var thridFunc = function() {
          this.clearNode();
        }.bind(this);
        var secondFunc = function() {
          DiZhuNode.getComponent(sp.Skeleton).animation = animaArr[playerIndex];
          DiZhuNode.setPosition(posArrEnd[playerIndex]);
          DiZhuNode.getComponent(sp.Skeleton).setCompleteListener(thridFunc);
        }.bind(this);
        var firstFunc = function firstFunc() {
          DiZhuNode.getComponent(sp.Skeleton).animation = "Fei";
          DiZhuNode.stopAllActions();
          DiZhuNode.runAction(cc.moveTo(.3, posArr[playerIndex]));
          DiZhuNode.getComponent(sp.Skeleton).setCompleteListener(secondFunc);
        };
        DiZhuNode.getComponent(sp.Skeleton).setCompleteListener(firstFunc);
      },
      PlayRocket: function PlayRocket(playerIndex) {
        this.clearNode();
        var rocketNode = this.node.getChildByName("DDZ_Rocket") ? this.node.getChildByName("DDZ_Rocket") : cc.instantiate(this.rocket);
        this.node.getChildByName("DDZ_Rocket") ? this.node.getChildByName("DDZ_Rocket").active = true : this.node.addChild(rocketNode);
        var posArr = [ cc.p(0, -70), cc.p(411, 103), cc.p(-396, 103) ];
        rocketNode.setPosition(posArr[playerIndex]);
        rocketNode.getComponent(sp.Skeleton).animation = "Fei";
        var secondFunc = function() {
          this.clearNode();
        }.bind(this);
        var firstFunc = function firstFunc() {
          rocketNode.getComponent(sp.Skeleton).animation = "Luo";
          rocketNode.setPosition(0, -100);
          rocketNode.getComponent(sp.Skeleton).setCompleteListener(secondFunc);
        };
        rocketNode.getComponent(sp.Skeleton).setCompleteListener(firstFunc);
      },
      PlayWaring: function PlayWaring(index) {
        this.clearNode();
        var posArr = [ cc.p(-445, -136), cc.p(440, 224), cc.p(-440, 224) ];
        var waringNode = cc.instantiate(this.waring);
        this.node.addChild(waringNode);
        waringNode.getComponent(sp.Skeleton).animation = "animation";
        waringNode.setPosition(posArr[index]);
      },
      clearNode: function clearNode() {
        for (var i = 0; i < this.node.children.length; i++) if ("DDZ_Waring" != this.node.children[i].name) {
          this.node.children[i].active = false;
          this.node.children[i].removeFromParent();
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_Animation: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2b805Jn+SlJ9pGeZcuyfzTN", "DDZ_Animation");
    "use strict";
    var DDZ_Animation = cc.Class({});
    DDZ_Animation.bindplayNode = function() {
      var AnimRoot = cc.find("DDZ_UIROOT/MainNode/AnimationRoot");
      AnimRoot.zIndex = 900;
      this.UIROOTCOM = AnimRoot.getComponent("DDZ_AnimationManager");
    };
    DDZ_Animation.playSpring = function(spr, respr) {
      this.bindplayNode();
      this.UIROOTCOM.PlaySpring(spr, respr);
      cc.YL.DDZAudio.playCommonBGM(1);
    };
    DDZ_Animation.playBoom = function(playerIndex) {
      this.bindplayNode();
      this.UIROOTCOM.PlayBoom(playerIndex);
    };
    DDZ_Animation.playWaring = function(index) {
      this.bindplayNode();
      this.UIROOTCOM.PlayWaring(index);
      cc.YL.DDZAudio.playCommonBGM(4);
    };
    DDZ_Animation.playDizhu = function(playerIndex) {
      this.bindplayNode();
      this.UIROOTCOM.PlayDizhu(playerIndex);
    };
    DDZ_Animation.playShunziLianduiFeiji = function(playerIndex, str) {
      this.bindplayNode();
      this.UIROOTCOM.PlayShunLianFei(playerIndex, str);
    };
    DDZ_Animation.playRocket = function(playerIndex) {
      this.bindplayNode();
      this.UIROOTCOM.PlayRocket(playerIndex);
    };
    DDZ_Animation.playAnimationByType = function(playerIndex, type) {
      if (-1 == playerIndex) {
        cc.YL.err("错误的玩家index");
        return;
      }
      switch (type) {
       case 6:
        this.playShunziLianduiFeiji(playerIndex, "Shunzi");
        cc.YL.DDZAudio.playCommonBGM(3);
        break;

       case 7:
        this.playShunziLianduiFeiji(playerIndex, "Liandui");
        cc.YL.DDZAudio.playCommonBGM(3);
        break;

       case 8:
       case 9:
       case 10:
        this.playShunziLianduiFeiji(playerIndex, "Feiji");
        cc.YL.DDZAudio.playCommonBGM(5);
        break;

       case 13:
        this.playBoom(playerIndex);
        cc.YL.DDZAudio.playCommonBGM(0);
        break;

       case 14:
        this.playRocket(playerIndex);
        cc.YL.DDZAudio.playCommonBGM(6);
      }
    };
    module.exports = DDZ_Animation;
    cc.YL.DDZAnimation = DDZ_Animation;
    cc._RF.pop();
  }, {} ],
  DDZ_CardTypeConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "92227zApmhJTbB0ytBrOwMZ", "DDZ_CardTypeConfig");
    "use strict";
    var DDZPokerType = cc.Class({});
    DDZPokerType.typeEnum = {
      "王炸": 12,
      "炸弹": 11,
      "单张": 10,
      "对子": 9,
      "三张": 8,
      "三带一": 7,
      "三带二": 6,
      "顺子": 5,
      "连对": 4,
      "飞机带单张": 3,
      "飞机带对子": 2,
      "四带二": 1
    };
    cc._RF.pop();
  }, {} ],
  DDZ_CardValueConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5ba26ZzLC1NU69ElGWN2C5+", "DDZ_CardValueConfig");
    "use strict";
    var CardtypeArrTrans = cc.Class({});
    CardtypeArrTrans.pokertypeArrArr = [ "02", "01", "02", "04" ];
    CardtypeArrTrans.TransPokertypeArr = function(PokerID) {
      return this._transPoker(PokerID);
    };
    CardtypeArrTrans.pokerMap = [ {}, {
      typeArr: "03",
      valueArr: "3",
      Num: 3,
      ID: 1
    }, {
      typeArr: "03",
      valueArr: "4",
      Num: 4,
      ID: 2
    }, {
      typeArr: "03",
      valueArr: "5",
      Num: 5,
      ID: 3
    }, {
      typeArr: "03",
      valueArr: "6",
      Num: 6,
      ID: 4
    }, {
      typeArr: "03",
      valueArr: "7",
      Num: 7,
      ID: 5
    }, {
      typeArr: "03",
      valueArr: "8",
      Num: 8,
      ID: 6
    }, {
      typeArr: "03",
      valueArr: "9",
      Num: 9,
      ID: 7
    }, {
      typeArr: "03",
      valueArr: "10",
      Num: 10,
      ID: 8
    }, {
      typeArr: "03",
      valueArr: "J",
      Num: 11,
      ID: 9
    }, {
      typeArr: "03",
      valueArr: "Q",
      Num: 12,
      ID: 10
    }, {
      typeArr: "03",
      valueArr: "K",
      Num: 13,
      ID: 11
    }, {
      typeArr: "03",
      valueArr: "A",
      Num: 14,
      ID: 12
    }, {
      typeArr: "03",
      valueArr: "2",
      Num: 15,
      ID: 13
    }, {
      typeArr: "01",
      valueArr: "3a",
      Num: 3,
      ID: 14
    }, {
      typeArr: "01",
      valueArr: "4a",
      Num: 4,
      ID: 15
    }, {
      typeArr: "01",
      valueArr: "5a",
      Num: 5,
      ID: 16
    }, {
      typeArr: "01",
      valueArr: "6a",
      Num: 6,
      ID: 17
    }, {
      typeArr: "01",
      valueArr: "7a",
      Num: 7,
      ID: 18
    }, {
      typeArr: "01",
      valueArr: "8a",
      Num: 8,
      ID: 19
    }, {
      typeArr: "01",
      valueArr: "9a",
      Num: 9,
      ID: 20
    }, {
      typeArr: "01",
      valueArr: "10a",
      Num: 10,
      ID: 21
    }, {
      typeArr: "01",
      valueArr: "J1",
      Num: 11,
      ID: 22
    }, {
      typeArr: "01",
      valueArr: "Q1",
      Num: 12,
      ID: 23
    }, {
      typeArr: "01",
      valueArr: "K1",
      Num: 13,
      ID: 24
    }, {
      typeArr: "01",
      valueArr: "A1",
      Num: 14,
      ID: 25
    }, {
      typeArr: "01",
      valueArr: "2a",
      Num: 15,
      ID: 26
    }, {
      typeArr: "02",
      valueArr: "3a",
      Num: 3,
      ID: 27
    }, {
      typeArr: "02",
      valueArr: "4a",
      Num: 4,
      ID: 28
    }, {
      typeArr: "02",
      valueArr: "5a",
      Num: 5,
      ID: 29
    }, {
      typeArr: "02",
      valueArr: "6a",
      Num: 6,
      ID: 30
    }, {
      typeArr: "02",
      valueArr: "7a",
      Num: 7,
      ID: 31
    }, {
      typeArr: "02",
      valueArr: "8a",
      Num: 8,
      ID: 32
    }, {
      typeArr: "02",
      valueArr: "9a",
      Num: 9,
      ID: 33
    }, {
      typeArr: "02",
      valueArr: "10a",
      Num: 10,
      ID: 34
    }, {
      typeArr: "02",
      valueArr: "J1",
      Num: 11,
      ID: 35
    }, {
      typeArr: "02",
      valueArr: "Q1",
      Num: 12,
      ID: 36
    }, {
      typeArr: "02",
      valueArr: "K1",
      Num: 13,
      ID: 37
    }, {
      typeArr: "02",
      valueArr: "A1",
      Num: 14,
      ID: 38
    }, {
      typeArr: "02",
      valueArr: "2a",
      Num: 15,
      ID: 39
    }, {
      typeArr: "04",
      valueArr: "3",
      Num: 3,
      ID: 40
    }, {
      typeArr: "04",
      valueArr: "4",
      Num: 4,
      ID: 41
    }, {
      typeArr: "04",
      valueArr: "5",
      Num: 5,
      ID: 42
    }, {
      typeArr: "04",
      valueArr: "6",
      Num: 6,
      ID: 43
    }, {
      typeArr: "04",
      valueArr: "7",
      Num: 7,
      ID: 44
    }, {
      typeArr: "04",
      valueArr: "8",
      Num: 8,
      ID: 45
    }, {
      typeArr: "04",
      valueArr: "9",
      Num: 9,
      ID: 46
    }, {
      typeArr: "04",
      valueArr: "10",
      Num: 10,
      ID: 47
    }, {
      typeArr: "04",
      valueArr: "J",
      Num: 11,
      ID: 48
    }, {
      typeArr: "04",
      valueArr: "Q",
      Num: 12,
      ID: 49
    }, {
      typeArr: "04",
      valueArr: "K",
      Num: 13,
      ID: 50
    }, {
      typeArr: "04",
      valueArr: "A",
      Num: 14,
      ID: 51
    }, {
      typeArr: "04",
      valueArr: "2",
      Num: 15,
      ID: 52
    }, {
      typeArr: "00",
      valueArr: "W",
      Num: 53,
      ID: 53
    }, {
      typeArr: "00",
      valueArr: "W1",
      Num: 54,
      ID: 54
    } ];
    CardtypeArrTrans._transPoker = function(PokerID) {
      return this.pokerMap[PokerID];
    };
    cc.YL.cardtypeArrTrans = CardtypeArrTrans;
    module.exports = CardtypeArrTrans;
    cc._RF.pop();
  }, {} ],
  DDZ_Chat: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "30c3dEWXkRC24HTUOvZ3EyG", "DDZ_Chat");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        toolsPre: cc.Prefab,
        textPre: cc.Prefab,
        emojiPre: cc.Prefab,
        voicePre: cc.Prefab
      },
      onLoad: function onLoad() {
        this.initMessage();
      },
      onDestroy: function onDestroy() {
        this.cleanMessage();
      },
      initMessage: function initMessage() {
        fun.event.add("DDZRoomChat", "RoomChat", this.onChatAck.bind(this));
        fun.event.add("DDZRoomChatVoice", "RoomChatVoice", this.onVoiceAck.bind(this));
      },
      cleanMessage: function cleanMessage() {
        fun.event.remove("DDZRoomChat");
        fun.event.remove("DDZRoomChatVoice");
      },
      onChatAck: function onChatAck(data) {
        this.selfID = fun.db.getData("UserInfo").UserId;
        "emoji" === data.chatType ? this.showEmoji(data) : "interact" === data.chatType ? this.showTools(data) : "text" === data.chatType && this.showMsg(data);
      },
      onVoiceAck: function onVoiceAck(data) {
        this.selfID = fun.db.getData("UserInfo").UserId;
        cc.YL.info("ddz收到语音消息", data.length, data.from, this.selfID);
        this.selfPos = cc.p(-513, -141);
        this.rightPos = cc.p(518, 212);
        this.leftPos = cc.p(-506, 219);
        var voice = cc.instantiate(this.voicePre);
        this.node.addChild(voice);
        voice.getChildByName("Voice").getComponent(sp.Skeleton).animation = "animation";
        this.selfID == data.from && voice.setPosition(this.selfPos);
        if (data.from == cc.YL.DDZrightPlayerInfo.userId) {
          voice.setPosition(this.rightPos);
          voice.setScale(-1, 1);
        }
        data.from == cc.YL.DDZleftPlayerInfo.userId && voice.setPosition(this.leftPos);
        cc.YL.info("开始播放语音", voice.x, voice.y, voice.parent.name);
        setTimeout(function() {
          voice.active = false;
          voice.removeFromParent();
        }.bind(this), 1e3 * data.length);
      },
      showMsg: function showMsg(data) {
        this.selfPos = cc.p(-557, -141);
        this.rightPos = cc.p(562, 212);
        this.leftPos = cc.p(-555, 211);
        if (this.selfID == data.from) {
          var text = cc.instantiate(this.textPre);
          this.node.addChild(text);
          text.getChildByName("text").getComponent(cc.Label).string = data.content.toString();
          text.getChildByName("text").width = 26 * data.content.length;
          text.width = 26 * data.content.length + 26;
          text.setPosition(this.selfPos);
          setTimeout(function() {
            text.active = false;
            text.removeFromParent();
          }.bind(this), 2e3);
        }
        if (data.from == cc.YL.DDZrightPlayerInfo.userId) {
          var text_3 = cc.instantiate(this.textPre);
          this.node.addChild(text_3);
          text_3.getChildByName("text").getComponent(cc.Label).string = data.content.toString();
          text_3.getChildByName("text").width = 26 * data.content.length;
          text_3.width = 26 * data.content.length + 26;
          text_3.setPosition(this.rightPos);
          text_3.setScale(-1, 1);
          text_3.getChildByName("text").setScale(-1, 1);
          var posX = text_3.getChildByName("text").getPositionX();
          text_3.getChildByName("text").setPositionX(posX + 26 * data.content.length);
          setTimeout(function() {
            text_3.active = false;
            text_3.removeFromParent();
          }.bind(this), 2e3);
        }
        if (data.from == cc.YL.DDZleftPlayerInfo.userId) {
          var text_2 = cc.instantiate(this.textPre);
          this.node.addChild(text_2);
          text_2.getChildByName("text").getComponent(cc.Label).string = data.content.toString();
          text_2.getChildByName("text").width = 26 * data.content.length;
          text_2.width = 26 * data.content.length + 26;
          text_2.setPosition(this.leftPos);
          setTimeout(function() {
            text_2.active = false;
            text_2.removeFromParent();
          }.bind(this), 2e3);
        }
        cc.YL.DDZAudio.playMsgMusic(data.from, parseInt(data.index + 1));
      },
      showEmoji: function showEmoji(data) {
        this.selfPos = cc.p(-602, -202);
        this.rightPos = cc.p(588, 149);
        this.leftPos = cc.p(-588, 149);
        if (this.selfID == data.from) {
          var emoji = cc.instantiate(this.emojiPre);
          this.node.addChild(emoji);
          var anim = emoji.getComponent(sp.Skeleton);
          anim.animation = data.content;
          emoji.setPosition(this.selfPos);
          emoji.setScale(1.3);
          setTimeout(function() {
            emoji.active = false;
            emoji.removeFromParent();
          }.bind(this), 2e3);
        }
        if (data.from == cc.YL.DDZrightPlayerInfo.userId) {
          var emoji_2 = cc.instantiate(this.emojiPre);
          this.node.addChild(emoji_2);
          var anim = emoji_2.getComponent(sp.Skeleton);
          anim.animation = data.content;
          emoji_2.setPosition(this.rightPos);
          emoji_2.setScale(1.3);
          setTimeout(function() {
            emoji_2.active = false;
            emoji_2.removeFromParent();
          }.bind(this), 2e3);
        }
        if (data.from == cc.YL.DDZleftPlayerInfo.userId) {
          var emoji_3 = cc.instantiate(this.emojiPre);
          this.node.addChild(emoji_3);
          var anim = emoji_3.getComponent(sp.Skeleton);
          anim.animation = data.content;
          emoji_3.setPosition(this.leftPos);
          emoji_3.setScale(1.3);
          setTimeout(function() {
            emoji_3.active = false;
            emoji_3.removeFromParent();
          }.bind(this), 2e3);
        }
      },
      showTools: function showTools(data) {
        this.selfPos = cc.p(-597, -229);
        this.rightPos = cc.p(593, 137);
        this.leftPos = cc.p(-592, 132);
        var startPos = cc.p(0, 0);
        var endPos = cc.p(0, 0);
        this.selfID == data.from && (startPos = this.selfPos);
        data.from == cc.YL.DDZrightPlayerInfo.userId && (startPos = this.rightPos);
        data.from == cc.YL.DDZleftPlayerInfo.userId && (startPos = this.leftPos);
        this.selfID == data.to && (endPos = this.selfPos);
        data.to == cc.YL.DDZrightPlayerInfo.userId && (endPos = this.rightPos);
        data.to == cc.YL.DDZleftPlayerInfo.userId && (endPos = this.leftPos);
        var toolsNode = cc.instantiate(this.toolsPre);
        this.node.addChild(toolsNode);
        toolsNode.getComponent("interact").show(data, startPos, endPos, true);
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_DeskInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "30117L+hyhExp693568mNfj", "DDZ_DeskInfo");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  DDZ_DiPai: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "630c5SRp6BEXb/4UiYbskhd", "DDZ_DiPai");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        pokerPre: cc.Prefab
      },
      onLoad: function onLoad() {},
      clearDiPai: function clearDiPai() {
        this.node.removeAllChildren();
        this.node.parent.getChildByName("GameInfo").getChildByName("DiPaiBack").active = true;
        this.node.active = false;
      },
      initDiPai: function initDiPai(list, isReconnect) {
        this._childScale = .25;
        this._childScale_old = .7;
        this._diPaiArr = [];
        this._diPaiPosArr = [ cc.p(-41, 0), cc.p(0, 0), cc.p(41, 0) ];
        this._diPaiPosArr_old = [ cc.p(-200, -300), cc.p(0, -300), cc.p(200, -300) ];
        this.node.parent.getChildByName("GameInfo").getChildByName("DiPaiBack").active = false;
        var lists = [];
        lists = cc.YL.DDZTools.SortPoker(list);
        this._diPaiArr = lists;
        lists = lists.reverse();
        for (var i = 0; i < lists.length; i++) {
          var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(lists[i]);
          var newNode = cc.instantiate(this.pokerPre);
          newNode.setScale(this._childScale_old);
          newNode.setPosition(this._diPaiPosArr_old[i]);
          newNode.getComponent("DDZ_Poker").initPoker(pokerObj);
          this.node.addChild(newNode);
          newNode.getChildByName("BG").active = true;
        }
        this.node.active = true;
        if (true == isReconnect) {
          this.node.children[0].setScale(this._childScale);
          this.node.children[0].setPosition(this._diPaiPosArr[0]);
          this.node.children[1].setScale(this._childScale);
          this.node.children[1].setPosition(this._diPaiPosArr[1]);
          this.node.children[2].setScale(this._childScale);
          this.node.children[2].setPosition(this._diPaiPosArr[2]);
          this.node.children[0].getChildByName("BG").active = false;
          this.node.children[1].getChildByName("BG").active = false;
          this.node.children[2].getChildByName("BG").active = false;
        } else setTimeout(function() {
          this.node.children[0].stopAllActions();
          var midFunc = cc.callFunc(function() {
            this.node.children[0].getChildByName("BG").active = false;
          }.bind(this));
          this.node.children[0].runAction(cc.sequence(cc.scaleTo(.12, .5, this._childScale_old), cc.scaleTo(.12, 0, this._childScale_old), midFunc, cc.scaleTo(.12, .5, this._childScale_old), cc.scaleTo(.12, 1, this._childScale_old), cc.spawn(cc.moveTo(.2, this._diPaiPosArr[0]), cc.scaleTo(.2, this._childScale))));
          this.node.children[1].stopAllActions();
          var midFunc = cc.callFunc(function() {
            this.node.children[1].getChildByName("BG").active = false;
          }.bind(this));
          this.node.children[1].runAction(cc.sequence(cc.scaleTo(.12, .5, this._childScale_old), cc.scaleTo(.12, 0, this._childScale_old), midFunc, cc.scaleTo(.12, .5, this._childScale_old), cc.scaleTo(.12, 1, this._childScale_old), cc.spawn(cc.moveTo(.2, this._diPaiPosArr[1]), cc.scaleTo(.2, this._childScale))));
          this.node.children[2].stopAllActions();
          var midFunc = cc.callFunc(function() {
            this.node.children[2].getChildByName("BG").active = false;
          }.bind(this));
          this.node.children[2].runAction(cc.sequence(cc.scaleTo(.12, .5, this._childScale_old), cc.scaleTo(.12, 0, this._childScale_old), midFunc, cc.scaleTo(.12, .5, this._childScale_old), cc.scaleTo(.12, 1, this._childScale_old), cc.spawn(cc.moveTo(.2, this._diPaiPosArr[2]), cc.scaleTo(.2, this._childScale))));
        }.bind(this), 200);
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_Disslove: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6ba20sfv7FLv53mJErElxzl", "DDZ_Disslove");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {},
      onClickComfire: function onClickComfire() {
        cc.YL.DDZAudio.playBtnClick();
        fun.net.send("PID_DISSOLVE_REPLY", {
          userId: fun.db.getData("UserInfo").UserId,
          isAgree: true
        });
      },
      onClickCancel: function onClickCancel() {
        cc.YL.DDZAudio.playBtnClick();
        fun.net.send("PID_DISSOLVE_REPLY", {
          userId: fun.db.getData("UserInfo").UserId,
          isAgree: false
        });
      },
      initUI: function initUI(msg) {
        this.playerNode = this.node.getChildByName("back").getChildByName("playerList");
        var nickName = msg.applyer + "";
        if (fun.db.getData("UserInfo").UserId == msg.applyer) {
          nickName = cc.YL.DDZselfPlayerInfo.nickName;
          this.node.getChildByName("back").getChildByName("btnDisagree").active = false;
          this.node.getChildByName("back").getChildByName("btnAgree").active = false;
        }
        msg.applyer == cc.YL.DDZrightPlayerInfo.userId && (nickName = cc.YL.DDZrightPlayerInfo.nickName);
        msg.applyer == cc.YL.DDZleftPlayerInfo.userId && (nickName = cc.YL.DDZleftPlayerInfo.nickName);
        this.node.getChildByName("back").getChildByName("title").getComponent(cc.RichText).string = "玩家" + nickName + "申请退出游戏，请投票";
        this.playerNode.getChildByName("player_1").getChildByName("name").getComponent(cc.Label).string = cc.YL.DDZrightPlayerInfo.nickName + "";
        this.playerNode.getChildByName("player_2").getChildByName("name").getComponent(cc.Label).string = cc.YL.DDZleftPlayerInfo.nickName + "";
        this.playerNode.getChildByName("player_0").getChildByName("name").getComponent(cc.Label).string = cc.YL.DDZselfPlayerInfo.nickName + "";
        fun.utils.loadUrlRes(cc.YL.DDZrightPlayerInfo.headUrl, this.playerNode.getChildByName("player_1").getChildByName("img"));
        fun.utils.loadUrlRes(cc.YL.DDZleftPlayerInfo.headUrl, this.playerNode.getChildByName("player_2").getChildByName("img"));
        fun.utils.loadUrlRes(cc.YL.DDZselfPlayerInfo.headUrl, this.playerNode.getChildByName("player_0").getChildByName("img"));
        if (fun.db.getData("UserInfo").UserId == msg.responseUser) {
          true == msg.isAgree ? this.playerNode.getChildByName("player_0").getChildByName("ok").active = true : this.dissFail("解散房间失败，玩家" + cc.YL.DDZselfPlayerInfo.nickName + "拒绝解散房间");
          this.node.getChildByName("back").getChildByName("btnDisagree").active = false;
          this.node.getChildByName("back").getChildByName("btnAgree").active = false;
        }
        msg.responseUser == cc.YL.DDZrightPlayerInfo.userId && (true == msg.isAgree ? this.playerNode.getChildByName("player_1").getChildByName("ok").active = true : this.dissFail("解散房间失败，玩家" + cc.YL.DDZrightPlayerInfo.nickName + "拒绝解散房间"));
        msg.responseUser == cc.YL.DDZleftPlayerInfo.userId && (true == msg.isAgree ? this.playerNode.getChildByName("player_2").getChildByName("ok").active = true : this.dissFail("解散房间失败，玩家" + cc.YL.DDZleftPlayerInfo.nickName + "拒绝解散房间"));
        this.setTime(msg.remainSeconds);
      },
      setTime: function setTime(time) {
        this.timeLabNode = this.node.getChildByName("back").getChildByName("timeLabel");
        this.timeLabNode.getComponent(cc.Label).string = time;
        this.time = time;
        this.schedule(this.updateTimeStr, 1);
      },
      onDestroy: function onDestroy() {
        this.unschedule(this.updateTimeStr);
      },
      updateTimeStr: function updateTimeStr() {
        this.time--;
        if (this.time <= 0) {
          this.timeLabNode.getComponent(cc.Label).string = "0";
          this.unschedule(this.updateTimeStr.bind(this));
        } else this.timeLabNode.getComponent(cc.Label).string = this.time.toString();
      },
      dissFail: function dissFail(str) {
        var UIROOT = cc.find("DDZ_UIROOT");
        UIROOT.getChildByName("MainNode").getComponent("DDZ_Main").showPopWin(str, 1);
        this.node.active = false;
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_FaiPaiAction: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8e6f4qmnvlOAoUdLZfPrLd6", "DDZ_FaiPaiAction");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        poker: cc.Prefab
      },
      onLoad: function onLoad() {
        this.bindNode();
        this.selfFly.setPosition(5, 9);
        this.rightFly.setPosition(49.1, 73.2);
        this.leftFly.setPosition(-15.7, 70.6);
        this.fapaiPoint = 0;
      },
      bindNode: function bindNode() {
        this.selfFly = this.node.getChildByName("SelfFlyNode");
        this.leftFly = this.node.getChildByName("LeftFlyNode");
        this.rightFly = this.node.getChildByName("RightFlyNode");
        this.leftPokerNode = this.node.getChildByName("LeftPokerNode");
        this.rightPokerNode = this.node.getChildByName("RightPokerNode");
        this.selfActiveNode = cc.find("DDZ_UIROOT/MainNode/SelfPlayerPoker");
        this.selfHandPokerNode = this.selfActiveNode.getChildByName("HandPoker");
      },
      startFaPai: function startFaPai() {
        this.fapaiPoint = 0;
        this.schedule(this.actionFunc, .1);
      },
      actionFunc: function actionFunc() {
        if (this.fapaiPoint <= 16) {
          this.bindNode();
          this.selfFly.setPosition(5, 9);
          this.rightFly.setPosition(49.1, 73.2);
          this.leftFly.setPosition(-15.7, 70.6);
          this.selfFly.stopAllActions();
          this.rightFly.stopAllActions();
          this.leftFly.stopAllActions();
          cc.YL.DDZAudio.playFaPai();
          this.selfFly.runAction(cc.moveTo(.08, 5, -125));
          this.rightFly.runAction(cc.moveTo(.08, 397, 73));
          this.leftFly.runAction(cc.moveTo(.08, -388, 71));
          this.showPokerFunc();
        } else {
          this.unschedule(this.actionFunc);
          this.node.active = false;
          this.node.destroy();
        }
      },
      showPokerFunc: function showPokerFunc() {
        this.bindNode();
        this.selfHandPokerNode.children[this.fapaiPoint].active = true;
        this.rightPokerNode.addChild(this.initPoker(1));
        this.leftPokerNode.addChild(this.initPoker(2));
        this.fapaiPoint++;
      },
      initPoker: function initPoker(type) {
        var node = cc.instantiate(this.poker);
        if (1 == type) {
          var posX = -10 * this.fapaiPoint;
          node.setPosition(posX, 0);
        } else if (2 == type) {
          var posX = 10 * this.fapaiPoint;
          node.setPosition(posX, 0);
        }
        return node;
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_GameAction: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "19708J95zBDuZEQBeyUaw5y", "DDZ_GameAction");
    "use strict";
    var GameAction = cc.Class({});
    GameAction.bindNodeName = function() {
      this.selfID = fun.db.getData("UserInfo").UserId;
      this.selfNode = cc.find("DDZ_UIROOT/MainNode/SelfPlayerInfo");
      this.rightNode = cc.find("DDZ_UIROOT/MainNode/RightPlayerInfo");
      this.leftNode = cc.find("DDZ_UIROOT/MainNode/LeftPlayerInfo");
      this.selfActiveNode = cc.find("DDZ_UIROOT/MainNode/SelfPlayerPoker");
      this.rightActiveNode = cc.find("DDZ_UIROOT/MainNode/RightPlayerPoker");
      this.leftActiveNode = cc.find("DDZ_UIROOT/MainNode/LeftPlayerPoker");
      this.selfHandPokerNode = this.selfActiveNode.getChildByName("HandPoker");
      this.rightHandPokerNode = this.rightActiveNode.getChildByName("HandPoker");
      this.leftHandPokerNode = this.leftActiveNode.getChildByName("HandPoker");
      this.selfOutNode = this.selfActiveNode.getChildByName("OutPoker");
      this.rightOutNode = this.rightActiveNode.getChildByName("OutPoker");
      this.leftOutNode = this.leftActiveNode.getChildByName("OutPoker");
      this.selfOutNodeComp = this.selfOutNode.getComponent("DDZ_PlayerSelfOutPoker");
      this.rightOutNodeComp = this.rightOutNode.getComponent("DDZ_PlayerRightOutPoker");
      this.leftOutNodeComp = this.leftOutNode.getComponent("DDZ_PlayerLeftOutPoker");
      this.selfHandPokerNodeComp = this.selfHandPokerNode.getComponent("DDZ_PlayerSelfPoker");
      this.rightHandPokerNodeComp = this.rightHandPokerNode.getComponent("DDZ_PlayerRightPoker");
      this.leftHandPokerNodeComp = this.leftHandPokerNode.getComponent("DDZ_PlayerLeftPoker");
      this.selfNodeComp = this.selfNode.getComponent("DDZ_PlayerSelfInfo");
      this.rightNodeComp = this.rightNode.getComponent("DDZ_PlayerRightInfo");
      this.leftNodeComp = this.leftNode.getComponent("DDZ_PlayerLeftInfo");
      this.BtnNode = cc.find("DDZ_UIROOT/MainNode/PlayerBtnNode");
    };
    GameAction.startJiaoFen = function(data) {
      this.bindNodeName();
      this.BtnNode.removeAllChildren();
      this.selfNodeComp.showHeadAnimation(false);
      this.rightNodeComp.showHeadAnimation(false);
      this.leftNodeComp.showHeadAnimation(false);
      if (data.retMsg.userId == this.selfID) {
        this.selfNodeComp.showHeadAnimation(true);
        var jiaoFenPre = this.BtnNode.getComponent("DDZ_PlayerBtn").JiaoFen;
        var jiaoFenNode = this.BtnNode.getChildByName("DDZ_JiaoFen") ? this.BtnNode.getChildByName("DDZ_JiaoFen") : cc.instantiate(jiaoFenPre);
        this.BtnNode.getChildByName("DDZ_JiaoFen") ? this.BtnNode.getChildByName("DDZ_JiaoFen").active = true : this.BtnNode.addChild(jiaoFenNode);
        jiaoFenNode.getComponent("DDZ_JiaoFen").initJIaoFenUI(data);
      }
      data.retMsg.userId == cc.YL.DDZrightPlayerInfo.userId && this.rightNodeComp.showHeadAnimation(true);
      data.retMsg.userId == cc.YL.DDZleftPlayerInfo.userId && this.leftNodeComp.showHeadAnimation(true);
    };
    GameAction.updateJiaoFen = function(data) {
      this.bindNodeName();
      if (this.selfID == data.retMsg.userId) {
        if (this.BtnNode.getChildByName("DDZ_JiaoFen")) {
          this.BtnNode.getChildByName("DDZ_JiaoFen").active = false;
          this.BtnNode.getChildByName("DDZ_JiaoFen").destroy();
        }
        0 != data.fen ? this.selfNodeComp.updateOutWord(parseInt(data.fen + 3)) : this.selfNodeComp.updateOutWord(3);
        this.selfNodeComp.hideOffline();
      }
      if (data.retMsg.userId == cc.YL.DDZrightPlayerInfo.userId) {
        0 != data.fen ? this.rightNodeComp.updateOutWord(parseInt(data.fen + 3)) : this.rightNodeComp.updateOutWord(3);
        this.rightNodeComp.hideOffline();
      }
      if (data.retMsg.userId == cc.YL.DDZleftPlayerInfo.userId) {
        0 != data.fen ? this.leftNodeComp.updateOutWord(parseInt(data.fen + 3)) : this.leftNodeComp.updateOutWord(3);
        this.leftNodeComp.hideOffline();
      }
    };
    GameAction.endJiaoFen = function() {
      this.bindNodeName();
      if (this.BtnNode.getChildByName("DDZ_JiaoFen")) {
        this.BtnNode.getChildByName("DDZ_JiaoFen").active = false;
        this.BtnNode.getChildByName("DDZ_JiaoFen").destroy();
      }
    };
    GameAction.startJiaBei = function(data) {
      this.bindNodeName();
      this.selfNodeComp.showHeadAnimation(false);
      this.rightNodeComp.showHeadAnimation(false);
      this.leftNodeComp.showHeadAnimation(false);
      if (data.retMsg.userId = this.selfID) {
        var jiaBeiPre = this.BtnNode.getComponent("DDZ_PlayerBtn").JiaBei;
        this.BtnNode.removeAllChildren();
        var jiaBeiNode = this.BtnNode.getChildByName("DDZ_JiaBei") ? this.BtnNode.getChildByName("DDZ_JiaBei") : cc.instantiate(jiaBeiPre);
        this.BtnNode.getChildByName("DDZ_JiaBei") ? this.BtnNode.getChildByName("DDZ_JiaBei").active = true : this.BtnNode.addChild(jiaBeiNode);
      }
    };
    GameAction.updateJiaBei = function(data) {
      this.bindNodeName();
      if (this.selfID == data.retMsg.userId) {
        if (this.BtnNode.getChildByName("DDZ_JiaBei")) {
          this.BtnNode.getChildByName("DDZ_JiaBei").active = false;
          this.BtnNode.getChildByName("DDZ_JiaBei").destroy();
        }
        true == data.jiaBeiResult ? this.selfNodeComp.updateOutWord(2) : this.selfNodeComp.updateOutWord(13);
        this.selfNodeComp.showRate(data.jiaBeiResult);
        this.selfNodeComp.hideOffline();
      }
      if (data.retMsg.userId == cc.YL.DDZrightPlayerInfo.userId) {
        true == data.jiaBeiResult ? this.rightNodeComp.updateOutWord(2) : this.rightNodeComp.updateOutWord(13);
        this.rightNodeComp.showRate(data.jiaBeiResult);
        this.rightNodeComp.hideOffline();
      }
      if (data.retMsg.userId == cc.YL.DDZleftPlayerInfo.userId) {
        true == data.jiaBeiResult ? this.leftNodeComp.updateOutWord(2) : this.leftNodeComp.updateOutWord(13);
        this.leftNodeComp.showRate(data.jiaBeiResult);
        this.leftNodeComp.hideOffline();
      }
    };
    GameAction.endJiaBei = function() {
      this.bindNodeName();
      if (this.BtnNode.getChildByName("DDZ_JiaBei")) {
        this.BtnNode.getChildByName("DDZ_JiaBei").active = false;
        this.BtnNode.getChildByName("DDZ_JiaBei").destroy();
      }
    };
    GameAction.showDiPai = function(data, isReconnect) {
      var node = cc.find("DDZ_UIROOT/MainNode/BtnNode/DiPaiNode");
      node.getComponent("DDZ_DiPai").initDiPai(data.diPais, isReconnect);
    };
    GameAction.removeDiPai = function() {
      var node = cc.find("DDZ_UIROOT/MainNode/BtnNode/DiPaiNode");
      node.getComponent("DDZ_DiPai").clearDiPai();
    };
    GameAction.overTurn = function(data) {
      cc.YL.info("收到overturn 当前操作玩家", data.activeUser);
      this.bindNodeName();
      this.selfHandPokerNodeComp.setTouchEvent(true);
      this.selfNodeComp.showHeadAnimation(false);
      this.rightNodeComp.showHeadAnimation(false);
      this.leftNodeComp.showHeadAnimation(false);
      for (var i = 0; i < data.playerRate.length; i++) if (this.selfID == data.playerRate[i].userId) {
        var UIROOT = cc.find("DDZ_UIROOT");
        cc.YL.DDZSelfRate = data.playerRate[i].rate;
        UIROOT.getChildByName("MainNode").getComponent("DDZ_Main").initRate(data.playerRate[i].rate);
      }
      if (this.selfID == data.activeUser) {
        this.selfNodeComp.updateOutWord(0);
        this.selfNodeComp.showHeadAnimation(true);
        this.BtnNode.removeAllChildren();
        this.selfOutNode.removeAllChildren();
        if (false == data.canOut) {
          var passPre = this.BtnNode.getComponent("DDZ_PlayerBtn").pass;
          var passNode = this.BtnNode.getChildByName("DDZ_Pass") ? this.BtnNode.getChildByName("DDZ_Pass") : cc.instantiate(passPre);
          this.BtnNode.getChildByName("DDZ_Pass") ? this.BtnNode.getChildByName("DDZ_Pass").active = true : this.BtnNode.addChild(passNode);
          this.selfHandPokerNodeComp.setTouchEvent(false);
        } else {
          var outCardPre = this.BtnNode.getComponent("DDZ_PlayerBtn").outCard;
          var outCardNode = this.BtnNode.getChildByName("DDZ_OutCard") ? this.BtnNode.getChildByName("DDZ_OutCard") : cc.instantiate(outCardPre);
          this.BtnNode.getChildByName("DDZ_OutCard") ? this.BtnNode.getChildByName("DDZ_OutCard").active = true : this.BtnNode.addChild(outCardNode);
          outCardNode.getComponent("DDZ_OutCard").initBtnStatus(data.isNewRound);
        }
      } else if (data.activeUser == cc.YL.DDZrightPlayerInfo.userId) {
        this.rightNodeComp.showHeadAnimation(true);
        this.rightOutNode.removeAllChildren();
      } else if (data.activeUser == cc.YL.DDZleftPlayerInfo.userId) {
        this.leftNodeComp.showHeadAnimation(true);
        this.leftOutNode.removeAllChildren();
      }
      true == data.isNewRound && setTimeout(function() {
        this.selfNodeComp.updateOutWord(0);
        this.rightNodeComp.updateOutWord(0);
        this.leftNodeComp.updateOutWord(0);
        this.leftOutNode.removeAllChildren();
        this.rightOutNode.removeAllChildren();
      }.bind(this), 300);
    };
    GameAction.showPass = function(data) {
      this.bindNodeName();
      if (this.selfID == data.retMsg.userId) {
        this.selfNodeComp.updateOutWord(1);
        this.selfNodeComp.hideOffline();
      }
      if (data.retMsg.userId == cc.YL.DDZrightPlayerInfo.userId) {
        this.rightNodeComp.updateOutWord(1);
        this.rightNodeComp.hideOffline();
      }
      if (data.retMsg.userId == cc.YL.DDZleftPlayerInfo.userId) {
        this.leftNodeComp.updateOutWord(1);
        this.leftNodeComp.hideOffline();
      }
    };
    GameAction.showDissUI = function(data) {
      var UIROOT = cc.find("DDZ_UIROOT");
      UIROOT.getChildByName("MainNode").getComponent("DDZ_Main").showDissUI(data);
    };
    GameAction.showDissResult = function(data) {
      var UIROOT = cc.find("DDZ_UIROOT");
      UIROOT.getChildByName("MainNode").getComponent("DDZ_Main").showDissResult("房间已解散");
    };
    GameAction.outCardFail = function() {
      this.selfHandPokerNodeComp.setTouchEvent(true);
      var UIROOT = cc.find("DDZ_UIROOT");
      UIROOT.getChildByName("MainNode").getComponent("DDZ_Main").showTipStr("非法牌型，出牌失败");
    };
    module.exports = GameAction;
    cc.YL.DDZGameAction = GameAction;
    cc._RF.pop();
  }, {} ],
  DDZ_GameManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4f7f2nS3+RCoaPFMwfcZ935", "DDZ_GameManager");
    "use strict";
    var DDZGameManager = cc.Class({});
    DDZGameManager.bindNodeValue = function() {
      this.selfID = fun.db.getData("UserInfo").UserId;
      this.selfNode = cc.find("DDZ_UIROOT/MainNode/SelfPlayerInfo");
      this.rightNode = cc.find("DDZ_UIROOT/MainNode/RightPlayerInfo");
      this.leftNode = cc.find("DDZ_UIROOT/MainNode/LeftPlayerInfo");
      this.selfActiveNode = cc.find("DDZ_UIROOT/MainNode/SelfPlayerPoker");
      this.rightActiveNode = cc.find("DDZ_UIROOT/MainNode/RightPlayerPoker");
      this.leftActiveNode = cc.find("DDZ_UIROOT/MainNode/LeftPlayerPoker");
      this.selfHandPokerNode = this.selfActiveNode.getChildByName("HandPoker");
      this.rightHandPokerNode = this.rightActiveNode.getChildByName("HandPoker");
      this.leftHandPokerNode = this.leftActiveNode.getChildByName("HandPoker");
      this.selfOutNode = this.selfActiveNode.getChildByName("OutPoker");
      this.rightOutNode = this.rightActiveNode.getChildByName("OutPoker");
      this.leftOutNode = this.leftActiveNode.getChildByName("OutPoker");
      this.selfOutNodeComp = this.selfOutNode.getComponent("DDZ_PlayerSelfOutPoker");
      this.rightOutNodeComp = this.rightOutNode.getComponent("DDZ_PlayerRightOutPoker");
      this.leftOutNodeComp = this.leftOutNode.getComponent("DDZ_PlayerLeftOutPoker");
      this.selfHandPokerNodeComp = this.selfHandPokerNode.getComponent("DDZ_PlayerSelfPoker");
      this.rightHandPokerNodeComp = this.rightHandPokerNode.getComponent("DDZ_PlayerRightPoker");
      this.leftHandPokerNodeComp = this.leftHandPokerNode.getComponent("DDZ_PlayerLeftPoker");
      this.selfNodeComp = this.selfNode.getComponent("DDZ_PlayerSelfInfo");
      this.rightNodeComp = this.rightNode.getComponent("DDZ_PlayerRightInfo");
      this.leftNodeComp = this.leftNode.getComponent("DDZ_PlayerLeftInfo");
      this.BtnNode = cc.find("DDZ_UIROOT/MainNode/PlayerBtnNode");
    };
    DDZGameManager.LoadScene = function(str) {
      cc.director.loadScene(str);
    };
    DDZGameManager.initDeskByData = function(data) {
      var UIROOT = cc.find("DDZ_UIROOT");
      UIROOT.getChildByName("MainNode").getComponent("DDZ_Main").initDeskUI(data);
    };
    DDZGameManager.initPlayerNode = function(data) {
      this.bindNodeValue();
      if (this.selfID == data.userId) {
        this.selfNodeComp.initSelfPlayerNode(data);
        if (cc.YL.DDZDeskInfo.status <= 2) {
          var UIROOT = cc.find("DDZ_UIROOT");
          UIROOT.getChildByName("MainNode").getComponent("DDZ_Main").initReady(cc.YL.DDZselfPlayerInfo.isReady);
        }
        cc.YL.DDZselfPlayerInfo = data;
        cc.YL.DDZrightPlayerInfo || (cc.YL.DDZrightPlayerInfo = {
          userId: 0
        });
        cc.YL.DDZleftPlayerInfo || (cc.YL.DDZleftPlayerInfo = {
          userId: 0
        });
      } else {
        if (1 == cc.YL.selfIndex) if (2 == data.index) {
          this.rightNodeComp.initRightPlayerNode(data);
          cc.YL.DDZrightPlayerInfo = data;
        } else if (0 == data.index) {
          this.leftNodeComp.initLeftPlayerNode(data);
          cc.YL.DDZleftPlayerInfo = data;
        }
        if (0 == cc.YL.selfIndex) if (1 == data.index) {
          this.rightNodeComp.initRightPlayerNode(data);
          cc.YL.DDZrightPlayerInfo = data;
        } else if (2 == data.index) {
          this.leftNodeComp.initLeftPlayerNode(data);
          cc.YL.DDZleftPlayerInfo = data;
        }
        if (2 == cc.YL.selfIndex) if (0 == data.index) {
          this.rightNodeComp.initRightPlayerNode(data);
          cc.YL.DDZrightPlayerInfo = data;
        } else if (1 == data.index) {
          this.leftNodeComp.initLeftPlayerNode(data);
          cc.YL.DDZleftPlayerInfo = data;
        }
      }
    };
    DDZGameManager.updateReady = function(data) {
      this.bindNodeValue();
      if (this.selfID == data.retMsg.userId) {
        this.selfNodeComp.showAndHideReady(data.isReadyOk);
        this.selfNodeComp.hideOffline();
      }
      if (data.retMsg.userId == cc.YL.DDZrightPlayerInfo.userId) {
        this.rightNodeComp.showAndHideReady(data.isReadyOk);
        this.rightNodeComp.hideOffline();
      }
      if (data.retMsg.userId == cc.YL.DDZleftPlayerInfo.userId) {
        this.leftNodeComp.showAndHideReady(data.isReadyOk);
        this.leftNodeComp.hideOffline();
      }
    };
    DDZGameManager.gameOpen = function(data) {
      var UIROOT = cc.find("DDZ_UIROOT");
      UIROOT.getChildByName("MainNode").getComponent("DDZ_Main").updateRoomInfo(data.currentRound);
      cc.YL.info("当前局数", data.currentRound);
      cc.YL.DDZCurrentRound = data.currentRound;
      this.selfNode.getChildByName("Word").active = false;
      this.rightNode.getChildByName("Word").active = false;
      this.leftNode.getChildByName("Word").active = false;
      this.selfNodeComp.updateOutWord(0);
      this.rightNodeComp.updateOutWord(0);
      this.leftNodeComp.updateOutWord(0);
      this.checkPlayerNode();
    };
    DDZGameManager.handPokerManager = function(data) {
      this.bindNodeValue();
      this.isFaPaiReconnet = data.isReconnect;
      if (true == data.isReconnect) {
        if (this.selfID == data.userId) {
          this.selfHandPokerNodeComp.initHandPoker(data.handPokers);
          for (var i = 0; i < data.paiCount.length; i++) {
            cc.YL.info("渲染玩家手牌数和出的牌", data.paiCount[i].userId);
            data.paiCount[i].userId == this.selfID && this.selfOutNodeComp.initOutPoker(data.paiCount[i].outPais, data.paiCount[i].outType);
            if (data.paiCount[i].userId == cc.YL.DDZrightPlayerInfo.userId) {
              this.rightHandPokerNodeComp.initHandPokerCount(data.paiCount[i].paiCounts);
              this.rightOutNodeComp.initOutPoker(data.paiCount[i].outPais, data.paiCount[i].outType);
            }
            if (data.paiCount[i].userId == cc.YL.DDZleftPlayerInfo.userId) {
              this.leftHandPokerNodeComp.initHandPokerCount(data.paiCount[i].paiCounts);
              this.leftOutNodeComp.initOutPoker(data.paiCount[i].outPais, data.paiCount[i].outType);
            }
          }
          var leftOut = [];
          var rightOut = [];
          var rightType = 0;
          var leftType = 0;
          for (var i = 0; i < data.paiCount.length; i++) {
            if (data.paiCount[i].userId == cc.YL.DDZrightPlayerInfo.userId) {
              rightOut = data.paiCount[i].outPais;
              rightType = data.paiCount[i].outType;
            }
            if (data.paiCount[i].userId == cc.YL.DDZleftPlayerInfo.userId) {
              leftOut = data.paiCount[i].outPais;
              leftType = data.paiCount[i].outType;
            }
          }
          leftOut ? cc.YL.lastOutCardData = {
            outType: leftType,
            length: leftOut.length,
            paiIds: leftOut
          } : rightOut && (cc.YL.lastOutCardData = {
            outType: rightType,
            length: rightOut.length,
            paiIds: rightOut
          });
        }
      } else if (this.selfID == data.userId) {
        this.selfHandPokerNodeComp.initHandPoker(data.handPokers, true);
        var UIROOT = cc.find("DDZ_UIROOT");
        UIROOT.getChildByName("MainNode").getComponent("DDZ_Main").showFaPaiAction();
        setTimeout(function() {
          cc.find("DDZ_UIROOT/MainNode/SelfPlayerPoker/HandPokerTouch").active = true;
          for (var i = 0; i < data.paiCount.length; i++) {
            data.paiCount[i].userId == cc.YL.DDZrightPlayerInfo.userId && this.rightHandPokerNodeComp.initHandPokerCount(data.paiCount[i].paiCounts);
            data.paiCount[i].userId == cc.YL.DDZleftPlayerInfo.userId && this.leftHandPokerNodeComp.initHandPokerCount(data.paiCount[i].paiCounts);
          }
        }.bind(this), 2700);
      }
    };
    DDZGameManager.startJiaoFen = function(data) {
      var time = 10;
      data.retMsg.userId == this.selfID && false == this.isFaPaiReconnet && (time = 2800);
      setTimeout(function() {
        this.isFaPaiReconnet = true;
        cc.YL.DDZGameAction.startJiaoFen(data);
      }.bind(this), time);
    };
    DDZGameManager.updateJiaoFen = function(data) {
      cc.YL.DDZGameAction.updateJiaoFen(data);
    };
    DDZGameManager.startJiaBei = function(data) {
      setTimeout(function() {
        this.isClear = false;
        if (false == this.isClear) {
          this.selfNodeComp.updateOutWord(0);
          this.rightNodeComp.updateOutWord(0);
          this.leftNodeComp.updateOutWord(0);
          this.isClear = true;
        }
        cc.YL.DDZGameAction.endJiaoFen();
        cc.YL.DDZGameAction.startJiaBei(data);
      }.bind(this), 200);
    };
    DDZGameManager.updateJiaBei = function(data) {
      cc.YL.DDZGameAction.updateJiaBei(data);
    };
    DDZGameManager.showDiPai = function(data) {
      if (true == data.isReconnect) {
        cc.YL.loaderID = data.diZhuId;
        this.selfID == data.diZhuId && this.selfNodeComp.showDiZhuIcon(true);
        data.diZhuId == cc.YL.DDZrightPlayerInfo.userId && this.rightNodeComp.showDiZhuIcon(true);
        data.diZhuId == cc.YL.DDZleftPlayerInfo.userId && this.leftNodeComp.showDiZhuIcon(true);
        cc.YL.DDZGameAction.showDiPai(data, true);
      } else {
        this.selfID == data.diZhuId && cc.YL.DDZAnimation.playDizhu(0);
        data.diZhuId == cc.YL.DDZrightPlayerInfo.userId && cc.YL.DDZAnimation.playDizhu(1);
        data.diZhuId == cc.YL.DDZleftPlayerInfo.userId && cc.YL.DDZAnimation.playDizhu(2);
        setTimeout(function() {
          cc.YL.loaderID = data.diZhuId;
          if (this.selfID == data.diZhuId) {
            cc.YL.warn("玩家自己是地主");
            this.selfNodeComp.showDiZhuIcon(true);
            var oldCard = this.selfHandPokerNodeComp.handPokerIDs;
            for (var i = 0; i < data.diPais.length; i++) oldCard.push(data.diPais[i]);
            this.selfHandPokerNodeComp.initHandPoker(oldCard);
          }
          if (data.diZhuId == cc.YL.DDZrightPlayerInfo.userId) {
            cc.YL.warn("右边是地主");
            this.rightNodeComp.showDiZhuIcon(true);
            this.rightHandPokerNodeComp.initHandPokerCount(this.rightHandPokerNodeComp.cardNum + 3);
          }
          if (data.diZhuId == cc.YL.DDZleftPlayerInfo.userId) {
            cc.YL.warn("左边是地主");
            this.leftNodeComp.showDiZhuIcon(true);
            this.leftHandPokerNodeComp.initHandPokerCount(this.leftHandPokerNodeComp.cardNum + 3);
          }
          cc.YL.DDZGameAction.showDiPai(data);
        }.bind(this), 1e3);
        setTimeout(function() {
          this.bindNodeValue();
          this.selfNodeComp.updateOutWord(0);
          this.rightNodeComp.updateOutWord(0);
          this.leftNodeComp.updateOutWord(0);
          cc.YL.DDZGameAction.endJiaoFen();
        }.bind(this), 200);
      }
    };
    DDZGameManager.showPass = function(data) {
      cc.YL.DDZGameAction.showPass(data);
      this.BtnNode.removeAllChildren();
    };
    DDZGameManager.playerOutCard = function(data) {
      this.bindNodeValue();
      var playerIndex = -1;
      if (this.selfID == data.retMsg.userId) {
        this.BtnNode.removeAllChildren();
        for (var j = 0; j < data.paiIds.length; j++) for (var i = 0; i < this.selfHandPokerNodeComp.handPokerIDs.length; i++) if (data.paiIds[j] == this.selfHandPokerNodeComp.handPokerIDs[i]) {
          cc.YL.info("删除自己手牌是：", this.selfHandPokerNodeComp.handPokerIDs[i]);
          this.selfHandPokerNodeComp.handPokerIDs.splice(i, 1);
          break;
        }
        this.selfHandPokerNodeComp.initHandPoker(this.selfHandPokerNodeComp.handPokerIDs);
        this.selfOutNodeComp.initOutPoker(data.paiIds, data.outType);
        cc.YL.DDZPokerTip.startAnalysis();
        if (this.selfHandPokerNodeComp.handPokerIDs.length <= 2 && this.selfHandPokerNodeComp.handPokerIDs.length > 0) {
          cc.YL.DDZAnimation.playWaring(0);
          cc.YL.DDZAudio.playWaring(cc.YL.DDZselfPlayerInfo.userId, this.selfHandPokerNodeComp.handPokerIDs.length);
        }
        playerIndex = 0;
        this.selfNodeComp.hideOffline();
      }
      if (data.retMsg.userId == cc.YL.DDZrightPlayerInfo.userId) {
        this.rightHandPokerNodeComp.initHandPokerCount(data.remainPaiCount);
        this.rightOutNodeComp.initOutPoker(data.paiIds, data.outType);
        if (data.remainPaiCount <= 2 && data.remainPaiCount > 0) {
          cc.YL.DDZAnimation.playWaring(1);
          cc.YL.DDZAudio.playWaring(cc.YL.DDZrightPlayerInfo.userId, data.remainPaiCount);
        }
        playerIndex = 1;
        this.rightNodeComp.hideOffline();
      }
      if (data.retMsg.userId == cc.YL.DDZleftPlayerInfo.userId) {
        this.leftHandPokerNodeComp.initHandPokerCount(data.remainPaiCount);
        this.leftOutNodeComp.initOutPoker(data.paiIds, data.outType);
        if (data.remainPaiCount <= 2 && data.remainPaiCount > 0) {
          cc.YL.DDZAnimation.playWaring(2);
          cc.YL.DDZAudio.playWaring(cc.YL.DDZleftPlayerInfo.userId, data.remainPaiCount);
        }
        playerIndex = 2;
        this.leftNodeComp.hideOffline();
      }
      cc.YL.DDZAnimation.playAnimationByType(playerIndex, data.outType);
    };
    DDZGameManager.overTurn = function(data) {
      cc.YL.DDZGameAction.endJiaoFen();
      cc.YL.DDZGameAction.endJiaBei();
      cc.YL.DDZGameAction.overTurn(data);
    };
    DDZGameManager.showOneGameOver = function(data) {
      setTimeout(function() {
        this.isClear = false;
        this.selfNodeComp.updateOutWord(0);
        this.rightNodeComp.updateOutWord(0);
        this.leftNodeComp.updateOutWord(0);
        this.selfNodeComp.showHeadAnimation(false);
        this.rightNodeComp.showHeadAnimation(false);
        this.leftNodeComp.showHeadAnimation(false);
        var UIROOT = cc.find("DDZ_UIROOT");
        UIROOT.getChildByName("MainNode").getComponent("DDZ_Main").showOneGameOver(data);
      }.bind(this), 700);
    };
    DDZGameManager.showAllGameOver = function(data) {
      cc.YL.info("是否是中途解散", data.isNormalEnd);
      this.isClear = false;
      this.selfNodeComp.showHeadAnimation(false);
      this.rightNodeComp.showHeadAnimation(false);
      this.leftNodeComp.showHeadAnimation(false);
      if (false == data.isNormalEnd) {
        var UIROOT = cc.find("DDZ_UIROOT");
        UIROOT.getChildByName("MainNode").getComponent("DDZ_Main").showAllGameOver(data);
      } else cc.YL.DDZAllGameOverData = data;
    };
    DDZGameManager.playerLeave = function(data) {
      this.bindNodeValue();
      if (this.selfID == data.retMsg.userId) {
        cc.YL.DDZselfPlayerInfo = null;
        cc.YL.DDZrightPlayerInfo = null;
        cc.YL.DDZleftPlayerInfo = null;
        cc.YL.DDZDeskInfo.owner != fun.db.getData("UserInfo").UserId && cc.director.loadScene("hall");
      }
      if (cc.YL.DDZrightPlayerInfo && data.retMsg.userId == cc.YL.DDZrightPlayerInfo.userId) {
        cc.YL.DDZrightPlayerInfo = null;
        this.rightNodeComp.clearNodeUI();
        this.rightNode.active = false;
        this.rightHandPokerNodeComp.cleanHandPokerCount();
        this.rightOutNodeComp.clearOutPoker();
      }
      if (cc.YL.DDZleftPlayerInfo && data.retMsg.userId == cc.YL.DDZleftPlayerInfo.userId) {
        cc.YL.DDZleftPlayerInfo = null;
        this.leftNodeComp.clearNodeUI();
        this.leftNode.active = false;
        this.leftHandPokerNodeComp.cleanHandPokerCount();
        this.leftOutNodeComp.clearOutPoker();
      }
    };
    DDZGameManager.PID_BREAK = function(data) {
      this.bindNodeValue();
      this.selfID == data.retMsg.userId && this.selfNodeComp.showOffline();
      cc.YL.DDZrightPlayerInfo && data.retMsg.userId == cc.YL.DDZrightPlayerInfo.userId && this.rightNodeComp.showOffline();
      cc.YL.DDZleftPlayerInfo && data.retMsg.userId == cc.YL.DDZleftPlayerInfo.userId && this.leftNodeComp.showOffline();
    };
    DDZGameManager.checkPlayerNode = function() {
      if (false == this.selfNode.active || false == this.rightNode.active || false == this.leftNode.active) {
        fun.net.send("PID_LOGINSERVER_REQ", {
          userId: fun.db.getData("UserInfo").UserId
        });
        cc.YL.err("玩家节点显示不完整，断线重连一波");
      }
    };
    module.exports = DDZGameManager;
    cc.YL.DDZGameManager = DDZGameManager;
    cc._RF.pop();
  }, {} ],
  DDZ_JiaBei: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8af9aN4JPtEhItLXiFLaD2+", "DDZ_JiaBei");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {},
      onClickJiaBei: function onClickJiaBei() {
        cc.YL.DDZAudio.playBtnClick();
        fun.net.send("PID_JIABEI_REQ", {
          userId: fun.db.getData("UserInfo").UserId,
          isJiaBei: true
        });
      },
      onClickNoJiaBei: function onClickNoJiaBei() {
        cc.YL.DDZAudio.playBtnClick();
        fun.net.send("PID_JIABEI_REQ", {
          userId: fun.db.getData("UserInfo").UserId,
          isJiaBei: false
        });
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_JiaoFen: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bc007h2mAhJJ4tjCvDUXjfF", "DDZ_JiaoFen");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {},
      initJIaoFenUI: function initJIaoFenUI(data) {
        var list = data.option;
        for (var i = 0; i < list.length; i++) this.node.getChildByName(list[i] + "").active = true;
      },
      onClickNoPoint: function onClickNoPoint() {
        cc.YL.DDZAudio.playBtnClick();
        fun.net.send("PID_JIAOFEN_REQ", {
          userId: fun.db.getData("UserInfo").UserId,
          fen: 0
        });
      },
      onClickOnePoint: function onClickOnePoint() {
        cc.YL.DDZAudio.playBtnClick();
        fun.net.send("PID_JIAOFEN_REQ", {
          userId: fun.db.getData("UserInfo").UserId,
          fen: 1
        });
      },
      onClickTwoPoint: function onClickTwoPoint() {
        cc.YL.DDZAudio.playBtnClick();
        fun.net.send("PID_JIAOFEN_REQ", {
          userId: fun.db.getData("UserInfo").UserId,
          fen: 2
        });
      },
      onClickThreePoint: function onClickThreePoint() {
        cc.YL.DDZAudio.playBtnClick();
        fun.net.send("PID_JIAOFEN_REQ", {
          userId: fun.db.getData("UserInfo").UserId,
          fen: 3
        });
      },
      onClickSixPoint: function onClickSixPoint() {
        cc.YL.DDZAudio.playBtnClick();
        fun.net.send("PID_JIAOFEN_REQ", {
          userId: fun.db.getData("UserInfo").UserId,
          fen: 6
        });
      },
      onClickNinePoint: function onClickNinePoint() {
        cc.YL.DDZAudio.playBtnClick();
        fun.net.send("PID_JIAOFEN_REQ", {
          userId: fun.db.getData("UserInfo").UserId,
          fen: 9
        });
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_LeaveAndDiss: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a029689eSZHtrS5+4sy+c/Q", "DDZ_LeaveAndDiss");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {},
      onClickCancel: function onClickCancel() {
        cc.YL.DDZAudio.playBtnClose();
        this.node.active = false;
        this.node.destroy();
      },
      initUIByStatus: function initUIByStatus() {
        0 == cc.YL.DDZCurrentRound ? cc.YL.DDZDeskInfo.owner == fun.db.getData("UserInfo").UserId ? this.node.getChildByName("back").getChildByName("name").getComponent(cc.Label).string = "是否选择退出房间？因您是房主，离开后房间将会解散" : this.node.getChildByName("back").getChildByName("name").getComponent(cc.Label).string = "是否选择退出房间？" : this.node.getChildByName("back").getChildByName("name").getComponent(cc.Label).string = "需要牌桌上的玩家全票通过后才能退出房间";
      },
      onClickComfire: function onClickComfire() {
        cc.YL.DDZAudio.playBtnClick();
        0 == cc.YL.DDZCurrentRound ? fun.net.send("PID_LEAVEDESK_REQ", {
          userId: fun.db.getData("UserInfo").UserId
        }) : fun.net.send("PID_DISSOLVE_REQ", {
          userId: fun.db.getData("UserInfo").UserId
        });
        this.node.active = false;
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_Main: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a1639t9XUdEAJNZ0mAetgN8", "DDZ_Main");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        playerInfoNode: cc.Prefab,
        oneGameOverNode: cc.Prefab,
        allGameOverNode: cc.Prefab,
        settingPre: cc.Prefab,
        leavePre: cc.Prefab,
        leavePopPre: cc.Prefab,
        chatPre: cc.Prefab,
        popWinPre: cc.Prefab,
        faPaiPre: cc.Prefab
      },
      onLoad: function onLoad() {
        cc.YL.DDZEventManager.init();
        fun.event.add("PhoneNetPhoneStatusDDZ", "PhoneNet", this.onPhoneNetEvent.bind(this));
        fun.event.add("PhoneBatteryPhoneStatusDDZ", "PhoneBattery", this.onPhoneBatteryEvent.bind(this));
        fun.event.add("DDZReconnect", "ReconnectInGame", this.initUI.bind(this));
        require("JSPhoneNetBattery").getNetBatteryStatus();
        cc.YL.info("斗地主初始化");
        this.initUI();
      },
      update: function update() {
        this.mobileInfoNode.getChildByName("Time").getComponent(cc.Label).string = cc.YL.DDZ_Osdate.showTime();
      },
      onDestroy: function onDestroy() {
        cc.YL.DDZEventManager.destroy();
        fun.event.remove("PhoneNetPhoneStatusDDZ");
        fun.event.remove("PhoneBatteryPhoneStatusDDZ");
        fun.event.remove("DDZReconnect");
        fun.db.setData("RoomInfo", {
          GameType: 0
        });
        var userInfo = fun.db.getData("UserInfo");
        userInfo.RoomId = 0;
        fun.db.setData("UserInfo", userInfo);
        cc.YL.DDZAllGameOverData = null;
        cc.YL.DDZDeskInfo = null;
        cc.YL.DDZselfPlayerInfo = null;
        cc.YL.DDZleftPlayerInfo = null;
        cc.YL.DDZrightPlayerInfo = null;
        cc.YL.DDZCurrentRound = null;
        cc.YL.DDZSelfRate = "";
        cc.YL.DeskDiFen = "";
        this.unschedule(this.DDZNetDelayTime);
      },
      initUI: function initUI() {
        cc.YL.info("initUI");
        this.bindNodeValue();
        this.reconnctAndJoinUI();
        this.phoenNetState = null;
        fun.net.send("PID_LOGINSERVER_REQ", {
          userId: fun.db.getData("UserInfo").UserId
        });
        cc.YL.DDZPlayerInfoList = [];
        fun.db.setData("RoomInfo", {
          GameType: 6
        });
        cc.YL.DDZAudio.playBGM();
        fun.event.dispatch("Zhuanquan", false);
        this.startShowDelayTime();
      },
      initDeskUI: function initDeskUI(data) {
        this.initRoomInfo(data);
        this.initDiFen(data.diFen);
        this.initRate(cc.YL.DDZSelfRate);
        this.initRuleInfo();
      },
      initRuleInfo: function initRuleInfo() {
        var payTypeArr = [ "", "平均支付", "冠军支付", "房主支付" ];
        var ruleList = [ payTypeArr[cc.YL.DDZDeskInfo.roomInfo.payMode], "封顶:" + cc.YL.DDZDeskInfo.roomInfo.boomLimit ];
        cc.YL.DDZDeskInfo.roomInfo.canSanDaiDui ? ruleList.push("可三带一对") : null;
        cc.YL.DDZDeskInfo.roomInfo.canSiDaiDui ? ruleList.push("可四带两对") : null;
        cc.YL.DDZDeskInfo.roomInfo.canDouble ? ruleList.push("可加倍") : null;
        for (var i = 0; i < ruleList.length; i++) {
          var num = parseInt(i + 1);
          this.ruleInfoNode.getChildByName("R" + num).getComponent(cc.Label).string = ruleList[i].toString();
        }
      },
      reconnctAndJoinUI: function reconnctAndJoinUI() {
        this.clearRate();
        this.clearDiFen();
        this.clearRoomInfo();
        this.clearAnimationNode();
        cc.YL.DDZGameAction.removeDiPai();
        this.selfHandPokerNodeComp.clearHandPoker();
        this.rightHandPokerNodeComp.cleanHandPokerCount();
        this.leftHandPokerNodeComp.cleanHandPokerCount();
        this.selfOutNodeComp.clearOutPoker();
        this.rightOutNodeComp.clearOutPoker();
        this.leftOutNodeComp.clearOutPoker();
        this.selfNodeComp.clearNodeUI();
        this.rightNodeComp.clearNodeUI();
        this.leftNodeComp.clearNodeUI();
        this.BtnNode.removeAllChildren();
        this.selfNodeComp.clearRate();
        this.selfNodeComp.showDiZhuIcon(false);
        this.rightNodeComp.clearRate();
        this.rightNodeComp.showDiZhuIcon(false);
        this.leftNodeComp.clearRate();
        this.leftNodeComp.showDiZhuIcon(false);
        this.node.getChildByName("ChatRoot").removeAllChildren();
      },
      GameOverUI: function GameOverUI() {
        this.selfHandPokerNodeComp.clearHandPoker();
        this.rightHandPokerNodeComp.cleanHandPokerCount();
        this.leftHandPokerNodeComp.cleanHandPokerCount();
        this.selfOutNodeComp.clearOutPoker();
        this.rightOutNodeComp.clearOutPoker();
        this.leftOutNodeComp.clearOutPoker();
        this.selfNodeComp.clearRate();
        this.selfNodeComp.showDiZhuIcon(false);
        this.rightNodeComp.clearRate();
        this.rightNodeComp.showDiZhuIcon(false);
        this.leftNodeComp.clearRate();
        this.leftNodeComp.showDiZhuIcon(false);
        this.BtnNode.removeAllChildren();
        this.clearRate();
        this.clearAnimationNode();
        cc.YL.DDZGameAction.removeDiPai();
        this.initDiFen(cc.YL.DDZDeskInfo.diFen);
        this.node.getChildByName("ChatRoot").removeAllChildren();
      },
      initRoomInfo: function initRoomInfo(data) {
        var roomInfo = cc.find("DDZ_UIROOT/MainNode/BtnNode/RoomInfo/RoomNum");
        roomInfo.getComponent(cc.Label).string = "房号: " + data.password + "  局数: " + data.currentRound + "/" + data.roomInfo.RoundLimit;
        cc.YL.DDZCurrentRound = data.currentRound;
        cc.YL.loaderID = data.diZhu;
      },
      updateRoomInfo: function updateRoomInfo(juShu) {
        var roomInfo = cc.find("DDZ_UIROOT/MainNode/BtnNode/RoomInfo/RoomNum");
        roomInfo.getComponent(cc.Label).string = "房号: " + cc.YL.DDZDeskInfo.password + "  局数: " + juShu + "/" + cc.YL.DDZDeskInfo.roomInfo.RoundLimit;
      },
      clearRoomInfo: function clearRoomInfo() {
        var roomInfo = cc.find("DDZ_UIROOT/MainNode/BtnNode/RoomInfo/RoomNum");
        roomInfo.getComponent(cc.Label).string = "";
      },
      onPhoneNetEvent: function onPhoneNetEvent(msg) {
        cc.YL.log("斗地主onPhoneNetEvent>>>>msg.status", msg.status);
        this.phoenNetState = msg.status;
        this.DDZNetDelayTime();
      },
      startShowDelayTime: function startShowDelayTime() {
        this.DDZNetDelayTime();
        this.schedule(this.DDZNetDelayTime, 10);
      },
      DDZNetDelayTime: function DDZNetDelayTime() {
        if (null == this.phoenNetState) return;
        this.mobileInfoNode = cc.find("DDZ_UIROOT/MainNode/BtnNode/MobileInfo");
        var time = fun.db.getData("NetDelayTime");
        this.mobileInfoNode.getChildByName("DelayTime").getComponent(cc.Label).string = time + "ms";
        var state = fun.utils.getNetDelayTime(time);
        for (var i = 0; i < this.mobileInfoNode.getChildByName("Wifi").children.length; i++) {
          this.mobileInfoNode.getChildByName("Wifi").children[i].color = new cc.Color(state.rgb);
          this.mobileInfoNode.getChildByName("Wifi").children[i].active = false;
        }
        for (var i = 0; i < this.mobileInfoNode.getChildByName("Net").children.length; i++) {
          this.mobileInfoNode.getChildByName("Net").children[i].color = new cc.Color(state.rgb);
          this.mobileInfoNode.getChildByName("Net").children[i].active = false;
        }
        if (5 == this.phoenNetState) {
          this.mobileInfoNode.getChildByName("Wifi").getChildByName("Wifi" + state.idx).active = true;
          cc.YL.log("开启的节点name", this.mobileInfoNode.getChildByName("Wifi").getChildByName("Wifi" + state.idx).name);
        } else {
          this.mobileInfoNode.getChildByName("Net").getChildByName("Net" + state.idx).active = true;
          cc.YL.log("开启的节点name", this.mobileInfoNode.getChildByName("Net").getChildByName("Net" + state.idx).name);
        }
        cc.YL.log("斗地主DDZNetDelayTime>>>>state.idx", state.idx);
      },
      onPhoneBatteryEvent: function onPhoneBatteryEvent(msg) {
        this.mobileInfoNode = cc.find("DDZ_UIROOT/MainNode/BtnNode/MobileInfo");
        cc.YL.log("斗地主onPhoneBatteryEvent>>>>msg.status", msg.status);
        msg.status >= 2 ? this.mobileInfoNode.getChildByName("Battery").getChildByName("isCharge").active = true : this.mobileInfoNode.getChildByName("Battery").getChildByName("isCharge").active = false;
        this.mobileInfoNode.getChildByName("Battery").getChildByName("BatteryIn").width = msg.level / 100 * 39;
      },
      initReady: function initReady(isReady) {
        if (true == isReady) {
          cc.YL.info("玩家已经准备");
          this.selfNodeComp.showAndHideReady(isReady);
        } else {
          this.BtnNode.removeAllChildren();
          var readyPre = this.BtnNode.getComponent("DDZ_PlayerBtn").ready;
          var readyNode = this.BtnNode.getChildByName("DDZ_Ready") ? this.BtnNode.getChildByName("DDZ_Ready") : cc.instantiate(readyPre);
          this.BtnNode.getChildByName("DDZ_Ready") ? this.BtnNode.getChildByName("DDZ_Ready").active = true : this.BtnNode.addChild(readyNode);
        }
      },
      initDiFen: function initDiFen(data) {
        var node = cc.find("DDZ_UIROOT/MainNode/BtnNode/GameInfo/Difen/Num");
        node.getComponent(cc.Label).string = data + "";
      },
      clearDiFen: function clearDiFen() {
        var node = cc.find("DDZ_UIROOT/MainNode/BtnNode/GameInfo/Difen/Num");
        node.getComponent(cc.Label).string = "";
      },
      initRate: function initRate(rate) {
        if (rate) {
          var node = cc.find("DDZ_UIROOT/MainNode/BtnNode/GameInfo/Beishu/Num");
          node.getComponent(cc.Label).string = rate + "";
        }
      },
      clearRate: function clearRate() {
        var node = cc.find("DDZ_UIROOT/MainNode/BtnNode/GameInfo/Beishu/Num");
        node.getComponent(cc.Label).string = "1";
      },
      initPlayerInfoNode: function initPlayerInfoNode(info, index) {
        var playerInfoNode = this.chatNode.getChildByName("DDZ_playerinfoNode") ? this.chatNode.getChildByName("DDZ_playerinfoNode") : cc.instantiate(this.playerInfoNode);
        this.chatNode.getChildByName("DDZ_playerinfoNode") ? this.chatNode.getChildByName("DDZ_playerinfoNode").active = true : this.chatNode.addChild(playerInfoNode);
        playerInfoNode.getComponent("DDZ_PlayerInfoNode").initNode(info, index);
      },
      showAllGameOver: function showAllGameOver(data) {
        this.GameOverUI();
        var allGameOverNode = this.node.getChildByName("DDZ_AllGameOver") ? this.node.getChildByName("DDZ_AllGameOver") : cc.instantiate(this.allGameOverNode);
        this.node.getChildByName("DDZ_AllGameOver") ? this.node.getChildByName("DDZ_AllGameOver").active = true : this.node.addChild(allGameOverNode, 400);
        allGameOverNode.getComponent("DDZ_AllGameOver").initAllGameOverNode(data);
      },
      showOneGameOver: function showOneGameOver(data) {
        this.GameOverUI();
        var oneGameOverNode = this.node.getChildByName("DDZ_OneGameOver") ? this.node.getChildByName("DDZ_OneGameOver") : cc.instantiate(this.oneGameOverNode);
        this.node.getChildByName("DDZ_OneGameOver") ? this.node.getChildByName("DDZ_OneGameOver").active = true : this.node.addChild(oneGameOverNode, 100);
        oneGameOverNode.getComponent("DDZ_OneGameOver").initNodeForSimple(data);
      },
      showDissUI: function showDissUI(data) {
        var DissNode = this.node.getChildByName("DDZ_votingPop") ? this.node.getChildByName("DDZ_votingPop") : cc.instantiate(this.leavePopPre);
        this.node.getChildByName("DDZ_votingPop") ? this.node.getChildByName("DDZ_votingPop").active = true : this.node.addChild(DissNode);
        DissNode.getComponent("DDZ_Disslove").initUI(data);
      },
      showDissResult: function showDissResult(str) {
        this.showPopWin(str, 2);
      },
      showPopWin: function showPopWin(str, type) {
        if (this.node.getChildByName("DDZ_votingPop")) {
          this.node.getChildByName("DDZ_votingPop").active = false;
          this.node.getChildByName("DDZ_votingPop").destroy();
        }
        var popNode = this.node.getChildByName("DDZ_popWin") ? this.node.getChildByName("DDZ_popWin") : cc.instantiate(this.popWinPre);
        this.node.getChildByName("DDZ_popWin") ? this.node.getChildByName("DDZ_popWin").active = true : this.node.addChild(popNode);
        popNode.getComponent("DDZ_PopWin").initPopStr(str, type);
      },
      showTipStr: function showTipStr(str) {
        this.node.getChildByName("TipNode").getComponent(cc.Label).string = str;
        setTimeout(function() {
          this.node.getChildByName("TipNode").getComponent(cc.Label).string = "";
        }.bind(this), 500);
      },
      clearAnimationNode: function clearAnimationNode() {
        cc.find("DDZ_UIROOT/MainNode/AnimationRoot").removeAllChildren();
      },
      showFaPaiAction: function showFaPaiAction() {
        var actionNode = this.node.getChildByName("DDZ_FaPaiNode") ? this.node.getChildByName("DDZ_FaPaiNode") : cc.instantiate(this.faPaiPre);
        this.node.getChildByName("DDZ_FaPaiNode") ? this.node.getChildByName("DDZ_FaPaiNode").active = true : this.node.addChild(actionNode);
        actionNode.getComponent("DDZ_FaiPaiAction").startFaPai();
      },
      bindNodeValue: function bindNodeValue() {
        this.selfID = fun.db.getData("UserInfo").UserId;
        this.selfNode = cc.find("DDZ_UIROOT/MainNode/SelfPlayerInfo");
        this.rightNode = cc.find("DDZ_UIROOT/MainNode/RightPlayerInfo");
        this.leftNode = cc.find("DDZ_UIROOT/MainNode/LeftPlayerInfo");
        this.selfActiveNode = cc.find("DDZ_UIROOT/MainNode/SelfPlayerPoker");
        this.rightActiveNode = cc.find("DDZ_UIROOT/MainNode/RightPlayerPoker");
        this.leftActiveNode = cc.find("DDZ_UIROOT/MainNode/LeftPlayerPoker");
        this.selfHandPokerNode = this.selfActiveNode.getChildByName("HandPoker");
        this.rightHandPokerNode = this.rightActiveNode.getChildByName("HandPoker");
        this.leftHandPokerNode = this.leftActiveNode.getChildByName("HandPoker");
        this.selfOutNode = this.selfActiveNode.getChildByName("OutPoker");
        this.rightOutNode = this.rightActiveNode.getChildByName("OutPoker");
        this.leftOutNode = this.leftActiveNode.getChildByName("OutPoker");
        this.selfOutNodeComp = this.selfOutNode.getComponent("DDZ_PlayerSelfOutPoker");
        this.rightOutNodeComp = this.rightOutNode.getComponent("DDZ_PlayerRightOutPoker");
        this.leftOutNodeComp = this.leftOutNode.getComponent("DDZ_PlayerLeftOutPoker");
        this.selfHandPokerNodeComp = this.selfHandPokerNode.getComponent("DDZ_PlayerSelfPoker");
        this.rightHandPokerNodeComp = this.rightHandPokerNode.getComponent("DDZ_PlayerRightPoker");
        this.leftHandPokerNodeComp = this.leftHandPokerNode.getComponent("DDZ_PlayerLeftPoker");
        this.selfNodeComp = this.selfNode.getComponent("DDZ_PlayerSelfInfo");
        this.rightNodeComp = this.rightNode.getComponent("DDZ_PlayerRightInfo");
        this.leftNodeComp = this.leftNode.getComponent("DDZ_PlayerLeftInfo");
        this.BtnNode = cc.find("DDZ_UIROOT/MainNode/PlayerBtnNode");
        this.ruleInfoNode = cc.find("DDZ_UIROOT/MainNode/RuleInfo/BG");
        this.chatNode = cc.find("DDZ_UIROOT/MainNode/ChatRoot");
        this.mobileInfoNode = cc.find("DDZ_UIROOT/MainNode/BtnNode/MobileInfo");
      },
      onClickSetting: function onClickSetting() {
        cc.YL.log("设置按钮");
        cc.YL.DDZAudio.playBtnClick();
        var settingNode = this.node.getChildByName("set") ? this.node.getChildByName("set") : cc.instantiate(this.settingPre);
        this.node.getChildByName("set") ? this.node.getChildByName("set").active = true : this.node.addChild(settingNode);
      },
      onClickMessage: function onClickMessage() {
        cc.YL.log("消息按钮");
        cc.YL.DDZAudio.playBtnClick();
        var messageNode = this.node.getChildByName("chat") ? this.node.getChildByName("chat") : cc.instantiate(this.chatPre);
        this.node.getChildByName("chat") ? this.node.getChildByName("chat").active = true : this.node.addChild(messageNode);
      },
      onClickLeave: function onClickLeave() {
        cc.YL.log("离开按钮");
        cc.YL.DDZAudio.playBtnClick();
        var leaveNode = this.node.getChildByName("DDZ_voting") ? this.node.getChildByName("DDZ_voting") : cc.instantiate(this.leavePre);
        this.node.getChildByName("DDZ_voting") ? this.node.getChildByName("DDZ_voting").active = true : this.node.addChild(leaveNode);
        leaveNode.getComponent("DDZ_LeaveAndDiss").initUIByStatus();
      },
      onClickRule: function onClickRule(event) {
        cc.YL.log("规则按钮");
        cc.YL.DDZAudio.playBtnClick();
        this.ruleInfoNode.parent.stopAllActions();
        this.ruleInfoNode.parent.setPosition(-1334, 0);
        this.ruleInfoNode.parent.runAction(cc.moveTo(.1, cc.p(0, 0)));
        event.target.active = false;
      },
      onClickCloseRule: function onClickCloseRule() {
        cc.YL.DDZAudio.playBtnClick();
        cc.find("DDZ_UIROOT/MainNode/BtnNode/Rule").active = true;
        this.ruleInfoNode.parent.stopAllActions();
        this.ruleInfoNode.parent.setPosition(0, 0);
        this.ruleInfoNode.parent.runAction(cc.moveTo(.1, cc.p(-1334, 0)));
      }
    });
    cc._RF.pop();
  }, {
    JSPhoneNetBattery: "JSPhoneNetBattery"
  } ],
  DDZ_MsgConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e478fshgfpD45AiU8DM0ovN", "DDZ_MsgConfig");
    "use strict";
    var DDZ_MsgConfig = {
      PID_HEARTBEAT: {
        id: "PID_HEARTBEAT",
        desc: "心跳消息",
        req: 0,
        rsp: 0,
        notify: 0
      },
      PID_CREATEROOM_REQ: {
        id: "PID_CREATEROOM_REQ",
        desc: "客户端->服务端　请求创建房间",
        req: 109,
        rsp: 0,
        notify: 109
      },
      PID_CREATEROOM_ACK: {
        id: "PID_CREATEROOM_ACK",
        desc: "服务端->客户端　请求创建房间ack",
        req: 209,
        rsp: 0,
        notify: 209
      },
      PID_ENTERROOM_REQ: {
        id: "PID_ENTERROOM_REQ",
        desc: "客户端->服务端　请求进入房间",
        req: 110,
        rsp: 0,
        notify: 110
      },
      PID_ENTERROOM_ACK: {
        id: "PID_ENTERROOM_ACK",
        desc: "服务端->客户端　请求进入房间ack",
        req: 210,
        rsp: 0,
        notify: 210
      },
      PID_DESKINFO: {
        id: "PID_DESKINFO",
        desc: "服务端->客户端　deskinfo",
        req: 605,
        rsp: 0,
        notify: 605
      },
      PID_PLAYERINFO: {
        id: "PID_PLAYERINFO",
        desc: "服务端->客户端　playerinfo",
        req: 606,
        rsp: 0,
        notify: 606
      },
      PID_READY_REQ: {
        id: "PID_READY_REQ",
        desc: "客户端->服务端　ready req",
        req: 607,
        rsp: 0,
        notify: 607
      },
      PID_READY_ACK: {
        id: "PID_READY_ACK",
        desc: "服务端->客户端  ready ack",
        req: 608,
        rsp: 0,
        notify: 608
      },
      PID_OPENING: {
        id: "PID_OPENING",
        desc: "服务端->客户端  开局",
        req: 609,
        rsp: 0,
        notify: 609
      },
      PID_HANDPOKER_INFO: {
        id: "PID_HANDPOKER_INFO",
        desc: "服务端->客户端　手牌信息",
        req: 610,
        rsp: 0,
        notify: 610
      },
      PID_JIAOFEN: {
        id: "PID_JIAOFEN",
        desc: "服务端->客户端　开始叫分",
        req: 611,
        rsp: 0,
        notify: 611
      },
      PID_JIAOFEN_REQ: {
        id: "PID_JIAOFEN_REQ",
        desc: "客户端->服务端　叫分请求",
        req: 612,
        rsp: 0,
        notify: 612
      },
      PID_JIAOFEN_ACK: {
        id: "PID_JIAOFEN_ACK",
        desc: "服务端->客户端　叫分请求ack",
        req: 613,
        rsp: 0,
        notify: 613
      },
      PID_JIABEI: {
        id: "PID_JIABEI",
        desc: "服务端->客户端　　开始加倍",
        req: 614,
        rsp: 0,
        notify: 614
      },
      PID_JIABEI_REQ: {
        id: "PID_JIABEI_REQ",
        desc: "客户端->服务端　加倍req",
        req: 615,
        rsp: 0,
        notify: 615
      },
      PID_JIABEI_ACK: {
        id: "PID_JIABEI_ACK",
        desc: "服务端->客户端　　加倍ack",
        req: 616,
        rsp: 0,
        notify: 616
      },
      PID_SEND_DIPAI: {
        id: "PID_SEND_DIPAI",
        desc: "服务端->客户端　底牌",
        req: 617,
        rsp: 0,
        notify: 617
      },
      PID_OUTCARD_REQ: {
        id: "PID_OUTCARD_REQ",
        desc: "客户端->服务端　出牌请求",
        req: 618,
        rsp: 0,
        notify: 618
      },
      PID_OUTCARD_ACK: {
        id: "PID_OUTCARD_ACK",
        desc: "服务端->客户端  出牌ack",
        req: 619,
        rsp: 0,
        notify: 619
      },
      PID_OVERTURN: {
        id: "PID_OVERTURN",
        desc: "服务端→客户端 overturn操作协议",
        req: 620,
        rsp: 0,
        notify: 620
      },
      PID_PASS_REQ: {
        id: "PID_PASS_REQ",
        desc: "客户端->服务端 过req",
        req: 621,
        rsp: 0,
        notify: 621
      },
      PID_PASS_ACK: {
        id: "PID_PASS_ACK",
        desc: "服务端→客户端 过ack",
        req: 622,
        rsp: 0,
        notify: 622
      },
      PID_ROUNDRESULT: {
        id: "PID_ROUNDRESULT",
        desc: "服务端→客户端 单局结算",
        req: 623,
        rsp: 0,
        notify: 623
      },
      PID_LOTTERY: {
        id: "PID_LOTTERY",
        desc: "服务端→客户端 全局结算",
        req: 624,
        rsp: 0,
        notify: 624
      },
      PID_DISSOLVE_REQ: {
        id: "PID_DISSOLVE_REQ",
        desc: "客户端->服务端 PID_DISSOLVE_REQ",
        req: 625,
        rsp: 0,
        notify: 625
      },
      PID_DISSOLVE_BRO: {
        id: "PID_DISSOLVE_BRO",
        desc: "服务端→客户端 PID_DISSOLVE_BRO",
        req: 626,
        rsp: 0,
        notify: 626
      },
      PID_DISSOLVE_REPLY: {
        id: "PID_DISSOLVE_REPLY",
        desc: "客户端->服务端 PID_DISSOLVE_REPLY",
        req: 627,
        rsp: 0,
        notify: 627
      },
      PID_DISSOLVE_DESK: {
        id: "PID_DISSOLVE_DESK",
        desc: "服务端→客户端 PID_DISSOLVE_DESK",
        req: 628,
        rsp: 0,
        notify: 628
      },
      PID_LOGINSERVER_REQ: {
        id: "PID_LOGINSERVER_REQ",
        desc: "服务端->客户端　PID_LOGINSERVER_REQ",
        req: 629,
        rsp: 0,
        notify: 629
      },
      PID_LOGINSERVER_ACK: {
        id: "PID_LOGINSERVER_ACK",
        desc: "服务端->客户端　PID_LOGINSERVER_ACK",
        req: 630,
        rsp: 0,
        notify: 630
      },
      PID_LEAVEDESK_REQ: {
        id: "PID_LEAVEDESK_REQ",
        desc: "服务端→客户端 PID_LEAVEDESK_REQ",
        req: 631,
        rsp: 0,
        notify: 631
      },
      PID_LEAVEDESK_ACK: {
        id: "PID_LEAVEDESK_ACK",
        desc: "服务端->客户端　PID_LEAVEDESK_ACK",
        req: 632,
        rsp: 0,
        notify: 632
      },
      PID_CHATNOTIFY: {
        id: "PID_CHATNOTIFY",
        desc: "服务端->客户端　PID_CHATNOTIFY",
        req: 308,
        rsp: 0,
        notify: 308
      },
      PID_BREAK: {
        id: "PID_BREAK",
        desc: "服务端->客户端　PID_BREAK",
        req: 635,
        rsp: 0,
        notify: 635
      }
    };
    module.exports = DDZ_MsgConfig;
    cc._RF.pop();
  }, {} ],
  DDZ_NetEventManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "df2felwqR1EUbxsOeg+oBHP", "DDZ_NetEventManager");
    "use strict";
    var DDZ_EventManager = cc.Class({});
    DDZ_EventManager.init = function() {
      fun.net.setGameMsgCfg(require("DDZ_MsgConfig"));
      fun.net.listen("PID_HEARTBEAT", this.PID_HEARTBEAT.bind(this));
      fun.net.listen("PID_CREATEROOM_ACK", this.PID_CREATEROOM_ACK.bind(this));
      fun.net.listen("PID_ENTERROOM_ACK", this.PID_ENTERROOM_ACK.bind(this));
      fun.net.listen("PID_DESKINFO", this.PID_DESKINFO.bind(this));
      fun.net.listen("PID_PLAYERINFO", this.PID_PLAYERINFO.bind(this));
      fun.net.listen("PID_READY_ACK", this.PID_READY_ACK.bind(this));
      fun.net.listen("PID_OPENING", this.PID_OPENING.bind(this));
      fun.net.listen("PID_HANDPOKER_INFO", this.PID_HANDPOKER_INFO.bind(this));
      fun.net.listen("PID_JIAOFEN", this.PID_JIAOFEN.bind(this));
      fun.net.listen("PID_JIAOFEN_ACK", this.PID_JIAOFEN_ACK.bind(this));
      fun.net.listen("PID_JIABEI", this.PID_JIABEI.bind(this));
      fun.net.listen("PID_JIABEI_ACK", this.PID_JIABEI_ACK.bind(this));
      fun.net.listen("PID_SEND_DIPAI", this.PID_SEND_DIPAI.bind(this));
      fun.net.listen("PID_OUTCARD_ACK", this.PID_OUTCARD_ACK.bind(this));
      fun.net.listen("PID_OVERTURN", this.PID_OVERTURN.bind(this));
      fun.net.listen("PID_PASS_ACK", this.PID_PASS_ACK.bind(this));
      fun.net.listen("PID_ROUNDRESULT", this.PID_ROUNDRESULT.bind(this));
      fun.net.listen("PID_LOTTERY", this.PID_LOTTERY.bind(this));
      fun.net.listen("PID_SENDMSG_ACK", this.PID_SENDMSG_ACK.bind(this));
      fun.net.listen("PID_CHATNOTIFY", this.PID_CHATNOTIFY.bind(this));
      fun.net.listen("PID_LOGINSERVER_ACK", this.PID_LOGINSERVER_ACK.bind(this));
      fun.net.listen("PID_DISSOLVE_BRO", this.PID_DISSOLVE_BRO.bind(this));
      fun.net.listen("PID_DISSOLVE_DESK", this.PID_DISSOLVE_DESK.bind(this));
      fun.net.listen("PID_LEAVEDESK_ACK", this.PID_LEAVEDESK_ACK.bind(this));
      fun.net.listen("PID_BREAK", this.PID_BREAK.bind(this));
    };
    DDZ_EventManager.destroy = function() {
      fun.net.rmListen("PID_HEARTBEAT");
      fun.net.rmListen("PID_CREATEROOM_ACK");
      fun.net.rmListen("PID_ENTERROOM_ACK");
      fun.net.rmListen("PID_DESKINFO");
      fun.net.rmListen("PID_PLAYERINFO");
      fun.net.rmListen("PID_READY_ACK");
      fun.net.rmListen("PID_OPENING");
      fun.net.rmListen("PID_HANDPOKER_INFO");
      fun.net.rmListen("PID_JIAOFEN");
      fun.net.rmListen("PID_JIAOFEN_ACK");
      fun.net.rmListen("PID_JIABEI");
      fun.net.rmListen("PID_JIABEI_ACK");
      fun.net.rmListen("PID_SEND_DIPAI");
      fun.net.rmListen("PID_OUTCARD_ACK");
      fun.net.rmListen("PID_OVERTURN");
      fun.net.rmListen("PID_PASS_ACK");
      fun.net.rmListen("PID_ROUNDRESULT");
      fun.net.rmListen("PID_LOTTERY");
      fun.net.rmListen("PID_SENDMSG_ACK");
      fun.net.rmListen("PID_CHATNOTIFY");
      fun.net.rmListen("PID_LOGINSERVER_ACK");
      fun.net.rmListen("PID_DISSOLVE_BRO");
      fun.net.rmListen("PID_DISSOLVE_DESK");
      fun.net.rmListen("PID_LEAVEDESK_ACK");
      fun.net.rmListen("PID_BREAK");
    };
    DDZ_EventManager.PID_LOGINSERVER_ACK = function(msg) {
      if (false == msg.isOk) {
        cc.YL.err("登录失败");
        var UIROOT = cc.find("DDZ_UIROOT");
        -165 == msg.retMsg.code ? UIROOT.getChildByName("MainNode").getComponent("DDZ_Main").showDissResult("登录失败,房卡不足") : UIROOT.getChildByName("MainNode").getComponent("DDZ_Main").showDissResult("登录失败");
      }
    }, DDZ_EventManager.PID_HEARTBEAT = function(msg) {};
    DDZ_EventManager.PID_CREATEROOM_ACK = function(msg) {
      msg.retMsg < 0 ? cc.YL.err("msg.retMsg", msg.retMsg) : cc.YL.log("创建房间成功");
    };
    DDZ_EventManager.PID_ENTERROOM_ACK = function(msg) {
      msg.retMsg < 0 && cc.YL.err("msg.retMsg", msg.retMsg);
    };
    DDZ_EventManager.PID_DESKINFO = function(msg) {
      cc.YL.DDZDeskInfo = msg;
      cc.YL.DDZGameManager.initDeskByData(msg);
    };
    DDZ_EventManager.PID_PLAYERINFO = function(msg) {
      if (msg.userId == fun.db.getData("UserInfo").UserId) {
        cc.YL.DDZselfPlayerInfo = msg;
        cc.YL.selfIndex = msg.index;
        cc.YL.DDZGameManager.initPlayerNode(msg);
        for (var i = 0; i < cc.YL.DDZPlayerInfoList.length; i++) cc.YL.DDZGameManager.initPlayerNode(cc.YL.DDZPlayerInfoList[i]);
      } else 0 == cc.YL.selfIndex || 1 == cc.YL.selfIndex || 2 == cc.YL.selfIndex ? cc.YL.DDZGameManager.initPlayerNode(msg) : cc.YL.DDZPlayerInfoList.push(msg);
    };
    DDZ_EventManager.PID_READY_ACK = function(msg) {
      msg.retMsg < 0 ? cc.YL.err("msg.retMsg", msg.retMsg) : cc.YL.DDZGameManager.updateReady(msg);
    };
    DDZ_EventManager.PID_OPENING = function(msg) {
      cc.YL.DDZGameManager.gameOpen(msg);
    };
    DDZ_EventManager.PID_HANDPOKER_INFO = function(msg) {
      cc.YL.DDZGameManager.handPokerManager(msg);
    };
    DDZ_EventManager.PID_JIAOFEN = function(msg) {
      cc.YL.DDZGameManager.startJiaoFen(msg);
      cc.YL.DDZDeskInfo.status = 4;
    };
    DDZ_EventManager.PID_JIAOFEN_ACK = function(msg) {
      if (msg.retMsg < 0) cc.YL.err("msg.retMsg", msg.retMsg); else {
        cc.YL.DDZGameManager.updateJiaoFen(msg);
        cc.YL.DDZAudio.playSpecialEffect(msg.retMsg.userId, "jiaofen_" + msg.fen);
        var UIROOT = cc.find("DDZ_UIROOT");
        0 != msg.fen && UIROOT.getChildByName("MainNode").getComponent("DDZ_Main").initDiFen(msg.fen);
      }
    };
    DDZ_EventManager.PID_JIABEI = function(msg) {
      cc.YL.DDZGameManager.startJiaBei(msg);
      cc.YL.DDZDeskInfo.status = 5;
    };
    DDZ_EventManager.PID_JIABEI_ACK = function(msg) {
      if (msg.retMsg < 0) cc.YL.err("msg.retMsg", msg.retMsg); else {
        cc.YL.DDZGameManager.updateJiaBei(msg);
        cc.YL.DDZAudio.playSpecialEffect(msg.retMsg.userId, true == msg.jiaBeiResult ? "jiabei" : "bujiabei");
      }
    };
    DDZ_EventManager.PID_SEND_DIPAI = function(msg) {
      cc.YL.DDZGameManager.showDiPai(msg);
    };
    DDZ_EventManager.PID_OUTCARD_ACK = function(msg) {
      if (false == msg.isOk) {
        cc.YL.err("msg.isOk false 出牌失败");
        cc.YL.DDZGameAction.outCardFail();
      } else {
        cc.YL.lastOutCardData = msg;
        cc.YL.DDZGameManager.playerOutCard(msg);
        cc.YL.DDZAudio.playerOutSound(msg);
      }
    };
    DDZ_EventManager.PID_OVERTURN = function(msg) {
      cc.YL.DDZPokerTip.analysis();
      cc.YL.DDZGameManager.overTurn(msg);
      cc.YL.DDZDeskInfo.status = 6;
    };
    DDZ_EventManager.PID_PASS_ACK = function(msg) {
      if (msg.isOk < 0) cc.YL.err("msg.isOk", msg.isOk); else {
        cc.YL.DDZGameManager.showPass(msg);
        cc.YL.DDZAudio.playPass(msg.retMsg.userId);
      }
    };
    DDZ_EventManager.PID_ROUNDRESULT = function(msg) {
      cc.YL.DDZGameManager.showOneGameOver(msg);
      cc.YL.DDZDeskInfo.status = 7;
    };
    DDZ_EventManager.PID_LOTTERY = function(msg) {
      cc.YL.DDZGameManager.showAllGameOver(msg);
      cc.YL.DDZDeskInfo.status = 8;
    };
    DDZ_EventManager.PID_SENDMSG_ACK = function(msg) {};
    DDZ_EventManager.PID_CHATNOTIFY = function(msg) {};
    DDZ_EventManager.PID_DISSOLVE_BRO = function(msg) {
      cc.YL.DDZGameAction.showDissUI(msg);
    };
    DDZ_EventManager.PID_DISSOLVE_DESK = function(msg) {
      cc.YL.DDZGameAction.showDissResult(msg);
    };
    DDZ_EventManager.PID_LEAVEDESK_ACK = function(msg) {
      false == msg.isOk || cc.YL.DDZGameManager.playerLeave(msg);
    };
    DDZ_EventManager.PID_BREAK = function(msg) {
      cc.YL.DDZGameManager.PID_BREAK(msg);
    };
    module.exports = DDZ_EventManager;
    cc.YL.DDZEventManager = DDZ_EventManager;
    cc._RF.pop();
  }, {
    DDZ_MsgConfig: "DDZ_MsgConfig"
  } ],
  DDZ_OSDate: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3190e6zwq5L0pP8vTFwZUIs", "DDZ_OSDate");
    "use strict";
    var OSDate = cc.Class({});
    OSDate.LocalTimeString = function() {
      var date = new Date();
      var seperator1 = "-";
      var seperator2 = ":";
      var month = date.getMonth() + 1;
      var strDate = date.getDate();
      var hour = date.getHours();
      var second = date.getSeconds();
      var min = date.getMinutes();
      month >= 1 && month <= 9 && (month = "0" + month);
      strDate >= 0 && strDate <= 9 && (strDate = "0" + strDate);
      hour >= 0 && hour <= 9 && (hour = "0" + hour);
      min >= 0 && min <= 9 && (min = "0" + min);
      second >= 0 && second <= 9 && (second = "0" + second);
      var currentdate = date.getFullYear() + seperator1 + month + seperator1 + strDate + " " + hour + seperator2 + min + seperator2 + second;
      return currentdate;
    };
    OSDate.showTime = function() {
      var date = new Date();
      var seperator2 = ":";
      var hour = date.getHours();
      var min = date.getMinutes();
      hour >= 0 && hour <= 9 && (hour = "0" + hour);
      min >= 0 && min <= 9 && (min = "0" + min);
      var currentdate = hour + seperator2 + min;
      return currentdate;
    };
    cc.YL.DDZ_Osdate = OSDate;
    module.exports = OSDate;
    cc._RF.pop();
  }, {} ],
  DDZ_OneGameOverItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5b5ee2rlCBN46yxryQRDqG5", "DDZ_OneGameOverItem");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        pokerPre: cc.Prefab,
        atlas: cc.SpriteAtlas
      },
      start: function start() {},
      _sortPokerArrObj: function _sortPokerArrObj(arr) {
        return arr.sort(function(a, b) {
          return a.Num - b.Num;
        });
      },
      initItem: function initItem(data, headUrl, nickname, difen) {
        if (true == data.isDiZhu) {
          this.node.getChildByName("Icon").getComponent(cc.Sprite).spriteFrame = this.atlas.getSpriteFrame("dz_xiaojiesuan1");
          this.node.getChildByName("Icon").getChildByName("Word").getComponent(cc.Label).string = "地主";
        } else {
          this.node.getChildByName("Icon").getComponent(cc.Sprite).spriteFrame = null;
          this.node.getChildByName("Icon").getChildByName("Word").getComponent(cc.Label).string = "农民";
        }
        fun.utils.loadUrlRes(headUrl, this.node.getChildByName("PlayerInfoBG").getChildByName("Head"));
        this.node.getChildByName("PlayerInfoBG").getChildByName("ID").getComponent(cc.Label).string = data.userId;
        this.node.getChildByName("PlayerInfoBG").getChildByName("Name").getComponent(cc.Label).string = nickname;
        var pokers = data.handPokers;
        var temp = [];
        for (var i = 0; i < pokers.length; i++) {
          var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(pokers[i]);
          temp.push(pokerObj);
        }
        temp = this._sortPokerArrObj(temp);
        temp.reverse();
        for (var i = 0; i < temp.length; i++) {
          var pokerNode = this.initPoker(temp[i]);
          this.node.getChildByName("PokerBG").getChildByName("HandPoker").addChild(pokerNode);
          var posX = 0 + 50 * i;
          pokerNode.setPosition(posX, 0);
          pokerNode.setTag(posX);
        }
        this.node.getChildByName("PokerBG").getChildByName("GameInfo").getComponent(cc.Label).string = data.extend;
        this.node.getChildByName("PokerBG").getChildByName("DiFen").getChildByName("Num").getComponent(cc.Label).string = difen;
        this.node.getChildByName("PokerBG").getChildByName("BeiShu").getChildByName("Num").getComponent(cc.Label).string = data.rate;
        if (data.score >= 0) {
          this.node.getChildByName("PokerBG").getChildByName("JiFen").getChildByName("Num").getComponent(cc.Label).string = data.score;
          this.node.getChildByName("PokerBG").getChildByName("JiFen").getChildByName("Num").color = new cc.Color(255, 237, 85);
        } else {
          this.node.getChildByName("PokerBG").getChildByName("JiFen").getChildByName("Num").getComponent(cc.Label).string = data.score;
          this.node.getChildByName("PokerBG").getChildByName("JiFen").getChildByName("Num").color = new cc.Color(157, 186, 244);
        }
      },
      initPoker: function initPoker(pokerObj) {
        var newNode = cc.instantiate(this.pokerPre);
        newNode.getComponent("DDZ_Poker").initPoker(pokerObj);
        return newNode;
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_OneGameOver: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "858f58DDolN24Sjpn5Sj90y", "DDZ_OneGameOver");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        pokerPre: cc.Prefab,
        item: cc.Prefab,
        winFont: cc.Font,
        loseFont: cc.Font,
        Atlas: cc.SpriteAtlas
      },
      start: function start() {},
      initNodeForSimple: function initNodeForSimple(data, isRePlay) {
        this._isRepaly = isRePlay;
        if (true == isRePlay) this.initFirstUI(data, isRePlay); else {
          (data.isSpring || data.isReverseSpring) && cc.YL.DDZAnimation.playSpring(data.isSpring, data.isReverseSpring);
          setTimeout(function() {
            this.initFirstUI(data, isRePlay);
          }.bind(this), true == data.isSpring || true == data.isReverseSpring ? 1500 : 10);
        }
      },
      initFirstUI: function initFirstUI(data, isRePlay) {
        this.selfID = fun.db.getData("UserInfo").UserId;
        this.firstNode = this.node.getChildByName("First");
        this.firstNode.active = true;
        this.node.getChildByName("Second").active = false;
        this.selfNode = this.firstNode.getChildByName("Self");
        this.rightNode = this.firstNode.getChildByName("Right");
        this.leftNode = this.firstNode.getChildByName("Left");
        this.oneGameOverData = data;
        for (var i = 0; i < data.usersRoundLotteryInfo.length; i++) {
          if (this.selfID == data.usersRoundLotteryInfo[i].userId) {
            this.initSelf(data.usersRoundLotteryInfo[i]);
            var selfInfo = data.usersRoundLotteryInfo[i];
            this.isWin = data.usersRoundLotteryInfo[i].score >= 0;
            var selfScore = data.usersRoundLotteryInfo[i].score;
          }
          if (data.usersRoundLotteryInfo[i].userId == cc.YL.DDZrightPlayerInfo.userId) {
            this.initRight(data.usersRoundLotteryInfo[i]);
            var rightScore = data.usersRoundLotteryInfo[i].score;
          }
          if (data.usersRoundLotteryInfo[i].userId == cc.YL.DDZleftPlayerInfo.userId) {
            this.initLeft(data.usersRoundLotteryInfo[i]);
            var leftScore = data.usersRoundLotteryInfo[i].score;
          }
        }
        if (0 == selfScore && 0 == rightScore && 0 == leftScore) if (true == isRePlay) {
          this.firstNode.getChildByName("Continue").active = false;
          this.firstNode.getChildByName("Leave").active = true;
        } else this.firstNode.getChildByName("ShowWinOrLose").active = false; else if (true == isRePlay) {
          this.firstNode.getChildByName("Continue").active = false;
          this.firstNode.getChildByName("Leave").active = true;
        } else this.initIcon(selfInfo);
      },
      _sortPokerArrObj: function _sortPokerArrObj(arr) {
        return arr.sort(function(a, b) {
          return a.Num - b.Num;
        });
      },
      initSelf: function initSelf(data) {
        var list = data.remainPokers;
        var infoNode = this.firstNode.getChildByName("SelfPlayerInfo");
        var headUrl = cc.YL.DDZselfPlayerInfo.headUrl;
        var nickName = cc.YL.DDZselfPlayerInfo.nickName;
        fun.utils.loadUrlRes(headUrl, infoNode.getChildByName("HeadNode"));
        infoNode.getChildByName("NickNameBG").getChildByName("Name").getComponent(cc.Label).string = nickName;
        infoNode.getChildByName("CoinBG").getChildByName("Num").getComponent(cc.Label).string = data.totalScore;
        infoNode.getChildByName("ID").getComponent(cc.Label).string = data.userId;
        if (list) {
          var temp = [];
          for (var i = 0; i < list.length; i++) {
            var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(list[i]);
            temp.push(pokerObj);
          }
          temp = this._sortPokerArrObj(temp);
          temp.reverse();
          var startPosX = -25 * (temp.length - 1);
          for (var i = 0; i < temp.length; i++) {
            var pokerNode = this.initPoker(temp[i]);
            this.selfNode.getChildByName("Poker").addChild(pokerNode);
            var posX = startPosX + 50 * i;
            pokerNode.setPosition(posX, 0);
            pokerNode.setTag(posX);
          }
        }
        data.score >= 0 ? this.selfNode.getChildByName("Num").getComponent(cc.Label).string = "+" + data.score : this.selfNode.getChildByName("Num").getComponent(cc.Label).string = data.score;
        data.score >= 0 ? this.selfNode.getChildByName("Num_lose").getComponent(cc.Label).string = "+" + data.score : this.selfNode.getChildByName("Num_lose").getComponent(cc.Label).string = data.score;
        data.score >= 0 ? this.selfNode.getChildByName("Num_lose").active = false : this.selfNode.getChildByName("Num").active = false;
        true == data.isDiZhu && (this.node.getChildByName("First").getChildByName("SelfPlayerInfo").getChildByName("DiZhu").active = true);
      },
      initRight: function initRight(data) {
        var list = data.remainPokers;
        var infoNode = this.firstNode.getChildByName("RightPlayerInfo");
        var headUrl = cc.YL.DDZrightPlayerInfo.headUrl;
        var nickName = cc.YL.DDZrightPlayerInfo.nickName;
        fun.utils.loadUrlRes(headUrl, infoNode.getChildByName("HeadNode"));
        infoNode.getChildByName("NickNameBG").getChildByName("Name").getComponent(cc.Label).string = nickName;
        infoNode.getChildByName("NickNameBG").getChildByName("Num").getComponent(cc.Label).string = data.totalScore;
        infoNode.getChildByName("ID").getComponent(cc.Label).string = data.userId;
        if (list) {
          var temp = [];
          for (var i = 0; i < list.length; i++) {
            var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(list[i]);
            temp.push(pokerObj);
          }
          temp = this._sortPokerArrObj(temp);
          temp = temp.reverse();
          for (var i = 0; i < temp.length; i++) {
            var pokerNode = this.initPoker(temp[i]);
            if (i > 10) {
              var posX = 50 * (i - 11) - 500;
              pokerNode.setPosition(posX, -100);
            } else {
              var posX = 50 * i - 500;
              pokerNode.setPosition(posX, 0);
            }
            this.rightNode.getChildByName("Poker").addChild(pokerNode);
            pokerNode.setTag(posX);
          }
        }
        data.score >= 0 ? this.rightNode.getChildByName("Num").getComponent(cc.Label).string = "+" + data.score : this.rightNode.getChildByName("Num").getComponent(cc.Label).string = data.score;
        data.score >= 0 ? this.rightNode.getChildByName("Num_lose").getComponent(cc.Label).string = "+" + data.score : this.rightNode.getChildByName("Num_lose").getComponent(cc.Label).string = data.score;
        data.score >= 0 ? this.rightNode.getChildByName("Num_lose").active = false : this.rightNode.getChildByName("Num").active = false;
        true == data.isDiZhu && (this.node.getChildByName("First").getChildByName("RightPlayerInfo").getChildByName("DiZhu").active = true);
      },
      initLeft: function initLeft(data) {
        var list = data.remainPokers;
        var infoNode = this.firstNode.getChildByName("LeftPlayerInfo");
        var headUrl = cc.YL.DDZleftPlayerInfo.headUrl;
        var nickName = cc.YL.DDZleftPlayerInfo.nickName;
        fun.utils.loadUrlRes(headUrl, infoNode.getChildByName("HeadNode"));
        infoNode.getChildByName("NickNameBG").getChildByName("Name").getComponent(cc.Label).string = nickName;
        infoNode.getChildByName("NickNameBG").getChildByName("Num").getComponent(cc.Label).string = data.totalScore;
        infoNode.getChildByName("ID").getComponent(cc.Label).string = data.userId;
        if (list) {
          var temp = [];
          for (var i = 0; i < list.length; i++) {
            var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(list[i]);
            temp.push(pokerObj);
          }
          temp = this._sortPokerArrObj(temp);
          temp.reverse();
          for (var i = 0; i < temp.length; i++) {
            var pokerNode = this.initPoker(temp[i]);
            this.leftNode.getChildByName("Poker").addChild(pokerNode);
            if (i > 10) {
              var posX = 50 * (i - 11);
              pokerNode.setPosition(posX, -100);
            } else {
              var posX = 50 * i;
              pokerNode.setPosition(posX, 0);
            }
            pokerNode.setTag(posX);
          }
        }
        data.score >= 0 ? this.leftNode.getChildByName("Num").getComponent(cc.Label).string = "+" + data.score : this.leftNode.getChildByName("Num").getComponent(cc.Label).string = data.score;
        data.score >= 0 ? this.leftNode.getChildByName("Num_lose").getComponent(cc.Label).string = "+" + data.score : this.leftNode.getChildByName("Num_lose").getComponent(cc.Label).string = data.score;
        data.score >= 0 ? this.leftNode.getChildByName("Num_lose").active = false : this.leftNode.getChildByName("Num").active = false;
        true == data.isDiZhu && (this.node.getChildByName("First").getChildByName("LeftPlayerInfo").getChildByName("DiZhu").active = true);
      },
      onClickContinue: function onClickContinue() {
        cc.YL.DDZAudio.playBtnClick();
        if (cc.YL.DDZAllGameOverData) {
          var UIROOT = cc.find("DDZ_UIROOT");
          UIROOT.getChildByName("MainNode").getComponent("DDZ_Main").showAllGameOver(cc.YL.DDZAllGameOverData);
        } else fun.net.send("PID_READY_REQ", {
          userId: fun.db.getData("UserInfo").UserId
        });
        this.node.active = false;
        this.node.destroy();
      },
      onClickDetail: function onClickDetail() {
        cc.YL.DDZAudio.playBtnClick();
        this.firstNode.active = false;
        this.node.getChildByName("Second").active = true;
        this.initSecondUI(this.oneGameOverData);
      },
      onClickLeave: function onClickLeave(event) {
        cc.director.loadScene("hall");
        event.target.active = false;
      },
      initPoker: function initPoker(pokerObj) {
        var newNode = cc.instantiate(this.pokerPre);
        newNode.getComponent("DDZ_Poker").initPoker(pokerObj);
        return newNode;
      },
      initIcon: function initIcon(data) {
        this.firstNode.getChildByName("ShowWinOrLose").active = true;
        var isShow = false;
        for (var i = 0; i < this.firstNode.getChildByName("ShowWinOrLose").children.length; i++) this.firstNode.getChildByName("ShowWinOrLose").children[i].active = false;
        if (true == isShow) return;
        true == data.isDiZhu ? true == data.isWinner ? this.firstNode.getChildByName("ShowWinOrLose").getChildByName("1").active = true : this.firstNode.getChildByName("ShowWinOrLose").getChildByName("2").active = true : true == data.isWinner ? this.firstNode.getChildByName("ShowWinOrLose").getChildByName("3").active = true : this.firstNode.getChildByName("ShowWinOrLose").getChildByName("4").active = true;
        this.firstNode.getChildByName("ShowWinOrLose").stopAllActions();
        this.firstNode.getChildByName("ShowWinOrLose").setScale(0);
        this.firstNode.getChildByName("ShowWinOrLose").runAction(cc.scaleTo(.9, 1.2).easing(cc.easeBackOut()));
        setTimeout(function() {
          this.firstNode.getChildByName("ShowWinOrLose").active = false;
          isShow = true;
        }.bind(this), 2e3);
      },
      initSecondUI: function initSecondUI(data) {
        this.ButtomNode = this.node.getChildByName("Second").getChildByName("Buttom");
        this.MidNode = this.node.getChildByName("Second").getChildByName("Mid");
        this.TopNode = this.node.getChildByName("Second").getChildByName("Top");
        this.initTitle();
        this.initButtomInfo(data);
        this.initItem(data);
      },
      initTitle: function initTitle() {
        if (true == this.isWin) {
          this.TopNode.getChildByName("Title").getComponent(cc.Sprite).spriteFrame = this.Atlas.getSpriteFrame("dz_xiaojiesuan5");
          this.TopNode.getChildByName("Title").getChildByName("Title2").getComponent(cc.Sprite).spriteFrame = this.Atlas.getSpriteFrame("dz_xiaojiesuan5");
          this.TopNode.getChildByName("Title").getChildByName("Word").getComponent(cc.Sprite).spriteFrame = this.Atlas.getSpriteFrame("dz_xiaojiesuan6");
        } else {
          this.TopNode.getChildByName("Title").getComponent(cc.Sprite).spriteFrame = this.Atlas.getSpriteFrame("dz_xiaojiesuan3");
          this.TopNode.getChildByName("Title").getChildByName("Title2").getComponent(cc.Sprite).spriteFrame = this.Atlas.getSpriteFrame("dz_xiaojiesuan3");
          this.TopNode.getChildByName("Title").getChildByName("Word").getComponent(cc.Sprite).spriteFrame = this.Atlas.getSpriteFrame("dz_xiaojiesuan4");
        }
      },
      initButtomInfo: function initButtomInfo(data) {
        true == this._isRepaly ? this.TopNode.getChildByName("TimeBG").active = false : this.TopNode.getChildByName("TimeBG").getChildByName("time").getComponent(cc.Label).string = cc.YL.DDZ_Osdate.LocalTimeString();
        this.ButtomNode.getChildByName("RoomInfo").getChildByName("lun").getComponent(cc.Label).string = "第" + data.currentRound + "局";
        this.ButtomNode.getChildByName("RoomInfo").getChildByName("PassWord").getComponent(cc.Label).string = "房号:" + data.password;
      },
      initItem: function initItem(data) {
        this.MidNode.removeAllChildren();
        for (var i = 0; i < data.usersRoundLotteryInfo.length; i++) {
          var itemNode = cc.instantiate(this.item);
          this.MidNode.addChild(itemNode);
          var headUrl = null;
          var nickName = null;
          if (this.selfID == data.usersRoundLotteryInfo[i].userId) {
            headUrl = cc.YL.DDZselfPlayerInfo.headUrl;
            nickName = cc.YL.DDZselfPlayerInfo.nickName;
          }
          if (data.usersRoundLotteryInfo[i].userId == cc.YL.DDZrightPlayerInfo.userId) {
            headUrl = cc.YL.DDZrightPlayerInfo.headUrl;
            nickName = cc.YL.DDZrightPlayerInfo.nickName;
          }
          if (data.usersRoundLotteryInfo[i].userId == cc.YL.DDZleftPlayerInfo.userId) {
            headUrl = cc.YL.DDZleftPlayerInfo.headUrl;
            nickName = cc.YL.DDZleftPlayerInfo.nickName;
          }
          itemNode.getComponent("DDZ_OneGameOverItem").initItem(data.usersRoundLotteryInfo[i], headUrl, nickName, this.oneGameOverData.diFen);
        }
      },
      onClickBack: function onClickBack() {
        this.firstNode.active = true;
        this.node.getChildByName("Second").active = false;
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_OutCard: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a9af3wMUKlOlqzrzKxpg8L7", "DDZ_OutCard");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {},
      initBtnStatus: function initBtnStatus(isNew) {
        if (true == isNew) {
          this.node.getChildByName("0").active = false;
          this.node.getChildByName("2").active = false;
        } else {
          this.node.getChildByName("0").active = true;
          this.node.getChildByName("2").active = true;
        }
      },
      onClickOutCard: function onClickOutCard() {
        cc.YL.DDZAudio.playBtnClick();
        fun.net.send("PID_OUTCARD_REQ", {
          userId: fun.db.getData("UserInfo").UserId,
          paiIds: cc.YL.playerOutPokerArr
        });
      },
      onClickPassCard: function onClickPassCard() {
        cc.YL.DDZAudio.playBtnClick();
        fun.net.send("PID_PASS_REQ", {
          userId: fun.db.getData("UserInfo").UserId
        });
      },
      onClickTiShiCard: function onClickTiShiCard() {
        cc.YL.DDZAudio.playBtnClick();
        cc.YL.DDZPokerTip.clickTipsBtn(cc.YL.lastOutCardData.outType, cc.YL.lastOutCardData.paiIds.length, cc.YL.lastOutCardData.paiIds);
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_Pass: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4f2c3e74YZAdbrbSRR/cdFe", "DDZ_Pass");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {},
      onClickPassCard: function onClickPassCard() {
        cc.YL.DDZAudio.playBtnClick();
        fun.net.send("PID_PASS_REQ", {
          userId: fun.db.getData("UserInfo").UserId
        });
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_PlayerBtn: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d7220qjhS9PfLZD5enmJQOe", "DDZ_PlayerBtn");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        outCard: cc.Prefab,
        pass: cc.Prefab,
        JiaBei: cc.Prefab,
        JiaoFen: cc.Prefab,
        ready: cc.Prefab
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  DDZ_PlayerGPS: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "92723Ka1dJO+K06ESR0Kk2e", "DDZ_PlayerGPS");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {
        this.animation = this.node.getComponent(cc.Animation);
        this.clips = this.animation.getClips();
        this.backN = this.node.getChildByName("back");
      },
      start: function start() {},
      close: function close() {
        this.animation.play(this.clips[1].name).once("finished", function() {
          this.node.destroy();
        }, this);
      },
      show: function show(players) {
        this.backN = this.node.getChildByName("back");
        var dis01 = null;
        var dis02 = null;
        var dis12 = null;
        for (var i = 0; i < players.length; i++) {
          players[i].UserId == fun.db.getData("UserInfo").UserId && this.playerNodeShow(this.backN.getChildByName("player_0"), players[i]);
          if (players[i].UserId == cc.YL.DDZrightPlayerInfo.userId) {
            this.playerNodeShow(this.backN.getChildByName("player_1"), players[i]);
            var points = {
              p1: players[0].Address,
              p2: players[1].Address
            };
            var dis01 = require("JSPhoneBaiDu").getDistanceByPoints(points);
          }
          if (players[i].UserId == cc.YL.DDZleftPlayerInfo.userId) {
            this.playerNodeShow(this.backN.getChildByName("player_2"), players[i]);
            var points = {
              p1: players[0].Address,
              p2: players[1].Address
            };
            var dis01 = require("JSPhoneBaiDu").getDistanceByPoints(points);
            var points = {
              p1: players[0].Address,
              p2: players[2].Address
            };
            var dis02 = require("JSPhoneBaiDu").getDistanceByPoints(points);
            var points = {
              p1: players[1].Address,
              p2: players[2].Address
            };
            var dis12 = require("JSPhoneBaiDu").getDistanceByPoints(points);
          }
        }
        if (dis01) {
          this.node.getChildByName("back").getChildByName("player_0").getChildByName("line_1").getChildByName("distance").getChildByName("content").getComponent(cc.Label).string = this.showDis(dis01).d;
          this.node.getChildByName("back").getChildByName("player_0").getChildByName("line_1").getChildByName("distance").getChildByName("content").color = this.showDis(dis01).c;
        }
        if (dis02) {
          this.node.getChildByName("back").getChildByName("player_0").getChildByName("line_2").getChildByName("distance").getChildByName("content").getComponent(cc.Label).string = this.showDis(dis01).d;
          this.node.getChildByName("back").getChildByName("player_0").getChildByName("line_2").getChildByName("distance").getChildByName("content").color = this.showDis(dis01).c;
        }
        if (dis12) {
          this.node.getChildByName("back").getChildByName("player_1").getChildByName("line_2").getChildByName("distance").getChildByName("content").getComponent(cc.Label).string = this.showDis(dis01).d;
          this.node.getChildByName("back").getChildByName("player_1").getChildByName("line_2").getChildByName("distance").getChildByName("content").color = this.showDis(dis01).c;
        }
      },
      showDis: function showDis(dis) {
        var dColor = cc.Color.RED;
        var showDistance = Math.floor(dis) + "米";
        if (dis < 0) {
          showDistance = "距离未知";
          dColor = cc.Color.YELLOW;
        }
        if (dis > 1e3) {
          showDistance = (dis / 1e3).toFixed(2) + "千米";
          dColor = cc.Color.GREEN;
        }
        return {
          c: dColor,
          d: showDistance
        };
      },
      playerNodeShow: function playerNodeShow(node, data) {
        var playerN = node;
        var iconN = playerN.getChildByName("icon");
        var mainN = iconN.getChildByName("main");
        var waitN = iconN.getChildByName("wait");
        var contentN = mainN.getChildByName("content");
        fun.utils.loadUrlRes(data.HeadUrl, contentN);
        waitN.active = false;
        mainN.active = true;
      }
    });
    cc._RF.pop();
  }, {
    JSPhoneBaiDu: "JSPhoneBaiDu"
  } ],
  DDZ_PlayerInfoNode: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8858fBmiVtHW4OFMSLGJlqU", "DDZ_PlayerInfoNode");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        GPSPre: cc.Prefab
      },
      start: function start() {},
      initNode: function initNode(playerInfo, index) {
        this.initByData(playerInfo);
        this.selfPos = cc.p(-304, -128);
        this.rightPos = cc.p(304, 202);
        this.leftPos = cc.p(-304, 202);
        switch (index) {
         case 1:
          this.node.getChildByName("BG").setPosition(this.selfPos);
          this.node.getChildByName("BG").getChildByName("Buttom").active = false;
          break;

         case 2:
          this.node.getChildByName("BG").setPosition(this.rightPos);
          this.toID = cc.YL.DDZrightPlayerInfo.userId;
          break;

         case 3:
          this.node.getChildByName("BG").setPosition(this.leftPos);
          this.toID = cc.YL.DDZleftPlayerInfo.userId;
        }
      },
      initByData: function initByData(data) {
        this.node.getChildByName("BG").getChildByName("Top").getChildByName("nickName").getComponent(cc.Label).string = "昵称: " + data.nickName.toString();
        this.node.getChildByName("BG").getChildByName("Top").getChildByName("ID").getComponent(cc.Label).string = "ID: " + data.userId.toString();
        this.node.getChildByName("BG").getChildByName("Mid").getChildByName("Distance").getComponent(cc.Label).string = "IP: " + data.ip.toString();
      },
      onClickGPSDetail: function onClickGPSDetail() {
        cc.YL.log("点击打开GPS详情");
        var rootUI = cc.find("DDZ_UIROOT/MainNode");
        var gpsNode = rootUI.getChildByName("DDZ_Map") ? rootUI.getChildByName("DDZ_Map") : cc.instantiate(this.GPSPre);
        rootUI.getChildByName("DDZ_Map") ? rootUI.getChildByName("DDZ_Map").active = true : rootUI.addChild(gpsNode);
        var playerinfos = this.playerInfos();
        gpsNode.getComponent("DDZ_PlayerGPS").show(playerinfos);
      },
      onClickTools: function onClickTools(event, custom) {
        var outside = {
          content: custom,
          from: fun.db.getData("UserInfo").UserId,
          to: this.toID,
          chatType: "interact"
        };
        fun.net.pSend("Chat", outside);
      },
      onCloseNode: function onCloseNode() {
        this.node.active = false;
        this.node.destroy();
      },
      playerInfos: function playerInfos() {
        var tempArr = [];
        cc.YL.DDZselfPlayerInfo && tempArr.push({
          Address: cc.YL.DDZselfPlayerInfo.gps ? cc.YL.DDZselfPlayerInfo.gps : null,
          Feng: null,
          HeadUrl: cc.YL.DDZselfPlayerInfo.headUrl,
          Ip: cc.YL.DDZselfPlayerInfo.ip,
          Sex: cc.YL.DDZselfPlayerInfo.sex,
          UserId: cc.YL.DDZselfPlayerInfo.userId,
          Name: cc.YL.DDZselfPlayerInfo.nickName,
          name: cc.YL.DDZselfPlayerInfo.nickName,
          showName: cc.YL.DDZselfPlayerInfo.nickName,
          PlayerIdx: cc.YL.DDZselfPlayerInfo.index,
          Icon: cc.YL.DDZrightPlayerInfo.headUrl,
          isSelfPlayed: true,
          isTruePlayer: true
        });
        cc.YL.DDZrightPlayerInfo && tempArr.push({
          Address: cc.YL.DDZrightPlayerInfo.gps ? cc.YL.DDZrightPlayerInfo.gps : null,
          Feng: null,
          HeadUrl: cc.YL.DDZrightPlayerInfo.headUrl,
          Ip: cc.YL.DDZrightPlayerInfo.ip,
          Sex: cc.YL.DDZrightPlayerInfo.sex,
          UserId: cc.YL.DDZrightPlayerInfo.userId,
          Name: cc.YL.DDZrightPlayerInfo.nickName,
          name: cc.YL.DDZrightPlayerInfo.nickName,
          showName: cc.YL.DDZrightPlayerInfo.nickName,
          PlayerIdx: cc.YL.DDZrightPlayerInfo.index,
          Icon: cc.YL.DDZrightPlayerInfo.headUrl,
          isSelfPlayed: false,
          isTruePlayer: true
        });
        cc.YL.DDZleftPlayerInfo && tempArr.push({
          Address: cc.YL.DDZleftPlayerInfo.gps ? cc.YL.DDZleftPlayerInfo.gps : null,
          Feng: null,
          HeadUrl: cc.YL.DDZleftPlayerInfo.headUrl,
          Ip: cc.YL.DDZleftPlayerInfo.ip,
          Sex: cc.YL.DDZleftPlayerInfo.sex,
          UserId: cc.YL.DDZleftPlayerInfo.userId,
          Name: cc.YL.DDZleftPlayerInfo.nickName,
          name: cc.YL.DDZleftPlayerInfo.nickName,
          showName: cc.YL.DDZleftPlayerInfo.nickName,
          PlayerIdx: cc.YL.DDZleftPlayerInfo.index,
          Icon: cc.YL.DDZrightPlayerInfo.headUrl,
          isSelfPlayed: false,
          isTruePlayer: true
        });
        return tempArr;
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_PlayerLeftInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1a305S09C9M3aolaZpiKX4b", "DDZ_PlayerLeftInfo");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        playerInfo: null,
        txtAtlas: cc.SpriteAtlas
      },
      onLoad: function onLoad() {
        this.playerInfo = null;
        this.BtnNode = cc.find("DDZ_UIROOT/MainNode/PlayerBtnNode");
      },
      initLeftPlayerNode: function initLeftPlayerNode(data) {
        this.node.active = true;
        this.playerInfo = data;
        this.clearNodeUI();
        this.initNodeUI(data);
        this.showAndHideReady(data.isReady);
      },
      clearNodeUI: function clearNodeUI() {
        this.node.getChildByName("HeadNode").getComponent(cc.Sprite).spriteFrame = null;
        this.showDiZhuIcon(false);
        this.node.getChildByName("ID").getComponent(cc.Label).string = "";
        this.node.getChildByName("NickNameBG").getChildByName("Name").getComponent(cc.Label).string = "";
        this.node.getChildByName("NickNameBG").getChildByName("Num").getComponent(cc.Label).string = "";
        this.clearRate();
        this.updateOutWord(parseInt(0));
      },
      initNodeUI: function initNodeUI(data) {
        fun.utils.loadUrlRes(data.headUrl, this.node.getChildByName("HeadNode"));
        this.showDiZhuIcon(false);
        this.node.getChildByName("ID").getComponent(cc.Label).string = data.userId;
        this.node.getChildByName("NickNameBG").getChildByName("Name").getComponent(cc.Label).string = data.nickName;
        this.node.getChildByName("NickNameBG").getChildByName("Num").getComponent(cc.Label).string = data.coin;
        this.node.getChildByName("Rate").active = false;
        4 == cc.YL.DDZDeskInfo.status && -1 != data.isJiaoFen && this.updateOutWord(parseInt(data.isJiaoFen + 3));
        1 == data.isJiaBei && this.showRate(true);
        0 != data.isJiaBei && 5 == cc.YL.DDZDeskInfo.status && (1 == data.isJiaBei ? this.updateOutWord(2) : this.updateOutWord(13));
        5 != cc.YL.DDZDeskInfo.status && 6 != cc.YL.DDZDeskInfo.status || cc.YL.loaderID != cc.YL.DDZleftPlayerInfo.userId || this.showDiZhuIcon(true);
        this.hideOffline();
        true === data.isBreak && this.showOffline();
      },
      showOffline: function showOffline() {
        this.node.getChildByName("OfflineNode").active = true;
      },
      hideOffline: function hideOffline() {
        this.node.getChildByName("OfflineNode").active = false;
      },
      showAndHideReady: function showAndHideReady(isReady) {
        true == isReady && cc.YL.DDZDeskInfo.status <= 2 ? this.node.getChildByName("Word").active = true : this.node.getChildByName("Word").active = false;
      },
      showDiZhuIcon: function showDiZhuIcon(isDiZhu) {
        this.isDiZhu = isDiZhu;
        this.node.getChildByName("DiZhuIcon").active = this.isDiZhu;
      },
      onClickPlayerInfo: function onClickPlayerInfo() {
        cc.YL.DDZAudio.playBtnClick();
        cc.find("DDZ_UIROOT/MainNode").getComponent("DDZ_Main").initPlayerInfoNode(this.playerInfo, 3);
      },
      showRate: function showRate(active) {
        this.node.getChildByName("Rate").active = active;
      },
      clearRate: function clearRate() {
        this.node.getChildByName("Rate").active = false;
      },
      updateOutWord: function updateOutWord(strType) {
        var fileNameArr = [ "", "dz_zt000", "dz_zt00", "dz_zt0", "dz_zt1", "dz_zt2", "dz_zt3", "", "", "dz_zt4", "", "", "dz_zt5", "dz_zt7" ];
        var atlas = this.txtAtlas;
        if (0 != strType && strType) {
          this.node.getChildByName("ShowWord").active = true;
          this.node.getChildByName("ShowWord").getComponent(cc.Sprite).spriteFrame = atlas.getSpriteFrame(fileNameArr[strType]);
        } else this.node.getChildByName("ShowWord").active = false;
      },
      showHeadAnimation: function showHeadAnimation(isShow) {
        this.node.getChildByName("HeadAnim").getComponent(sp.Skeleton).animation = "animation";
        this.node.getChildByName("HeadAnim").active = isShow;
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_PlayerLeftOutPoker: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a487bvWAklMOpUC/rNuy6zn", "DDZ_PlayerLeftOutPoker");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        outCards: [],
        pokerPre: cc.Prefab
      },
      start: function start() {},
      initOutPoker: function initOutPoker(outcardlist, type) {
        if (outcardlist) {
          this.outCards = outcardlist;
          this.clearOutPoker();
          this.node.setScale(.58);
          this.updateOutCard(outcardlist, type);
        }
      },
      clearOutPoker: function clearOutPoker() {
        this.node.removeAllChildren();
      },
      _sortPokerArrObj: function _sortPokerArrObj(arr) {
        return arr.sort(function(a, b) {
          return a.Num - b.Num;
        });
      },
      updateOutCard: function updateOutCard(outcardlist, type) {
        switch (type) {
         case 1:
         case 2:
         case 3:
          var temp = [];
          for (var i = 0; i < outcardlist.length; i++) {
            var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]);
            temp.push(pokerObj);
          }
          temp = this._sortPokerArrObj(temp);
          this.showPokerNode(temp, 0);
          break;

         case 4:
         case 5:
          var temp_1 = [];
          var temp_2 = [];
          for (var i = 0; i < outcardlist.length; i++) {
            var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]);
            pokerObj.Num == cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[0]).Num ? temp_1.push(pokerObj) : temp_2.push(pokerObj);
          }
          temp_1 = this._sortPokerArrObj(temp_1);
          temp_2 = this._sortPokerArrObj(temp_2);
          outcardlist = 3 == temp_1.length ? temp_1.concat(temp_2) : temp_2.concat(temp_1);
          this.showPokerNode(outcardlist, 0);
          break;

         case 6:
         case 7:
          var temp = [];
          for (var i = 0; i < outcardlist.length; i++) {
            var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]);
            temp.push(pokerObj);
          }
          temp = this._sortPokerArrObj(temp);
          temp.reverse();
          this.showPokerNode(temp, 1);
          break;

         case 8:
          var temp = [];
          for (var i = 0; i < outcardlist.length; i++) {
            var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]);
            temp.push(pokerObj);
          }
          temp = this._sortPokerArrObj(temp);
          this.showPokerNode(temp, 2);
          break;

         case 9:
         case 10:
          var temp_1 = [];
          var temp_2 = [];
          for (var i = 0; i < outcardlist.length; i++) {
            var times = 0;
            for (var j = 0; j < outcardlist.length; j++) cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]).Num == cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[j]).Num && times++;
            3 == times ? temp_1.push(cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i])) : temp_2.push(cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]));
          }
          temp_1 = this._sortPokerArrObj(temp_1);
          temp_2 = this._sortPokerArrObj(temp_2);
          outcardlist = temp_1.length > temp_2.length ? temp_1.concat(temp_2) : temp_2.concat(temp_1);
          this.showPokerNode(outcardlist, 2);
          break;

         case 13:
          var temp = [];
          for (var i = 0; i < outcardlist.length; i++) {
            var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]);
            temp.push(pokerObj);
          }
          temp = this._sortPokerArrObj(temp);
          this.showPokerNode(temp, 4);
          break;

         case 11:
         case 12:
          var temp_1 = [];
          var temp_2 = [];
          for (var i = 0; i < outcardlist.length; i++) {
            var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]);
            pokerObj.Num == cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[0]).Num ? temp_1.push(cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i])) : temp_2.push(cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]));
          }
          temp_1 = this._sortPokerArrObj(temp_1);
          temp_2 = this._sortPokerArrObj(temp_2);
          outcardlist = 4 == temp_1.length ? temp_1.concat(temp_2) : temp_2.concat(temp_1);
          this.showPokerNode(outcardlist, 0);
          break;

         case 14:
          var temp = [];
          for (var i = 0; i < outcardlist.length; i++) {
            var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]);
            temp.push(pokerObj);
          }
          temp = this._sortPokerArrObj(temp);
          this.showPokerNode(temp, 4);
        }
      },
      initPoker: function initPoker(pokerObj) {
        var newNode = cc.instantiate(this.pokerPre);
        newNode.getComponent("DDZ_Poker").initPoker(pokerObj);
        this.node.addChild(newNode);
        return newNode;
      },
      showPokerNode: function showPokerNode(list, animaType) {
        this.node.opacity = 200;
        for (var i = 0; i < list.length; i++) {
          var pokerNode = this.initPoker(list[i]);
          var posX = 50 * i;
          pokerNode.setPosition(posX, 0);
          pokerNode.setTag(posX);
          i == list.length - 1 ? pokerNode.getChildByName("Front").getChildByName("typeBig").active = true : pokerNode.getChildByName("Front").getChildByName("typeBig").active = false;
          cc.YL.loaderID == cc.YL.DDZleftPlayerInfo.userId && i == list.length - 1 ? pokerNode.getChildByName("OwnerSign").active = true : pokerNode.getChildByName("OwnerSign").active = false;
          0 != animaType && (this.node.active = false);
        }
        this.node.stopAllActions();
        this.node.active = true;
        var finishaFunc = cc.callFunc(function() {
          this.showSpecialAnim(animaType);
        }.bind(this));
        this.node.runAction(cc.sequence(cc.spawn(cc.fadeTo(.2, 255), cc.scaleTo(.2, .9)), cc.scaleTo(.15, .58).easing(cc.easeBackOut()), finishaFunc));
      },
      showSpecialAnim: function showSpecialAnim(animaType) {
        switch (animaType) {
         case 1:
         case 2:
          var childNodeList = this.node.children;
          this.node.active = true;
          for (var i = 0; i < childNodeList.length; i++) {
            childNodeList[i].setPositionX(0);
            childNodeList[i].stopAllActions();
            childNodeList[i].runAction(cc.moveTo(.15 + .02 * i, childNodeList[i].getTag(), 0).easing(cc.easeBackOut()));
          }
          break;

         case 3:
         case 4:
          this.node.setScale(2);
          this.node.stopAllActions();
          this.node.active = true;
          this.node.runAction(cc.scaleTo(.3, .58).easing(cc.easeBackOut()));
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_PlayerLeftPoker: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6d2e8GplfZOpbXGi5Jy8LaR", "DDZ_PlayerLeftPoker");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        cardNum: 0
      },
      start: function start() {},
      initHandPokerCount: function initHandPokerCount(cardNum) {
        cc.YL.info("左边玩家的手牌数", cardNum);
        this.cardNum = cardNum;
        this.node.getChildByName("CardBG").getChildByName("Num").getComponent(cc.Label).string = this.cardNum;
        this.node.getChildByName("CardBG").active = true;
      },
      cleanHandPokerCount: function cleanHandPokerCount() {
        this.node.getChildByName("CardBG").getChildByName("Num").getComponent(cc.Label).string = "";
        this.node.getChildByName("CardBG").active = false;
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_PlayerRightInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "853f8XYyyNMaoHQO9YDisM+", "DDZ_PlayerRightInfo");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        playerInfo: null,
        txtAtlas: cc.SpriteAtlas
      },
      onLoad: function onLoad() {
        this.playerInfo = null;
        this.BtnNode = cc.find("DDZ_UIROOT/MainNode/PlayerBtnNode");
      },
      initRightPlayerNode: function initRightPlayerNode(data) {
        this.node.active = true;
        this.playerInfo = data;
        this.clearNodeUI();
        this.initNodeUI(data);
        this.showAndHideReady(data.isReady);
      },
      clearNodeUI: function clearNodeUI() {
        this.node.getChildByName("HeadNode").getComponent(cc.Sprite).spriteFrame = null;
        this.showDiZhuIcon(false);
        this.node.getChildByName("ID").getComponent(cc.Label).string = "";
        this.node.getChildByName("NickNameBG").getChildByName("Name").getComponent(cc.Label).string = "";
        this.node.getChildByName("NickNameBG").getChildByName("Num").getComponent(cc.Label).string = "";
        this.clearRate();
        this.updateOutWord(parseInt(0));
      },
      initNodeUI: function initNodeUI(data) {
        fun.utils.loadUrlRes(data.headUrl, this.node.getChildByName("HeadNode"));
        this.showDiZhuIcon(false);
        this.node.getChildByName("ID").getComponent(cc.Label).string = data.userId;
        this.node.getChildByName("NickNameBG").getChildByName("Name").getComponent(cc.Label).string = data.nickName;
        this.node.getChildByName("NickNameBG").getChildByName("Num").getComponent(cc.Label).string = data.coin;
        this.node.getChildByName("Rate").active = false;
        4 == cc.YL.DDZDeskInfo.status && -1 != data.isJiaoFen && this.updateOutWord(parseInt(data.isJiaoFen + 3));
        1 == data.isJiaBei && this.showRate(true);
        0 != data.isJiaBei && 5 == cc.YL.DDZDeskInfo.status && (1 == data.isJiaBei ? this.updateOutWord(2) : this.updateOutWord(13));
        5 != cc.YL.DDZDeskInfo.status && 6 != cc.YL.DDZDeskInfo.status || cc.YL.loaderID != cc.YL.DDZrightPlayerInfo.userId || this.showDiZhuIcon(true);
        this.hideOffline();
        true === data.isBreak && this.showOffline();
      },
      showOffline: function showOffline() {
        this.node.getChildByName("OfflineNode").active = true;
      },
      hideOffline: function hideOffline() {
        this.node.getChildByName("OfflineNode").active = false;
      },
      showAndHideReady: function showAndHideReady(isReady) {
        true == isReady && cc.YL.DDZDeskInfo.status <= 2 ? this.node.getChildByName("Word").active = true : this.node.getChildByName("Word").active = false;
      },
      showDiZhuIcon: function showDiZhuIcon(isDiZhu) {
        this.isDiZhu = isDiZhu;
        this.node.getChildByName("DiZhuIcon").active = this.isDiZhu;
      },
      onClickPlayerInfo: function onClickPlayerInfo() {
        cc.YL.DDZAudio.playBtnClick();
        cc.find("DDZ_UIROOT/MainNode").getComponent("DDZ_Main").initPlayerInfoNode(this.playerInfo, 2);
      },
      showRate: function showRate(active) {
        this.node.getChildByName("Rate").active = active;
      },
      clearRate: function clearRate() {
        this.node.getChildByName("Rate").active = false;
      },
      updateOutWord: function updateOutWord(strType) {
        var fileNameArr = [ "", "dz_zt000", "dz_zt00", "dz_zt0", "dz_zt1", "dz_zt2", "dz_zt3", "", "", "dz_zt4", "", "", "dz_zt5", "dz_zt7" ];
        var atlas = this.txtAtlas;
        if (0 != strType && strType) {
          this.node.getChildByName("ShowWord").active = true;
          this.node.getChildByName("ShowWord").getComponent(cc.Sprite).spriteFrame = atlas.getSpriteFrame(fileNameArr[strType]);
        } else this.node.getChildByName("ShowWord").active = false;
      },
      showHeadAnimation: function showHeadAnimation(isShow) {
        this.node.getChildByName("HeadAnim").getComponent(sp.Skeleton).animation = "animation";
        this.node.getChildByName("HeadAnim").active = isShow;
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_PlayerRightOutPoker: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b85d9s35klKRoGM2o1Ppkii", "DDZ_PlayerRightOutPoker");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        outCards: [],
        pokerPre: cc.Prefab
      },
      start: function start() {},
      initOutPoker: function initOutPoker(outcardlist, type) {
        if (outcardlist) {
          this.outCards = outcardlist;
          this.clearOutPoker();
          this.node.setScale(.58);
          this.updateOutCard(outcardlist, type);
        }
      },
      clearOutPoker: function clearOutPoker() {
        this.node.removeAllChildren();
      },
      _sortPokerArrObj: function _sortPokerArrObj(arr) {
        return arr.sort(function(a, b) {
          return a.Num - b.Num;
        });
      },
      updateOutCard: function updateOutCard(outcardlist, type) {
        switch (type) {
         case 1:
         case 2:
         case 3:
          var temp = [];
          for (var i = 0; i < outcardlist.length; i++) {
            var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]);
            temp.push(pokerObj);
          }
          temp = this._sortPokerArrObj(temp);
          this.showPokerNode(temp, 0);
          break;

         case 4:
         case 5:
          var temp_1 = [];
          var temp_2 = [];
          for (var i = 0; i < outcardlist.length; i++) {
            var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]);
            pokerObj.Num == cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[0]).Num ? temp_1.push(pokerObj) : temp_2.push(pokerObj);
          }
          temp_1 = this._sortPokerArrObj(temp_1);
          temp_2 = this._sortPokerArrObj(temp_2);
          outcardlist = 3 == temp_1.length ? temp_1.concat(temp_2) : temp_2.concat(temp_1);
          this.showPokerNode(outcardlist, 0);
          break;

         case 6:
         case 7:
          var temp = [];
          for (var i = 0; i < outcardlist.length; i++) {
            var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]);
            temp.push(pokerObj);
          }
          temp = this._sortPokerArrObj(temp);
          temp.reverse();
          this.showPokerNode(temp, 1);
          break;

         case 8:
          var temp = [];
          for (var i = 0; i < outcardlist.length; i++) {
            var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]);
            temp.push(pokerObj);
          }
          temp = this._sortPokerArrObj(temp);
          this.showPokerNode(temp, 2);
          break;

         case 9:
         case 10:
          var temp_1 = [];
          var temp_2 = [];
          for (var i = 0; i < outcardlist.length; i++) {
            var times = 0;
            for (var j = 0; j < outcardlist.length; j++) cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]).Num == cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[j]).Num && times++;
            3 == times ? temp_1.push(cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i])) : temp_2.push(cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]));
          }
          temp_1 = this._sortPokerArrObj(temp_1);
          temp_2 = this._sortPokerArrObj(temp_2);
          outcardlist = temp_1.length > temp_2.length ? temp_1.concat(temp_2) : temp_2.concat(temp_1);
          this.showPokerNode(outcardlist, 2);
          break;

         case 13:
          var temp = [];
          for (var i = 0; i < outcardlist.length; i++) {
            var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]);
            temp.push(pokerObj);
          }
          temp = this._sortPokerArrObj(temp);
          this.showPokerNode(temp, 4);
          break;

         case 11:
         case 12:
          var temp_1 = [];
          var temp_2 = [];
          for (var i = 0; i < outcardlist.length; i++) {
            var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]);
            pokerObj.Num == cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[0]).Num ? temp_1.push(cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i])) : temp_2.push(cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]));
          }
          temp_1 = this._sortPokerArrObj(temp_1);
          temp_2 = this._sortPokerArrObj(temp_2);
          outcardlist = 4 == temp_1.length ? temp_1.concat(temp_2) : temp_2.concat(temp_1);
          this.showPokerNode(outcardlist, 0);
          break;

         case 14:
          var temp = [];
          for (var i = 0; i < outcardlist.length; i++) {
            var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]);
            temp.push(pokerObj);
          }
          temp = this._sortPokerArrObj(temp);
          this.showPokerNode(temp, 4);
        }
      },
      initPoker: function initPoker(pokerObj) {
        var newNode = cc.instantiate(this.pokerPre);
        newNode.getComponent("DDZ_Poker").initPoker(pokerObj);
        this.node.addChild(newNode);
        return newNode;
      },
      showPokerNode: function showPokerNode(list, animaType) {
        list = list.reverse();
        this.node.opacity = 200;
        for (var i = 0; i < list.length; i++) {
          var pokerNode = this.initPoker(list[i]);
          var posX = -50 * i;
          pokerNode.setPosition(posX, 0);
          pokerNode.zIndex = list.length - i;
          pokerNode.setTag(posX);
          0 != animaType && (this.node.active = false);
          pokerNode.getChildByName("Front").getChildByName("typeBig").active = 0 == i;
          cc.YL.loaderID == cc.YL.DDZrightPlayerInfo.userId && 0 == i ? pokerNode.getChildByName("OwnerSign").active = true : pokerNode.getChildByName("OwnerSign").active = false;
        }
        this.node.stopAllActions();
        this.node.active = true;
        var finishaFunc = cc.callFunc(function() {
          this.showSpecialAnim(animaType);
        }.bind(this));
        this.node.runAction(cc.sequence(cc.spawn(cc.fadeTo(.2, 255), cc.scaleTo(.2, .9)), cc.scaleTo(.15, .58).easing(cc.easeBackOut()), finishaFunc));
      },
      showSpecialAnim: function showSpecialAnim(animaType) {
        switch (animaType) {
         case 1:
         case 2:
          var childNodeList = this.node.children;
          this.node.active = true;
          for (var i = 0; i < childNodeList.length; i++) {
            childNodeList[i].setPositionX(0);
            childNodeList[i].stopAllActions();
            childNodeList[i].runAction(cc.moveTo(.15 + .02 * i, childNodeList[i].getTag(), 0).easing(cc.easeBackOut()));
          }
          break;

         case 3:
         case 4:
          this.node.setScale(2);
          this.node.stopAllActions();
          this.node.active = true;
          this.node.runAction(cc.scaleTo(.3, .58).easing(cc.easeBackOut()));
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_PlayerRightPoker: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e7731PMvjJFJ6yAaeTb0HEz", "DDZ_PlayerRightPoker");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        cardNum: 0
      },
      start: function start() {},
      initHandPokerCount: function initHandPokerCount(cardNum) {
        this.cardNum = cardNum;
        cc.YL.info("右边玩家的手牌数", cardNum);
        this.node.getChildByName("CardBG").getChildByName("Num").getComponent(cc.Label).string = this.cardNum;
        this.node.getChildByName("CardBG").active = true;
      },
      cleanHandPokerCount: function cleanHandPokerCount() {
        this.node.getChildByName("CardBG").getChildByName("Num").getComponent(cc.Label).string = "";
        this.node.getChildByName("CardBG").active = false;
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_PlayerSelfCloseUpPoker: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ba935R9d3hNTpYNGKUDNjE1", "DDZ_PlayerSelfCloseUpPoker");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {},
      onClickClosUpPoker: function onClickClosUpPoker() {
        cc.YL.playerOutPokerArr = [];
        var pokerNode = cc.find("DDZ_UIROOT/MainNode/SelfPlayerPoker/HandPoker");
        if (0 != pokerNode.children.length) {
          var children = pokerNode.children;
          for (var i = 0; i < children.length; i++) children[i].setPositionY(0);
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_PlayerSelfInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b8a6cbH4p5LX5+WkT4wtJea", "DDZ_PlayerSelfInfo");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        playerInfo: null,
        txtAtlas: cc.SpriteAtlas
      },
      onLoad: function onLoad() {
        this.playerInfo = null;
        this.BtnNode = cc.find("DDZ_UIROOT/MainNode/PlayerBtnNode");
      },
      initSelfPlayerNode: function initSelfPlayerNode(data) {
        this.node.active = true;
        this.playerInfo = data;
        this.clearNodeUI();
        this.initNodeUI(data);
      },
      clearNodeUI: function clearNodeUI() {
        this.node.getChildByName("HeadNode").getComponent(cc.Sprite).spriteFrame = null;
        this.showDiZhuIcon(false);
        this.clearRate();
        this.updateOutWord(parseInt(0));
        this.node.getChildByName("ID").getComponent(cc.Label).string = "";
        this.node.getChildByName("NickNameBG").getChildByName("Name").getComponent(cc.Label).string = "";
        this.node.getChildByName("CoinBG").getChildByName("Num").getComponent(cc.Label).string = "";
      },
      initNodeUI: function initNodeUI(data) {
        fun.utils.loadUrlRes(data.headUrl, this.node.getChildByName("HeadNode"));
        this.showDiZhuIcon(false);
        this.node.getChildByName("ID").getComponent(cc.Label).string = data.userId;
        this.node.getChildByName("NickNameBG").getChildByName("Name").getComponent(cc.Label).string = data.nickName;
        this.node.getChildByName("CoinBG").getChildByName("Num").getComponent(cc.Label).string = data.coin;
        this.node.getChildByName("Rate").active = false;
        4 == cc.YL.DDZDeskInfo.status && -1 != data.isJiaoFen && this.updateOutWord(parseInt(data.isJiaoFen + 3));
        1 == data.isJiaBei && this.showRate(true);
        0 != data.isJiaBei && 5 == cc.YL.DDZDeskInfo.status && (1 == data.isJiaBei ? this.updateOutWord(2) : this.updateOutWord(13));
        5 != cc.YL.DDZDeskInfo.status && 6 != cc.YL.DDZDeskInfo.status || cc.YL.loaderID != cc.YL.DDZselfPlayerInfo.userId || this.showDiZhuIcon(true);
        this.hideOffline();
        true === data.isBreak && this.showOffline();
      },
      showOffline: function showOffline() {
        this.node.getChildByName("OfflineNode").active = true;
      },
      hideOffline: function hideOffline() {
        this.node.getChildByName("OfflineNode").active = false;
      },
      showAndHideReady: function showAndHideReady(isReady) {
        this.BtnNode.getChildByName("DDZ_Ready") && (this.BtnNode.getChildByName("DDZ_Ready").active = !isReady);
        this.node.getChildByName("Word").active = true == isReady;
      },
      showDiZhuIcon: function showDiZhuIcon(isDiZhu) {
        this.isDiZhu = isDiZhu;
        this.node.getChildByName("DiZhuIcon").active = this.isDiZhu;
      },
      onClickPlayerInfo: function onClickPlayerInfo() {
        cc.YL.DDZAudio.playBtnClick();
        cc.find("DDZ_UIROOT/MainNode").getComponent("DDZ_Main").initPlayerInfoNode(this.playerInfo, 1);
      },
      showRate: function showRate(active) {
        this.node.getChildByName("Rate").active = active;
      },
      clearRate: function clearRate() {
        this.node.getChildByName("Rate").active = false;
      },
      updateOutWord: function updateOutWord(strType) {
        var fileNameArr = [ "", "dz_zt000", "dz_zt00", "dz_zt0", "dz_zt1", "dz_zt2", "dz_zt3", "", "", "dz_zt4", "", "", "dz_zt5", "dz_zt7" ];
        var atlas = this.txtAtlas;
        if (0 == strType) this.node.getChildByName("ShowWord").active = false; else {
          this.node.getChildByName("ShowWord").active = true;
          this.node.getChildByName("ShowWord").getComponent(cc.Sprite).spriteFrame = atlas.getSpriteFrame(fileNameArr[strType]);
        }
      },
      showHeadAnimation: function showHeadAnimation(isShow) {
        this.node.getChildByName("HeadAnim").getComponent(sp.Skeleton).animation = "animation";
        this.node.getChildByName("HeadAnim").active = isShow;
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_PlayerSelfOutPoker: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a38e9Uw5M1FlI6e5QtbWW1P", "DDZ_PlayerSelfOutPoker");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        outCards: [],
        pokerPre: cc.Prefab
      },
      start: function start() {},
      initOutPoker: function initOutPoker(outcardlist, type) {
        if (outcardlist) {
          this.outCards = outcardlist;
          this.clearOutPoker();
          this.node.setScale(.58);
          this.updateOutCard(outcardlist, type);
        }
      },
      clearOutPoker: function clearOutPoker() {
        this.node.removeAllChildren();
      },
      _sortPokerArrObj: function _sortPokerArrObj(arr) {
        return arr.sort(function(a, b) {
          return a.Num - b.Num;
        });
      },
      updateOutCard: function updateOutCard(outcardlist, type) {
        switch (type) {
         case 1:
         case 2:
         case 3:
          var temp = [];
          for (var i = 0; i < outcardlist.length; i++) {
            var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]);
            temp.push(pokerObj);
          }
          temp = this._sortPokerArrObj(temp);
          this.showPokerNode(temp, 0);
          break;

         case 4:
         case 5:
          var temp_1 = [];
          var temp_2 = [];
          for (var i = 0; i < outcardlist.length; i++) {
            var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]);
            pokerObj.Num == cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[0]).Num ? temp_1.push(pokerObj) : temp_2.push(pokerObj);
          }
          temp_1 = this._sortPokerArrObj(temp_1);
          temp_2 = this._sortPokerArrObj(temp_2);
          outcardlist = 3 == temp_1.length ? temp_1.concat(temp_2) : temp_2.concat(temp_1);
          this.showPokerNode(outcardlist, 0);
          break;

         case 6:
         case 7:
          var temp = [];
          for (var i = 0; i < outcardlist.length; i++) {
            var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]);
            temp.push(pokerObj);
          }
          temp = this._sortPokerArrObj(temp);
          temp.reverse();
          this.showPokerNode(temp, 1);
          break;

         case 8:
          var temp = [];
          for (var i = 0; i < outcardlist.length; i++) {
            var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]);
            temp.push(pokerObj);
          }
          temp = this._sortPokerArrObj(temp);
          this.showPokerNode(temp, 2);
          break;

         case 9:
         case 10:
          var temp_1 = [];
          var temp_2 = [];
          for (var i = 0; i < outcardlist.length; i++) {
            var times = 0;
            for (var j = 0; j < outcardlist.length; j++) cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]).Num == cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[j]).Num && times++;
            3 == times ? temp_1.push(cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i])) : temp_2.push(cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]));
          }
          temp_1 = this._sortPokerArrObj(temp_1);
          temp_2 = this._sortPokerArrObj(temp_2);
          outcardlist = temp_1.length > temp_2.length ? temp_1.concat(temp_2) : temp_2.concat(temp_1);
          this.showPokerNode(outcardlist, 2);
          break;

         case 13:
          var temp = [];
          for (var i = 0; i < outcardlist.length; i++) {
            var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]);
            temp.push(pokerObj);
          }
          temp = this._sortPokerArrObj(temp);
          this.showPokerNode(temp, 4);
          break;

         case 11:
         case 12:
          var temp_1 = [];
          var temp_2 = [];
          for (var i = 0; i < outcardlist.length; i++) {
            var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]);
            pokerObj.Num == cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[0]).Num ? temp_1.push(cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i])) : temp_2.push(cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]));
          }
          temp_1 = this._sortPokerArrObj(temp_1);
          temp_2 = this._sortPokerArrObj(temp_2);
          outcardlist = 4 == temp_1.length ? temp_1.concat(temp_2) : temp_2.concat(temp_1);
          this.showPokerNode(outcardlist, 0);
          break;

         case 14:
          var temp = [];
          for (var i = 0; i < outcardlist.length; i++) {
            var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(outcardlist[i]);
            temp.push(pokerObj);
          }
          temp = this._sortPokerArrObj(temp);
          this.showPokerNode(temp, 4);
        }
      },
      initPoker: function initPoker(pokerObj) {
        var newNode = cc.instantiate(this.pokerPre);
        newNode.getComponent("DDZ_Poker").initPoker(pokerObj);
        this.node.addChild(newNode);
        return newNode;
      },
      showPokerNode: function showPokerNode(list, animaType) {
        this.node.opacity = 200;
        var startPosX = -25 * (list.length - 1);
        for (var i = 0; i < list.length; i++) {
          var pokerNode = this.initPoker(list[i]);
          var posX = startPosX + 50 * i;
          pokerNode.setPosition(posX, 0);
          pokerNode.setTag(posX);
          0 != animaType && (this.node.active = false);
          i == list.length - 1 ? pokerNode.getChildByName("Front").getChildByName("typeBig").active = true : pokerNode.getChildByName("Front").getChildByName("typeBig").active = false;
          cc.YL.loaderID == cc.YL.DDZselfPlayerInfo.userId && i == list.length - 1 ? pokerNode.getChildByName("OwnerSign").active = true : pokerNode.getChildByName("OwnerSign").active = false;
        }
        this.node.stopAllActions();
        this.node.active = true;
        var finishaFunc = cc.callFunc(function() {
          this.showSpecialAnim(animaType);
        }.bind(this));
        this.node.runAction(cc.sequence(cc.spawn(cc.fadeTo(.2, 255), cc.scaleTo(.2, .9)), cc.scaleTo(.15, .58).easing(cc.easeBackOut()), finishaFunc));
      },
      showSpecialAnim: function showSpecialAnim(animaType) {
        switch (animaType) {
         case 1:
         case 2:
          var childNodeList = this.node.children;
          var startPosX = -25 * (childNodeList.length - 1);
          this.node.active = true;
          for (var i = 0; i < childNodeList.length; i++) {
            childNodeList[i].setPositionX(startPosX);
            childNodeList[i].stopAllActions();
            childNodeList[i].runAction(cc.moveTo(.15 + .02 * i, childNodeList[i].getTag(), 0).easing(cc.easeBackOut()));
          }
          break;

         case 3:
         case 4:
          this.node.setScale(2);
          this.node.stopAllActions();
          this.node.active = true;
          this.node.runAction(cc.scaleTo(.3, .58).easing(cc.easeBackOut()));
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_PlayerSelfPoker: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3959a/y++FL+4743mtmETw6", "DDZ_PlayerSelfPoker");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        selfPlayerHandPoker: [],
        handPokerIDs: [],
        _scale: 1,
        _pokerMargin: 50,
        pokerPrefab: {
          type: cc.Prefab,
          default: null
        }
      },
      onLoad: function onLoad() {
        this._pos = cc.p(30, -250);
        this._cardsList = [];
        this.node.getComponent(cc.Layout).spacingX = this._pokerMargin;
      },
      clearHandPoker: function clearHandPoker() {
        this.node.removeAllChildren();
        this._cardsList = [];
      },
      initHandPoker: function initHandPoker(handPokerListID, isNewFaPai) {
        this.clearHandPoker();
        this.handPokerIDs = handPokerListID;
        this.selfPlayerHandPoker = [];
        handPokerListID = cc.YL.DDZTools.SortPoker(handPokerListID);
        for (var i = 0; i < handPokerListID.length; i++) {
          var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(handPokerListID[i]);
          this.selfPlayerHandPoker.push(pokerObj);
        }
        this.selfPlayerHandPoker = this._sortPokerArrObj(this.selfPlayerHandPoker);
        this.selfPlayerHandPoker.reverse();
        cc.YL.DDZHandPokerList = this.selfPlayerHandPoker;
        this._updateHandPoker(this.selfPlayerHandPoker, isNewFaPai);
        cc.YL.DDZPokerTip.startAnalysis();
      },
      _sortPokerArrObj: function _sortPokerArrObj(selfPlayerHandPoker) {
        return selfPlayerHandPoker.sort(function(a, b) {
          return a.Num - b.Num;
        });
      },
      _updateHandPoker: function _updateHandPoker(pokerList, isNewFaPai) {
        for (var i = 0; i < pokerList.length; i++) {
          var pokerNode = cc.instantiate(this.pokerPrefab);
          pokerNode.getComponent("DDZ_Poker").initPoker(pokerList[i]);
          pokerNode.setScale(this._scale);
          pokerNode.setPositionY(0);
          pokerNode.setTag(i);
          i == pokerList.length - 1 ? pokerNode.getChildByName("Front").getChildByName("typeBig").active = true : pokerNode.getChildByName("Front").getChildByName("typeBig").active = false;
          cc.YL.loaderID == cc.YL.DDZselfPlayerInfo.userId && i == pokerList.length - 1 ? pokerNode.getChildByName("OwnerSign").active = true : pokerNode.getChildByName("OwnerSign").active = false;
          true == isNewFaPai && (pokerNode.active = false);
          this.node.addChild(pokerNode);
          this._cardsList.push(pokerNode);
        }
        this.node.setPosition(cc.p(30, -250));
        true == isNewFaPai ? this.node.parent.getChildByName("HandPokerTouch").active = false : this.setTouchEvent(true);
      },
      setTouchEvent: function setTouchEvent(isTouch) {
        var children = this.node.children;
        for (var i = 0; i < children.length; i++) children[i].setPositionY(0);
        cc.YL.playerOutPokerArr = [];
        if (false == isTouch) {
          this.node.parent.getChildByName("HandPokerTouch").active = false;
          var children = this.node.children;
          for (var i = 0; i < children.length; i++) children[i].getChildByName("Cover").active = true;
        } else {
          var BtnNode = cc.find("DDZ_UIROOT/MainNode/PlayerBtnNode");
          if (BtnNode.getChildByName("DDZ_Pass")) {
            this.node.parent.getChildByName("HandPokerTouch").active = false;
            var children = this.node.children;
            for (var i = 0; i < children.length; i++) children[i].getChildByName("Cover").active = true;
          } else {
            this.node.parent.getChildByName("HandPokerTouch").active = true;
            var children = this.node.children;
            for (var i = 0; i < children.length; i++) children[i].getChildByName("Cover").active = false;
          }
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_PokerTip: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9a5cbwlJbZCbqGdtKg5jl82", "DDZ_PokerTip");
    "use strict";
    var DDZPokerTip = cc.Class({});
    DDZPokerTip.startAnalysis = function() {
      var tempArr = cc.YL.DDZHandPokerList;
      this.handPokerList = [];
      this.handPokerListRever = [];
      this.pokerActionPoint = null;
      for (var i = 0; i < tempArr.length; i++) this.handPokerList.push(tempArr[i].Num);
      for (var i = tempArr.length - 1; i > 0; i--) this.handPokerListRever.push(tempArr[i].Num);
      this.analysis();
    };
    DDZPokerTip.analysis = function() {
      this.single();
      this.double();
      this.three();
      this.four();
      this.rocket();
      this.shunzi();
      this.doubleshunzi();
      this.fly();
    };
    DDZPokerTip.single = function() {
      var tempArr = this.handPokerList;
      this.singleArr = [];
      for (var i = 0; i < tempArr.length; i++) {
        var times = 0;
        for (var j = 0; j < tempArr.length; j++) tempArr[i] == tempArr[j] && times++;
        1 == times && this.singleArr.push(tempArr[i]);
      }
      this.singleArr = this.zipArr(this.singleArr);
      this.singleArr = this.singleArr.reverse();
    };
    DDZPokerTip.double = function() {
      this.doubleArr = [];
      var tempArr = this.handPokerList;
      for (var i = 0; i < tempArr.length; i++) {
        var times = 0;
        for (var j = 0; j < tempArr.length; j++) tempArr[i] == tempArr[j] && times++;
        2 == times && this.doubleArr.push(tempArr[i]);
      }
      this.doubleArr = this.zipArr(this.doubleArr);
      this.doubleArr = this.doubleArr.reverse();
    };
    DDZPokerTip.three = function() {
      this.threeArr = [];
      var tempArr = this.handPokerList;
      for (var i = 0; i < tempArr.length; i++) {
        var times = 0;
        for (var j = 0; j < tempArr.length; j++) tempArr[i] == tempArr[j] && times++;
        3 == times && this.threeArr.push(tempArr[i]);
      }
      this.threeArr = this.zipArr(this.threeArr);
      this.threeArr = this.threeArr.reverse();
    };
    DDZPokerTip.four = function() {
      this.fourArr = [];
      var tempArr = this.handPokerList;
      for (var i = 0; i < tempArr.length; i++) {
        var times = 0;
        for (var j = 0; j < tempArr.length; j++) tempArr[i] == tempArr[j] && times++;
        4 == times && this.fourArr.push(tempArr[i]);
      }
      this.fourArr = this.zipArr(this.fourArr);
      this.fourArr = this.fourArr.reverse();
    };
    DDZPokerTip.rocket = function() {
      this.rocketArr = [];
      var tempArr = this.handPokerList;
      for (var i = 0; i < tempArr.length; i++) 53 != tempArr[i] && 54 != tempArr[i] || this.rocketArr.push(tempArr[i]);
      this.rocketArr = this.zipArr(this.rocketArr);
      this.rocketArr = cc.YL.DDZTools.SortPoker(this.rocketArr);
      2 != this.rocketArr.length && (this.rocketArr = []);
    };
    DDZPokerTip.shunzi = function() {
      this.shunZiArr = [];
      var tempArr = this.zipArr(this.handPokerList);
      tempArr = tempArr.reverse();
      for (var i = 0; i < tempArr.length; i++) for (var j = 4; j < 12; j++) tempArr[i] + j == tempArr[i + j] && i + j <= tempArr.length - 1 && tempArr[i] <= 10 && tempArr[i + j] < 15 && this.shunZiArr.push({
        min: tempArr[i],
        max: tempArr[i + j],
        len: j + 1
      });
    };
    DDZPokerTip.doubleshunzi = function() {
      this.doubleShunZiArr = [];
      var tempArr = this.handPokerList;
      for (var i = 0; i < tempArr.length; i++) {
        var times = 0;
        for (var j = 0; j < tempArr.length; j++) tempArr[i] == tempArr[j] && times++;
        times >= 2 && this.doubleShunZiArr.push(tempArr[i]);
      }
      this.doubleShunZiArr = this.zipArr(this.doubleShunZiArr);
      var newArr = this.doubleShunZiArr;
      this.doubleShunZiArr = [];
      newArr = newArr.reverse();
      for (var i = 0; i < newArr.length; i++) for (var j = 2; j < 10; j++) newArr[i] + j == newArr[i + j] && i + j <= newArr.length - 1 && newArr[i] <= 12 && tempArr[i + j] < 15 && this.doubleShunZiArr.push({
        min: newArr[i],
        max: newArr[i + j],
        len: j + 1
      });
    };
    DDZPokerTip.fly = function() {
      this.flyArr = [];
      var tempArr = this.handPokerList;
      for (var i = 0; i < tempArr.length; i++) {
        var times = 0;
        for (var j = 0; j < tempArr.length; j++) tempArr[i] == tempArr[j] && times++;
        times >= 3 && this.flyArr.push(tempArr[i]);
      }
      this.flyArr = this.zipArr(this.flyArr);
      var newArr = this.flyArr;
      this.flyArr = [];
      newArr = newArr.reverse();
      for (var i = 0; i < newArr.length; i++) for (var j = 1; j < 7; j++) newArr[i] + j == newArr[i + j] && i + j <= newArr.length - 1 && newArr[i] <= 13 && this.flyArr.push({
        min: newArr[i],
        max: newArr[i + j],
        len: j + 1
      });
    };
    DDZPokerTip.zipArr = function(arr) {
      var tempArr = [];
      for (var i = 0; i < arr.length; i++) {
        for (var j = i + 1; j < arr.length; j++) arr[i] == arr[j] && (j = ++i);
        tempArr.push(arr[i]);
      }
      return tempArr;
    };
    DDZPokerTip.findOutCardList = function(list, times) {
      var time_3 = [];
      var time_4 = [];
      for (var i = 0; i < list.length; i++) {
        var time = 0;
        for (var j = 0; j < list.length; j++) list[i] == list[j] && time++;
        3 == time && time_3.push(list[i]);
        4 == time && time_4.push(list[i]);
      }
      time_3 = cc.YL.DDZTools.SortPoker(time_3);
      time_4 = cc.YL.DDZTools.SortPoker(time_4);
      switch (times) {
       case 3:
        return time_3[0];

       case 4:
        return time_4[0];
      }
    };
    DDZPokerTip.PokerAction = function(list) {
      this.initPokerNode();
      var isDone = false;
      for (var i = 0; i < list.length; i++) if (false == isDone) if (null == this.pokerActionPoint) {
        for (var j = 0; j < list[0].Pokers.length; j++) {
          this.upPoker(list[0].Pokers[j]);
          isDone = true;
        }
        this.pokerActionPoint = 1;
      } else if (this.pokerActionPoint < list.length) {
        for (var j = 0; j < list[this.pokerActionPoint].Pokers.length; j++) {
          this.upPoker(list[this.pokerActionPoint].Pokers[j]);
          isDone = true;
        }
        this.pokerActionPoint++;
        this.pokerActionPoint > list.length - 1 && (this.pokerActionPoint = null);
      } else this.pokerActionPoint = null;
    };
    DDZPokerTip.upPoker = function(pokerNum) {
      var pokerRoot = cc.find("DDZ_UIROOT/MainNode/SelfPlayerPoker/HandPoker");
      var times = 0;
      for (var j = 0; j < pokerRoot.children.length; j++) if (pokerNum == pokerRoot.children[j].getComponent("DDZ_Poker").pokerNum && 0 == pokerRoot.children[j].y && 0 == times) {
        pokerRoot.children[j].y = 20;
        cc.YL.playerOutPokerArr.push(pokerRoot.children[j].getComponent("DDZ_Poker").pokerID);
        times++;
      }
    };
    DDZPokerTip.clickTipsBtn = function(type, num, list) {
      this.lastPokerType = type;
      this.lastPokerNum = num;
      this.lastPokerList = cc.YL.DDZTools.SortPoker(list);
      var tempArr = [];
      for (var i = 0; i < this.lastPokerList.length; i++) tempArr.push(cc.YL.cardtypeArrTrans.TransPokertypeArr(this.lastPokerList[i]).Num);
      this.lastPokerList = cc.YL.DDZTools.SortPoker(tempArr);
      this.selfActiveNode = cc.find("DDZ_UIROOT/MainNode/SelfPlayerPoker");
      this.selfHandPokerNode = this.selfActiveNode.getChildByName("HandPoker");
      this.selfHandPokerNodeComp = this.selfHandPokerNode.getComponent("DDZ_PlayerSelfPoker");
      this.selfHandPokerNodeComp.setTouchEvent(true);
      switch (this.lastPokerType) {
       case 13:
        var tipFourCardArr = [];
        for (var i = 0; i < this.fourArr.length; i++) this.fourArr[i] > this.lastPokerList[0] && tipFourCardArr.push({
          Pokers: [ this.fourArr[i], this.fourArr[i], this.fourArr[i], this.fourArr[i] ]
        });
        tipFourCardArr = this.findRocket(tipFourCardArr);
        this.PokerAction(tipFourCardArr);
        break;

       case 12:
        var tipFourAndTowCardArr = [];
        for (var i = 0; i < this.fourArr.length; i++) if (this.fourArr[i] > this.findOutCardList(this.lastPokerList, 4)) {
          var doubleArr = this.findOtherPoker(4, this.fourArr[i]);
          var tempArr = doubleArr.push(this.fourArr[i], this.fourArr[i], this.fourArr[i], this.fourArr[i]);
          8 == tempArr && tipFourAndTowCardArr.push({
            Pokers: doubleArr
          });
        }
        tipFourAndTowCardArr = this.findBoom(tipFourAndTowCardArr);
        tipFourAndTowCardArr = this.findRocket(tipFourAndTowCardArr);
        this.PokerAction(tipFourAndTowCardArr);
        break;

       case 11:
        var tipFourAndTowCardArr = [];
        for (var i = 0; i < this.fourArr.length; i++) if (this.fourArr[i] > this.findOutCardList(this.lastPokerList, 4)) {
          var singleArr = this.findOtherPoker(2, this.fourArr[i]);
          var tempArr = singleArr.push(this.fourArr[i], this.fourArr[i], this.fourArr[i], this.fourArr[i]);
          6 == tempArr && tipFourAndTowCardArr.push({
            Pokers: singleArr
          });
        }
        tipFourAndTowCardArr = this.findBoom(tipFourAndTowCardArr);
        tipFourAndTowCardArr = this.findRocket(tipFourAndTowCardArr);
        this.PokerAction(tipFourAndTowCardArr);
        break;

       case 10:
        var tipFlyWithDoubleCardArr = [];
        for (var i = 0; i < this.flyArr.length; i++) if (this.flyArr[i].min > this.findOutCardList(this.lastPokerList, 3) && 3 * this.flyArr[i].len + 2 * this.flyArr[i].len == this.lastPokerNum) {
          var tempArr = [];
          for (var k = 0; k < this.flyArr[i].len; k++) {
            tempArr.push(this.flyArr[i].min + k);
            tempArr.push(this.flyArr[i].min + k);
            tempArr.push(this.flyArr[i].min + k);
          }
          if (tempArr.length == 3 * this.flyArr[i].len) {
            var doubleArr = this.findOtherPoker(6, this.flyArr[i].min, this.flyArr[i].max, this.flyArr[i].len);
            var newTemp = tempArr.concat(doubleArr);
            newTemp.length == 3 * this.flyArr[i].len + 2 * this.flyArr[i].len && tipFlyWithDoubleCardArr.push({
              Pokers: newTemp
            });
          }
        }
        tipFlyWithDoubleCardArr = this.findBoom(tipFlyWithDoubleCardArr);
        tipFlyWithDoubleCardArr = this.findRocket(tipFlyWithDoubleCardArr);
        this.PokerAction(tipFlyWithDoubleCardArr);
        break;

       case 9:
        var tipFlyWithOneCardArr = [];
        for (var i = 0; i < this.flyArr.length; i++) if (this.flyArr[i].min > this.findOutCardList(this.lastPokerList, 3) && 3 * this.flyArr[i].len + this.flyArr[i].len == this.lastPokerNum) {
          var tempArr = [];
          for (var k = 0; k < this.flyArr[i].len; k++) {
            tempArr.push(this.flyArr[i].min + k);
            tempArr.push(this.flyArr[i].min + k);
            tempArr.push(this.flyArr[i].min + k);
          }
          if (tempArr.length == 3 * this.flyArr[i].len) {
            var singleArr = this.findOtherPoker(5, this.flyArr[i].min, this.flyArr[i].max, this.flyArr[i].len);
            var newTemp = tempArr.concat(singleArr);
            newTemp.length == 3 * this.flyArr[i].len + this.flyArr[i].len && tipFlyWithOneCardArr.push({
              Pokers: newTemp
            });
          }
        }
        tipFlyWithOneCardArr = this.findBoom(tipFlyWithOneCardArr);
        tipFlyWithOneCardArr = this.findRocket(tipFlyWithOneCardArr);
        this.PokerAction(tipFlyWithOneCardArr);
        break;

       case 8:
        var tipFlyCardArr = [];
        for (var i = 0; i < this.flyArr.length; i++) if (this.flyArr[i].min > this.findOutCardList(this.lastPokerList, 3) && this.flyArr[i].len == this.lastPokerNum / 3) {
          var tempArr = [];
          for (var k = 0; k < this.flyArr[i].len; k++) {
            tempArr.push(this.flyArr[i].min + k);
            tempArr.push(this.flyArr[i].min + k);
            tempArr.push(this.flyArr[i].min + k);
          }
          tipFlyCardArr.push({
            Pokers: tempArr
          });
        }
        tipFlyCardArr = this.findBoom(tipFlyCardArr);
        tipFlyCardArr = this.findRocket(tipFlyCardArr);
        this.PokerAction(tipFlyCardArr);
        break;

       case 7:
        var tipDoubleShunziCardArr = [];
        for (var i = 0; i < this.doubleShunZiArr.length; i++) if (this.doubleShunZiArr[i].min > this.lastPokerList[0] && this.doubleShunZiArr[i].len == this.lastPokerNum / 2) {
          var tempArr = [];
          for (var k = 0; k < this.doubleShunZiArr[i].len; k++) {
            tempArr.push(this.doubleShunZiArr[i].min + k);
            tempArr.push(this.doubleShunZiArr[i].min + k);
          }
          tipDoubleShunziCardArr.push({
            Pokers: tempArr
          });
        }
        tipDoubleShunziCardArr = this.findBoom(tipDoubleShunziCardArr);
        tipDoubleShunziCardArr = this.findRocket(tipDoubleShunziCardArr);
        this.PokerAction(tipDoubleShunziCardArr);
        break;

       case 6:
        var tipShunziCardArr = [];
        for (var i = 0; i < this.shunZiArr.length; i++) if (this.shunZiArr[i].min > this.lastPokerList[0] && this.shunZiArr[i].len == this.lastPokerNum) {
          var tempArr = [];
          for (var k = 0; k < this.shunZiArr[i].len; k++) tempArr.push(this.shunZiArr[i].min + k);
          tipShunziCardArr.push({
            Pokers: tempArr
          });
        }
        tipShunziCardArr = this.findBoom(tipShunziCardArr);
        tipShunziCardArr = this.findRocket(tipShunziCardArr);
        this.PokerAction(tipShunziCardArr);
        break;

       case 5:
        var tipThreeAndTwoCardArr = [];
        for (var i = 0; i < this.threeArr.length; i++) if (this.threeArr[i] > this.findOutCardList(this.lastPokerList, 3)) {
          var DoubleNumArr = this.findOtherPoker(3, this.threeArr[i]);
          var OneObj = DoubleNumArr.push(this.threeArr[i], this.threeArr[i], this.threeArr[i]);
          5 == OneObj && tipThreeAndTwoCardArr.push({
            Pokers: DoubleNumArr
          });
        }
        for (var i = 0; i < this.fourArr.length; i++) if (this.fourArr[i] > this.findOutCardList(this.lastPokerList, 3)) {
          var DoubleNumArr = this.findOtherPoker(3, this.fourArr[i]);
          var OneObj = DoubleNumArr.push(this.fourArr[i], this.fourArr[i], this.fourArr[i]);
          5 == OneObj && tipThreeAndTwoCardArr.push({
            Pokers: DoubleNumArr
          });
        }
        tipThreeAndTwoCardArr = this.findBoom(tipThreeAndTwoCardArr);
        tipThreeAndTwoCardArr = this.findRocket(tipThreeAndTwoCardArr);
        this.PokerAction(tipThreeAndTwoCardArr);
        break;

       case 4:
        var tipThreeAndOneCardArr = [];
        for (var i = 0; i < this.threeArr.length; i++) if (this.threeArr[i] > this.findOutCardList(this.lastPokerList, 3)) {
          var singleNumArr = this.findOtherPoker(1, this.threeArr[i]);
          var OneObj = singleNumArr.push(this.threeArr[i], this.threeArr[i], this.threeArr[i]);
          4 == OneObj && tipThreeAndOneCardArr.push({
            Pokers: singleNumArr
          });
        }
        for (var i = 0; i < this.fourArr.length; i++) if (this.fourArr[i] > this.findOutCardList(this.lastPokerList, 3)) {
          var singleNumArr = this.findOtherPoker(1, this.fourArr[i]);
          var OneObj = singleNumArr.push(this.fourArr[i], this.fourArr[i], this.fourArr[i]);
          4 == OneObj && tipThreeAndOneCardArr.push({
            Pokers: singleNumArr
          });
        }
        tipThreeAndOneCardArr = this.findBoom(tipThreeAndOneCardArr);
        tipThreeAndOneCardArr = this.findRocket(tipThreeAndOneCardArr);
        this.PokerAction(tipThreeAndOneCardArr);
        break;

       case 3:
        var tipThreeCardArr = [];
        for (var i = 0; i < this.threeArr.length; i++) this.threeArr[i] > this.lastPokerList[0] && tipThreeCardArr.push({
          Pokers: [ this.threeArr[i], this.threeArr[i], this.threeArr[i] ]
        });
        for (var i = 0; i < this.fourArr.length; i++) this.fourArr[i] > this.lastPokerList[0] && tipThreeCardArr.push({
          Pokers: [ this.fourArr[i], this.fourArr[i], this.fourArr[i] ]
        });
        tipThreeCardArr = this.findBoom(tipThreeCardArr);
        tipThreeCardArr = this.findRocket(tipThreeCardArr);
        this.PokerAction(tipThreeCardArr);
        break;

       case 2:
        var tipDoubleCardArr = [];
        for (var i = 0; i < this.doubleArr.length; i++) this.doubleArr[i] > this.lastPokerList[0] && tipDoubleCardArr.push({
          Pokers: [ this.doubleArr[i], this.doubleArr[i] ]
        });
        for (var i = 0; i < this.threeArr.length; i++) this.threeArr[i] > this.lastPokerList[0] && tipDoubleCardArr.push({
          Pokers: [ this.threeArr[i], this.threeArr[i] ]
        });
        for (var i = 0; i < this.fourArr.length; i++) this.fourArr[i] > this.lastPokerList[0] && tipDoubleCardArr.push({
          Pokers: [ this.fourArr[i], this.fourArr[i] ]
        });
        tipDoubleCardArr = this.findBoom(tipDoubleCardArr);
        tipDoubleCardArr = this.findRocket(tipDoubleCardArr);
        this.PokerAction(tipDoubleCardArr);
        break;

       case 1:
        var tipSingleCardArr = [];
        for (var i = 0; i < this.singleArr.length; i++) this.singleArr[i] > this.lastPokerList[0] && tipSingleCardArr.push({
          Pokers: [ this.singleArr[i] ]
        });
        var double = [];
        var three = [];
        var four = [];
        for (var i = 0; i < this.doubleArr.length; i++) this.doubleArr[i] > this.lastPokerList[0] && double.push({
          Pokers: [ this.doubleArr[i] ]
        });
        for (var i = 0; i < this.threeArr.length; i++) this.threeArr[i] > this.lastPokerList[0] && three.push({
          Pokers: [ this.threeArr[i] ]
        });
        for (var i = 0; i < this.fourArr.length; i++) this.fourArr[i] > this.lastPokerList[0] && four.push({
          Pokers: [ this.fourArr[i] ]
        });
        var tempArr = tipSingleCardArr.concat(double);
        var tempArr_1 = tempArr.concat(three);
        var tempArr_2 = tempArr_1.concat(four);
        tipSingleCardArr = tempArr_2;
        tipSingleCardArr = this.findBoom(tipSingleCardArr);
        tipSingleCardArr = this.findRocket(tipSingleCardArr);
        this.PokerAction(tipSingleCardArr);
        break;

       default:
        cc.YL.err("没有找到对应的牌类型");
      }
    };
    DDZPokerTip.initPokerNode = function() {
      var pokerRoot = cc.find("DDZ_UIROOT/MainNode/SelfPlayerPoker/HandPoker");
      cc.YL.playerOutPokerArr = [];
      for (var i = 0; i < pokerRoot.children.length; i++) pokerRoot.children[i].y = 0;
    };
    DDZPokerTip.findBoom = function(list) {
      for (var i = 0; i < this.fourArr.length; i++) list.push({
        Pokers: [ this.fourArr[i], this.fourArr[i], this.fourArr[i], this.fourArr[i] ]
      });
      return list;
    };
    DDZPokerTip.findRocket = function(list) {
      2 == this.rocketArr.length && list.push({
        Pokers: [ this.rocketArr[0], this.rocketArr[1] ]
      });
      return list;
    };
    DDZPokerTip.findOtherPoker = function(type, notNum_1, notNum_2, len) {
      var list = [];
      switch (type) {
       case 1:
        var times = 0;
        var arr = this.handPokerListRever;
        for (var i = 0; i < arr.length; i++) if (arr[i] != notNum_1 && 0 == times) {
          list.push(arr[i]);
          times++;
        }
        break;

       case 2:
        var times = 0;
        var arr = this.handPokerListRever;
        for (var i = 0; i < arr.length; i++) if (arr[i] != notNum_1 && times < 2) {
          list.push(arr[i]);
          times++;
        }
        break;

       case 3:
        var times = 0;
        var arr = this.ConCatArr();
        for (var i = 0; i < arr.length; i++) if (arr[i] != notNum_1 && 0 == times) {
          list.push(arr[i]);
          list.push(arr[i]);
          times++;
        }
        break;

       case 4:
        var times = 0;
        var arr = this.ConCatArr();
        for (var i = 0; i < arr.length; i++) if (arr[i] != notNum_1 && times < 2) {
          list.push(arr[i]);
          list.push(arr[i]);
          times++;
        }
        break;

       case 5:
        var times = 0;
        var arr = this.handPokerListRever;
        for (var i = 0; i < arr.length; i++) if ((arr[i] < notNum_1 || arr[i] > notNum_2) && times < len) {
          list.push(arr[i]);
          times++;
        }
        break;

       case 6:
        var times = 0;
        var arr = this.ConCatArr();
        for (var i = 0; i < arr.length; i++) if ((arr[i] < notNum_1 || arr[i] > notNum_2) && times < len) {
          list.push(arr[i]);
          list.push(arr[i]);
          times++;
        }
      }
      return list;
    };
    DDZPokerTip.ConCatArr = function() {
      var double = this.doubleArr;
      var three = this.threeArr;
      var four = this.fourArr;
      double = cc.YL.DDZTools.SortPoker(double);
      three = cc.YL.DDZTools.SortPoker(three);
      four = cc.YL.DDZTools.SortPoker(four);
      var tempArr = double.concat(three);
      var tempArr_1 = tempArr.concat(four);
      tempArr_1 = this.zipArr(tempArr_1);
      return tempArr_1;
    };
    cc.YL.DDZPokerTip = DDZPokerTip;
    module.exports = DDZPokerTip;
    cc._RF.pop();
  }, {} ],
  DDZ_PokerTouchEvent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1c1bf6sWEFEl4VGYt4sUj2R", "DDZ_PokerTouchEvent");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {
        this.node.on("touchend", this.onEndTouch.bind(this), this.node);
        this.node.on("touchcancel", this.onCancelTouch.bind(this), this.node);
        this.node.on("touchmove", this.onMoveTouch.bind(this), this.node);
        this.node.on("touchstart", this.onStartTouch.bind(this), this.node);
        this.pokerSourceHeight = 0;
        this.pokerUpHeight = 20;
        this.pokerSpacing = 50;
        this.clickFirstPos = 147.5;
        this.posYMin = 20;
        this.posYMax = 230;
        cc.YL.playerOutPokerArr = [];
      },
      update: function update() {
        this.node.setPosition(this.node.parent.getChildByName("HandPoker").getPosition());
        this.node.width = this.node.parent.getChildByName("HandPoker").width + 150;
        this.node.height = this.node.parent.getChildByName("HandPoker").height + 10;
        this.node.scale = this.node.parent.getChildByName("HandPoker").scale;
      },
      onStartTouch: function onStartTouch(event) {
        this.startTouchPos = event.getStartLocation();
      },
      onCancelTouch: function onCancelTouch(event) {
        this.endTouchPos = event.getLocation();
        this.clickPoker();
      },
      onMoveTouch: function onMoveTouch(event) {
        var moveTouchPos = event.getLocation();
        if (moveTouchPos.y >= this.posYMin && moveTouchPos.y <= this.posYMax) {
          this.moveTouchPos = moveTouchPos;
          if (this.moveTouchPos.y >= this.posYMin && this.moveTouchPos.y <= this.posYMax) {
            var delatX = this.moveTouchPos.x - this.startTouchPos.x;
            var index_1 = this.caculateIndex(this.startTouchPos.x);
            var index_2 = this.caculateIndex(this.moveTouchPos.x);
          }
          if (0 == delatX) {
            var pokerIndex = this.caculateIndex(this.moveTouchPos.x);
            this.node.parent.getChildByName("HandPoker").getChildByTag(pokerIndex).getChildByName("Cover").active = true;
          } else if (delatX > 0) for (var i = index_1; i <= index_2; i++) this.node.parent.getChildByName("HandPoker").getChildByTag(i).getChildByName("Cover").active = true; else if (delatX < 0) for (var i = index_2; i <= index_1; i++) i >= 0 && i < this.node.parent.getChildByName("HandPoker").children.length && (this.node.parent.getChildByName("HandPoker").getChildByTag(i).getChildByName("Cover").active = true);
        }
      },
      onEndTouch: function onEndTouch(event) {
        this.endTouchPos = event.getLocation();
        var childNodeList = this.node.parent.getChildByName("HandPoker").children;
        for (var i = 0; i < childNodeList.length; i++) childNodeList[i].getChildByName("Cover").active = false;
        this.clickPoker();
      },
      clickPoker: function clickPoker() {
        cc.YL.DDZAudio.playCommonBGM(2);
        if (this.endTouchPos.y >= this.posYMin && this.endTouchPos.y <= this.posYMax) {
          var delatX = this.endTouchPos.x - this.startTouchPos.x;
          var index_1 = this.caculateIndex(this.startTouchPos.x);
          var index_2 = this.caculateIndex(this.endTouchPos.x);
        } else {
          var delatX = this.moveTouchPos.x - this.startTouchPos.x;
          var index_1 = this.caculateIndex(this.startTouchPos.x);
          var index_2 = this.caculateIndex(this.moveTouchPos.x);
        }
        if (0 == delatX) {
          var pokerIndex = this.caculateIndex(this.endTouchPos.x);
          this.node.parent.getChildByName("HandPoker").getChildByTag(pokerIndex).y == this.pokerUpHeight ? this.node.parent.getChildByName("HandPoker").getChildByTag(pokerIndex).y = this.pokerSourceHeight : this.node.parent.getChildByName("HandPoker").getChildByTag(pokerIndex).y = this.pokerUpHeight;
        } else if (delatX > 0) for (var i = index_1; i <= index_2; i++) this.node.parent.getChildByName("HandPoker").getChildByTag(i).y == this.pokerUpHeight ? this.node.parent.getChildByName("HandPoker").getChildByTag(i).y = this.pokerSourceHeight : this.node.parent.getChildByName("HandPoker").getChildByTag(i).y = this.pokerUpHeight; else if (delatX < 0) for (var i = index_2; i <= index_1; i++) i >= 0 && i < this.node.parent.getChildByName("HandPoker").children.length && (this.node.parent.getChildByName("HandPoker").getChildByTag(i).y == this.pokerUpHeight ? this.node.parent.getChildByName("HandPoker").getChildByTag(i).y = this.pokerSourceHeight : this.node.parent.getChildByName("HandPoker").getChildByTag(i).y = this.pokerUpHeight);
        var childNodeList = this.node.parent.getChildByName("HandPoker").children;
        for (var i = 0; i < childNodeList.length; i++) childNodeList[i].getChildByName("Cover").active = false;
        cc.YL.info("重制手牌节点的cover为false");
        cc.YL.playerOutPokerArr = [];
        var children = this.node.parent.getChildByName("HandPoker").children;
        for (var i = 0; i < children.length; i++) children[i].y == this.pokerUpHeight && cc.YL.playerOutPokerArr.push(children[i].getComponent("DDZ_Poker").pokerID);
      },
      caculateIndex: function caculateIndex(posX) {
        var childrenLen = this.node.parent.getChildByName("HandPoker").children.length;
        var firstPos = (20 - childrenLen) * (this.pokerSpacing / 2) + this.clickFirstPos;
        var pokerIndex = parseInt((posX - firstPos) / this.pokerSpacing);
        pokerIndex = pokerIndex < this.node.parent.getChildByName("HandPoker").children.length ? pokerIndex : this.node.parent.getChildByName("HandPoker").children.length - 1;
        return pokerIndex;
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_Poker: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0c5c9q5IctLSpuAWCw/LFOx", "DDZ_Poker");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        pokerAtals: cc.SpriteAtlas
      },
      onLoad: function onLoad() {
        this.bindNode();
      },
      bindNode: function bindNode() {
        this._bgNode = this.node.getChildByName("BG");
        this._frontNode = this.node.getChildByName("Front");
        this._ownerSign = this.node.getChildByName("OwnerSign");
        this._cardNum = this.node.getChildByName("CardNum");
      },
      initPoker: function initPoker(object) {
        this.bindNode();
        this.pokerID = object.ID;
        this.pokerTypeArr = object.typeArr;
        this.pokerValue = object.valueArr;
        this.pokerNum = object.Num;
        if ("00" == this.pokerTypeArr) {
          this._frontNode.getChildByName("typeSmall").getComponent(cc.Sprite).spriteFrame = this.pokerAtals.getSpriteFrame(this.pokerValue);
          this._frontNode.getChildByName("typeSmall").setPosition(cc.p(0, 0));
          this._frontNode.getChildByName("typeSmall").width = 154;
          this._frontNode.getChildByName("typeSmall").height = 208;
          this._frontNode.getChildByName("typeSmall").setScale(.9);
          this._frontNode.getChildByName("typeSmall").active = true;
          this._frontNode.getChildByName("typeBig").active = false;
          this._frontNode.getChildByName("Num").active = false;
        } else {
          this._frontNode.getChildByName("typeBig").getComponent(cc.Sprite).spriteFrame = this.pokerAtals.getSpriteFrame(this.pokerTypeArr);
          this._frontNode.getChildByName("typeSmall").getComponent(cc.Sprite).spriteFrame = this.pokerAtals.getSpriteFrame(this.pokerTypeArr);
          this._frontNode.getChildByName("Num").getComponent(cc.Sprite).spriteFrame = this.pokerAtals.getSpriteFrame(this.pokerValue);
          this._frontNode.getChildByName("typeBig").setPosition(10, -47);
          this._frontNode.getChildByName("typeBig").width = 105;
          this._frontNode.getChildByName("typeBig").height = 85;
          this._frontNode.getChildByName("typeBig").setScale(1);
          this._frontNode.getChildByName("typeSmall").setPosition(-43, 26.7);
          this._frontNode.getChildByName("typeSmall").width = 105;
          this._frontNode.getChildByName("typeSmall").height = 85;
          this._frontNode.getChildByName("typeSmall").setScale(.35);
          this._frontNode.getChildByName("Num").setPosition(-43, 72);
          this._frontNode.getChildByName("Num").width = 50;
          this._frontNode.getChildByName("Num").height = 51;
          this._frontNode.getChildByName("Num").setScale(.9);
          this._frontNode.getChildByName("typeBig").active = true;
          this._frontNode.getChildByName("typeSmall").active = true;
          this._frontNode.getChildByName("Num").active = true;
        }
        this._bgNode.active = false;
        this._frontNode.active = true;
        this._ownerSign.active = false;
        this._cardNum.active = false;
      },
      showBG: function showBG() {
        this._bgNode.active = true;
        this._frontNode.active = false;
        this._ownerSign.active = false;
        this._cardNum.active = false;
      },
      showOwner: function showOwner() {
        this._bgNode.active = false;
        this._frontNode.active = true;
        this._ownerSign.active = true;
        this._cardNum.active = false;
      },
      showNum: function showNum(num) {
        this._bgNode.active = true;
        this._frontNode.active = false;
        this._ownerSign.active = false;
        this._cardNum.active = true;
        this._cardNum.getComponent(cc.Label).string = num;
      },
      hide: function hide(type) {
        if (type) {
          var nodeArr = [ this._bgNode, this._frontNode, this._ownerSign, this._cardNum ];
          nodeArr[type].active = false;
        } else {
          this._bgNode.active = false;
          this._frontNode.active = false;
          this._ownerSign.active = false;
          this._cardNum.active = false;
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_PopWin: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6b99a7I0X5JzaqzhA4CZe7b", "DDZ_PopWin");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {},
      initPopStr: function initPopStr(str, type) {
        this.type = type;
        this.node.getChildByName("back").getChildByName("name").getComponent(cc.Label).string = str;
      },
      onClickConfire: function onClickConfire(event) {
        cc.YL.DDZAudio.playBtnClick();
        if (1 == this.type) {
          this.node.active = false;
          this.node.destroy();
        } else if (2 == this.type) {
          cc.director.loadScene("hall");
          fun.db.setData("RoomInfo", {
            GameType: 0
          });
          event.target.active = false;
        } else this.node.active = false;
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_Ready: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "87859eCKxBO4p3gPk81YXHV", "DDZ_Ready");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {},
      onClickReady: function onClickReady() {
        cc.YL.DDZAudio.playBtnClick();
        fun.net.send("PID_READY_REQ", {
          userId: fun.db.getData("UserInfo").UserId
        });
      },
      onClickShare: function onClickShare() {
        cc.YL.DDZAudio.playBtnClick();
        var payTypeArr = [ "", "平均支付", "冠军支付", "房主支付" ];
        var ruleList = [ payTypeArr[cc.YL.DDZDeskInfo.roomInfo.payMode], "封顶:" + cc.YL.DDZDeskInfo.roomInfo.boomLimit ];
        cc.YL.DDZDeskInfo.roomInfo.canSanDaiDui ? ruleList.push("可三带一对") : "";
        cc.YL.DDZDeskInfo.roomInfo.canSiDaiDui ? ruleList.push("可四带两对") : "";
        cc.YL.DDZDeskInfo.roomInfo.canDouble ? ruleList.push("可加倍") : "";
        for (var i = 0; i < ruleList.length; i++) var content = ruleList[i] + " ";
        var info = {
          content: content
        };
        info.title = "斗地主-房间号：" + cc.YL.DDZDeskInfo.password;
        require("JSPhoneWeChat").WxShareFriend(info);
      }
    });
    cc._RF.pop();
  }, {
    JSPhoneWeChat: "JSPhoneWeChat"
  } ],
  DDZ_ReplayMain: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e83d6+zmkNDoLBCAuSyMvZP", "DDZ_ReplayMain");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        PokerPrefab: cc.Prefab,
        oneGameOverNode: cc.Prefab
      },
      onLoad: function onLoad() {
        fun.event.dispatch("Zhuanquan", false);
        this.replayList = [];
        if (cc.YL.DDZReplayData) for (var i = 0; i < cc.YL.DDZReplayData.length; i++) {
          var item = JSON.parse(fun.base64.decode(cc.YL.DDZReplayData[i].Data));
          this.replayList.push(item);
        }
        if (2 == this.replayList.length) {
          this.initUIByFirstData(this.replayList[0]);
          this.showOneGameOver(this.replayList[1]);
          this.listPoint = 1;
        } else {
          this.initUIByFirstData(this.replayList[0]);
          this.listPoint = 0;
        }
      },
      onDestroy: function onDestroy() {
        cc.YL.DDZReplayData = null;
        cc.YL.DDZselfPlayerInfo = null;
        cc.YL.DDZleftPlayerInfo = null;
        cc.YL.DDZrightPlayerInfo = null;
        this.unschedule(this._playList);
      },
      _sortPlayerInfo: function _sortPlayerInfo(arr) {
        return arr.sort(function(a, b) {
          return a.index - b.index;
        });
      },
      initRuleInfo: function initRuleInfo(data) {
        var payTypeArr = [ "", "平均支付", "冠军支付", "房主支付" ];
        var ruleList = [ payTypeArr[data.payMode], "封顶:" + data.boomLimit ];
        data.canSanDaiDui ? ruleList.push("可三带一对") : null;
        data.canSiDaiDui ? ruleList.push("可四带两对") : null;
        data.canDouble ? ruleList.push("可加倍") : null;
        for (var i = 0; i < ruleList.length; i++) {
          var num = parseInt(i + 1);
          var ruleInfoNode = cc.find("DDZ_Replay/ReplayNode/RuleInfo/BG");
          ruleInfoNode.getChildByName("R" + num).getComponent(cc.Label).string = ruleList[i].toString();
        }
      },
      initUIByFirstData: function initUIByFirstData(data) {
        this.initDeskInfo(data.deskInfo);
        data.deskInfo.roomInfo && this.initRuleInfo(data.deskInfo.roomInfo);
        var playerInfoList = data.playersInfo;
        playerInfoList = this._sortPlayerInfo(playerInfoList);
        for (var i = 0; i < playerInfoList.length; i++) if (fun.db.getData("UserInfo").UserId == playerInfoList[i].userId) {
          this.initSelfInfo(playerInfoList[i]);
          if (0 == i) {
            this.initRightInfo(playerInfoList[1]);
            this.initLeftInfo(playerInfoList[2]);
          } else if (1 == i) {
            this.initRightInfo(playerInfoList[2]);
            this.initLeftInfo(playerInfoList[0]);
          } else if (2 == i) {
            this.initRightInfo(playerInfoList[0]);
            this.initLeftInfo(playerInfoList[1]);
          }
        }
      },
      initDeskInfo: function initDeskInfo(deskInfo) {
        this.node.getChildByName("BtnNode").getChildByName("RoomInfo").getChildByName("RoomNum").getComponent(cc.Label).string = "房号: " + deskInfo.password + "  " + deskInfo.currentRound + "/" + deskInfo.totalRound + "局";
        this.initDIPai(deskInfo.diPais, deskInfo.diFen);
      },
      initDIPai: function initDIPai(dipais, difen) {
        this.node.getChildByName("BtnNode").getChildByName("GameInfo").getChildByName("Difen").getChildByName("Num").getComponent(cc.Label).string = difen;
        var diPaiNode = this.node.getChildByName("BtnNode").getChildByName("DiPaiNode");
        dipais = cc.YL.DDZTools.SortPoker(dipais);
        for (var i = 0; i < dipais.length; i++) {
          var pokerNode = cc.instantiate(this.PokerPrefab);
          var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(dipais[i]);
          diPaiNode.addChild(pokerNode);
          var posArr = [ cc.p(-41, 0), cc.p(0, 0), cc.p(41, 0) ];
          pokerNode.setPosition(posArr[i]);
          pokerNode.setScale(.25);
          pokerNode.getComponent("DDZ_Poker").initPoker(pokerObj);
        }
      },
      initSelfInfo: function initSelfInfo(msg) {
        var selfNode = this.node.getChildByName("SelfPlayerInfo");
        this.selfID = msg.userId;
        this.initPlayerNode(selfNode, msg);
        this.initSelfHandPoker(msg.handPokers, msg.isDiZhu);
        this.selfIsDiZhu = msg.isDiZhu;
        cc.YL.DDZselfPlayerInfo = {
          headUrl: msg.headUrl,
          nickName: msg.nickName,
          userId: msg.userId
        };
      },
      initLeftInfo: function initLeftInfo(msg) {
        var leftNode = this.node.getChildByName("LeftPlayerInfo");
        this.leftID = msg.userId;
        this.initPlayerNode(leftNode, msg);
        this.initLeftHandPoker(msg.handPokers, msg.isDiZhu);
        this.leftIsDiZhu = msg.isDiZhu;
        cc.YL.DDZleftPlayerInfo = {
          headUrl: msg.headUrl,
          nickName: msg.nickName,
          userId: msg.userId
        };
      },
      initRightInfo: function initRightInfo(msg) {
        var rightNode = this.node.getChildByName("RightPlayerInfo");
        this.rightID = msg.userId;
        this.initPlayerNode(rightNode, msg);
        this.initRightHandPoker(msg.handPokers, msg.isDiZhu);
        this.rightIsDiZhu = msg.isDiZhu;
        cc.YL.DDZrightPlayerInfo = {
          headUrl: msg.headUrl,
          nickName: msg.nickName,
          userId: msg.userId
        };
      },
      initPlayerNode: function initPlayerNode(node, msg) {
        node.getChildByName("ID").getComponent(cc.Label).string = msg.userId;
        node.getChildByName("Name").getComponent(cc.Label).string = msg.nickName;
        node.getChildByName("Num").getComponent(cc.Label).string = msg.score;
        fun.utils.loadUrlRes(msg.headUrl, node.getChildByName("HeadNode"));
        true == msg.isJiaBei && (node.getChildByName("Rate").active = true);
        true == msg.isDiZhu && (node.getChildByName("DiZhuIcon").active = true);
      },
      initUIBySecondData: function initUIBySecondData(data) {
        for (var i = 0; i < data.playersInfo.length; i++) if (data.playersInfo[i].userId == this.selfID) {
          this.node.getChildByName("BtnNode").getChildByName("GameInfo").getChildByName("Beishu").getChildByName("Num").getComponent(cc.Label).string = data.playersInfo[i].rate;
          this.initSelfOutPoker(data.playersInfo[i].outPais, data.playersInfo[i].handPokersCount, data.playersInfo[i].isPass);
        } else data.playersInfo[i].userId == this.rightID ? this.initRightOutPoker(data.playersInfo[i].outPais, data.playersInfo[i].handPokersCount, data.playersInfo[i].isPass) : data.playersInfo[i].userId == this.leftID && this.initLeftOutPoker(data.playersInfo[i].outPais, data.playersInfo[i].handPokersCount, data.playersInfo[i].isPass);
      },
      initSelfHandPoker: function initSelfHandPoker(list, isDiZhu) {
        this.node.getChildByName("SelfPlayerPoker").getChildByName("HandPoker").removeAllChildren();
        this.selfhandPokerIDs = list;
        this.selfPlayerHandPoker = [];
        this.selfhandPokerIDs = cc.YL.DDZTools.SortPoker(this.selfhandPokerIDs);
        for (var i = 0; i < this.selfhandPokerIDs.length; i++) {
          var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(this.selfhandPokerIDs[i]);
          this.selfPlayerHandPoker.push(pokerObj);
        }
        this.selfPlayerHandPoker = this._sortPokerArrObj(this.selfPlayerHandPoker);
        this.selfPlayerHandPoker.reverse();
        for (var i = 0; i < this.selfPlayerHandPoker.length; i++) {
          var pokerNode = cc.instantiate(this.PokerPrefab);
          pokerNode.getComponent("DDZ_Poker").initPoker(this.selfPlayerHandPoker[i]);
          pokerNode.setScale(1);
          pokerNode.setPositionY(0);
          pokerNode.setTag(i);
          i == this.selfPlayerHandPoker.length - 1 ? pokerNode.getChildByName("Front").getChildByName("typeBig").active = true : pokerNode.getChildByName("Front").getChildByName("typeBig").active = false;
          true == isDiZhu && i == this.selfPlayerHandPoker.length - 1 ? pokerNode.getChildByName("OwnerSign").active = true : pokerNode.getChildByName("OwnerSign").active = false;
          this.node.getChildByName("SelfPlayerPoker").getChildByName("HandPoker").addChild(pokerNode);
        }
      },
      initLeftHandPoker: function initLeftHandPoker(list, isDiZhu) {
        this.node.getChildByName("LeftPlayerPoker").getChildByName("HandPoker").removeAllChildren();
        this.lefthandPokerIDs = list;
        this.leftPlayerHandPoker = [];
        this.lefthandPokerIDs = cc.YL.DDZTools.SortPoker(this.lefthandPokerIDs);
        for (var i = 0; i < this.lefthandPokerIDs.length; i++) {
          var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(this.lefthandPokerIDs[i]);
          this.leftPlayerHandPoker.push(pokerObj);
        }
        this.leftPlayerHandPoker = this._sortPokerArrObj(this.leftPlayerHandPoker);
        this.leftPlayerHandPoker.reverse();
        this.node.getChildByName("LeftPlayerPoker").getChildByName("Num").getComponent(cc.Label).string = this.leftPlayerHandPoker.length;
        for (var i = 0; i < this.leftPlayerHandPoker.length; i++) {
          var pokerNode = cc.instantiate(this.PokerPrefab);
          pokerNode.getComponent("DDZ_Poker").initPoker(this.leftPlayerHandPoker[i]);
          pokerNode.setScale(1);
          pokerNode.setPositionY(0);
          pokerNode.setTag(i);
          pokerNode.setPositionX(100 + 50 * i);
          this.node.getChildByName("LeftPlayerPoker").getChildByName("HandPoker").width = 200 + 50 * i;
          i == this.leftPlayerHandPoker.length - 1 ? pokerNode.getChildByName("Front").getChildByName("typeBig").active = true : pokerNode.getChildByName("Front").getChildByName("typeBig").active = false;
          true == isDiZhu && i == this.leftPlayerHandPoker.length - 1 ? pokerNode.getChildByName("OwnerSign").active = true : pokerNode.getChildByName("OwnerSign").active = false;
          this.node.getChildByName("LeftPlayerPoker").getChildByName("HandPoker").addChild(pokerNode);
        }
      },
      initRightHandPoker: function initRightHandPoker(list, isDiZhu) {
        this.node.getChildByName("RightPlayerPoker").getChildByName("HandPoker").removeAllChildren();
        this.righthandPokerIDs = list;
        this.rightPlayerHandPoker = [];
        this.righthandPokerIDs = cc.YL.DDZTools.SortPoker(this.righthandPokerIDs);
        for (var i = 0; i < this.righthandPokerIDs.length; i++) {
          var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(this.righthandPokerIDs[i]);
          this.rightPlayerHandPoker.push(pokerObj);
        }
        this.rightPlayerHandPoker = this._sortPokerArrObj(this.rightPlayerHandPoker);
        this.node.getChildByName("RightPlayerPoker").getChildByName("Num").getComponent(cc.Label).string = this.rightPlayerHandPoker.length;
        for (var i = 0; i < this.rightPlayerHandPoker.length; i++) {
          var pokerNode = cc.instantiate(this.PokerPrefab);
          pokerNode.getComponent("DDZ_Poker").initPoker(this.rightPlayerHandPoker[i]);
          pokerNode.setScale(1);
          pokerNode.setPositionY(0);
          pokerNode.setTag(i);
          pokerNode.setPositionX(-100 - 50 * i);
          pokerNode.zIndex = this.rightPlayerHandPoker.length - i;
          this.node.getChildByName("RightPlayerPoker").getChildByName("HandPoker").width = 200 + 50 * i;
          pokerNode.getChildByName("Front").getChildByName("typeBig").active = 0 == i;
          pokerNode.getChildByName("OwnerSign").active = true == isDiZhu && 0 == i;
          this.node.getChildByName("RightPlayerPoker").getChildByName("HandPoker").addChild(pokerNode);
        }
      },
      initSelfOutPoker: function initSelfOutPoker(list, num, isPass) {
        if (list) {
          var fatherNode = this.node.getChildByName("SelfPlayerPoker").getChildByName("OutPoker");
          fatherNode.removeAllChildren();
          this.node.getChildByName("SelfPlayerPoker").getChildByName("word").active = false;
          for (var j = 0; j < list.length; j++) for (var i = 0; i < this.selfhandPokerIDs.length; i++) if (list[j] == this.selfhandPokerIDs[i]) {
            this.selfhandPokerIDs.splice(i, 1);
            break;
          }
          this.initSelfHandPoker(this.selfhandPokerIDs, this.selfIsDiZhu);
          var temp = [];
          for (var i = 0; i < list.length; i++) {
            var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(list[i]);
            temp.push(pokerObj);
          }
          temp = this._sortPokerArrObj(temp);
          temp = temp.reverse();
          var startPosX = -25 * (temp.length - 1);
          for (var i = 0; i < temp.length; i++) {
            var pokerNode = this.initPoker(temp[i]);
            fatherNode.addChild(pokerNode);
            var posX = startPosX + 50 * i;
            pokerNode.setPosition(posX, 0);
            pokerNode.setTag(posX);
            i == temp.length - 1 ? pokerNode.getChildByName("Front").getChildByName("typeBig").active = true : pokerNode.getChildByName("Front").getChildByName("typeBig").active = false;
            true == this.selfIsDiZhu && i == temp.length - 1 ? pokerNode.getChildByName("OwnerSign").active = true : pokerNode.getChildByName("OwnerSign").active = false;
          }
        } else if (true == isPass) {
          var fatherNode = this.node.getChildByName("SelfPlayerPoker").getChildByName("OutPoker");
          fatherNode.removeAllChildren();
          this.node.getChildByName("SelfPlayerPoker").getChildByName("word").active = false;
          setTimeout(function() {
            this.node.getChildByName("SelfPlayerPoker").getChildByName("word").active = true;
          }.bind(this), 100);
        }
      },
      initLeftOutPoker: function initLeftOutPoker(list, num, isPass) {
        this.node.getChildByName("LeftPlayerPoker").getChildByName("Num").getComponent(cc.Label).string = num;
        if (list) {
          var fatherNode = this.node.getChildByName("LeftPlayerPoker").getChildByName("OutPoker");
          fatherNode.removeAllChildren();
          this.node.getChildByName("LeftPlayerPoker").getChildByName("word").active = false;
          for (var j = 0; j < list.length; j++) for (var i = 0; i < this.lefthandPokerIDs.length; i++) if (list[j] == this.lefthandPokerIDs[i]) {
            this.lefthandPokerIDs.splice(i, 1);
            break;
          }
          this.initLeftHandPoker(this.lefthandPokerIDs, this.leftIsDiZhu);
          var temp = [];
          for (var i = 0; i < list.length; i++) {
            var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(list[i]);
            temp.push(pokerObj);
          }
          temp = this._sortPokerArrObj(temp);
          temp = temp.reverse();
          for (var i = 0; i < temp.length; i++) {
            var pokerNode = this.initPoker(temp[i]);
            fatherNode.addChild(pokerNode);
            var posX = 50 * i;
            pokerNode.setPosition(posX, 0);
            pokerNode.setTag(posX);
            i == temp.length - 1 ? pokerNode.getChildByName("Front").getChildByName("typeBig").active = true : pokerNode.getChildByName("Front").getChildByName("typeBig").active = false;
            true == this.leftIsDiZhu && i == temp.length - 1 ? pokerNode.getChildByName("OwnerSign").active = true : pokerNode.getChildByName("OwnerSign").active = false;
          }
        } else if (true == isPass) {
          var fatherNode = this.node.getChildByName("LeftPlayerPoker").getChildByName("OutPoker");
          fatherNode.removeAllChildren();
          this.node.getChildByName("LeftPlayerPoker").getChildByName("word").active = false;
          setTimeout(function() {
            this.node.getChildByName("LeftPlayerPoker").getChildByName("word").active = true;
          }.bind(this), 100);
        }
      },
      initRightOutPoker: function initRightOutPoker(list, num, isPass) {
        this.node.getChildByName("RightPlayerPoker").getChildByName("Num").getComponent(cc.Label).string = num;
        if (list) {
          var fatherNode = this.node.getChildByName("RightPlayerPoker").getChildByName("OutPoker");
          fatherNode.removeAllChildren();
          this.node.getChildByName("RightPlayerPoker").getChildByName("word").active = false;
          for (var j = 0; j < list.length; j++) for (var i = 0; i < this.righthandPokerIDs.length; i++) if (list[j] == this.righthandPokerIDs[i]) {
            this.righthandPokerIDs.splice(i, 1);
            break;
          }
          this.initRightHandPoker(this.righthandPokerIDs, this.rightIsDiZhu);
          var temp = [];
          for (var i = 0; i < list.length; i++) {
            var pokerObj = cc.YL.cardtypeArrTrans.TransPokertypeArr(list[i]);
            temp.push(pokerObj);
          }
          temp = this._sortPokerArrObj(temp);
          for (var i = 0; i < temp.length; i++) {
            var pokerNode = this.initPoker(temp[i]);
            fatherNode.addChild(pokerNode);
            var posX = -50 * i;
            pokerNode.setPosition(posX, 0);
            pokerNode.zIndex = temp.length - i;
            pokerNode.setTag(posX);
            pokerNode.getChildByName("Front").getChildByName("typeBig").active = 0 == i;
            true == this.rightIsDiZhu && 0 == i ? pokerNode.getChildByName("OwnerSign").active = true : pokerNode.getChildByName("OwnerSign").active = false;
          }
        } else if (true == isPass) {
          var fatherNode = this.node.getChildByName("RightPlayerPoker").getChildByName("OutPoker");
          fatherNode.removeAllChildren();
          this.node.getChildByName("RightPlayerPoker").getChildByName("word").active = false;
          setTimeout(function() {
            this.node.getChildByName("RightPlayerPoker").getChildByName("word").active = true;
          }.bind(this), 100);
        }
      },
      initPoker: function initPoker(pokerObj) {
        var newNode = cc.instantiate(this.PokerPrefab);
        newNode.getComponent("DDZ_Poker").initPoker(pokerObj);
        return newNode;
      },
      _sortPokerArrObj: function _sortPokerArrObj(arr) {
        return arr.sort(function(a, b) {
          return a.Num - b.Num;
        });
      },
      _playList: function _playList() {
        if (this.listPoint == this.replayList.length - 2) {
          this.unschedule(this._playList);
          this.showOneGameOver(this.replayList[this.replayList.length - 1]);
        } else this.initUIBySecondData(this.replayList[this.listPoint + 1]);
        this.listPoint++;
      },
      sechudlePlay: function sechudlePlay() {
        this.schedule(this._playList, this.playTime);
      },
      showOneGameOver: function showOneGameOver(data) {
        var oneGameOverNode = this.node.getChildByName("DDZ_OneGameOver") ? this.node.getChildByName("DDZ_OneGameOver") : cc.instantiate(this.oneGameOverNode);
        this.node.getChildByName("DDZ_OneGameOver") ? this.node.getChildByName("DDZ_OneGameOver").active = true : this.node.addChild(oneGameOverNode, 100);
        oneGameOverNode.getComponent("DDZ_OneGameOver").initNodeForSimple(data, true);
      },
      onClickLeave: function onClickLeave(event) {
        this.unschedule(this._playList);
        event.target.active = false;
        cc.director.loadScene("hall");
      },
      onStopClick: function onStopClick() {
        this.unschedule(this._playList);
        this.node.getChildByName("BtnNode").getChildByName("Stop").active = false;
        this.node.getChildByName("BtnNode").getChildByName("Play").active = true;
      },
      onPlayClick: function onPlayClick() {
        if (this.replayList.length > 2) {
          this.playTime = 1;
          this.sechudlePlay();
          this.node.getChildByName("BtnNode").getChildByName("Stop").active = true;
          this.node.getChildByName("BtnNode").getChildByName("Play").active = false;
        }
      },
      onDoublePlayClick: function onDoublePlayClick() {
        var rateLab = cc.find("DDZ_Replay/ReplayNode/BtnNode/Rate");
        if (1 == this.playTime) {
          this.playTime = .5;
          rateLab.getComponent(cc.Label).string = "X2";
        } else if (.5 == this.playTime) {
          this.playTime = .25;
          rateLab.getComponent(cc.Label).string = "X4";
        } else if (.25 == this.playTime) {
          this.playTime = 1;
          rateLab.getComponent(cc.Label).string = "X1";
        }
        this.unschedule(this._playList);
        this.schedule(this._playList, this.playTime);
      },
      onClickRule: function onClickRule(event) {
        cc.YL.log("规则按钮");
        var ruleInfoNode = cc.find("DDZ_Replay/ReplayNode/RuleInfo/BG");
        ruleInfoNode.parent.stopAllActions();
        ruleInfoNode.parent.setPosition(-1334, 0);
        ruleInfoNode.parent.runAction(cc.moveTo(.1, cc.p(0, 0)));
        event.target.active = false;
      },
      onClickCloseRule: function onClickCloseRule() {
        var ruleInfoNode = cc.find("DDZ_Replay/ReplayNode/RuleInfo/BG");
        cc.find("DDZ_Replay/ReplayNode/BtnNode/Rule").active = true;
        ruleInfoNode.parent.stopAllActions();
        ruleInfoNode.parent.setPosition(0, 0);
        ruleInfoNode.parent.runAction(cc.moveTo(.1, cc.p(-1334, 0)));
      }
    });
    cc._RF.pop();
  }, {} ],
  DDZ_Setting: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7eb68hp3VhFXYoroY2M316w", "DDZ_Setting");
    "use strict";
    var Audio = require("Audio");
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {
        var bg = this.node.getChildByName("back");
        this.soundToggle = bg.getChildByName("soundToggle").getComponent(cc.Toggle);
        this.soundProgress = bg.getChildByName("soundProgress").getComponent(cc.ProgressBar);
        this.soundSlider = bg.getChildByName("soundSlider");
        0 === fun.gameCfg.soundValume ? this.soundToggle.isChecked = false : this.soundToggle.isChecked = true;
        var progressBar = JSON.parse(cc.sys.localStorage.getItem("progressBar"));
        var s = fun.gameCfg.soundValume;
        this._soundProgress = progressBar && progressBar.sound ? progressBar.sound : s;
        this.soundProgress.progress = this._soundProgress;
        this.soundSlider.getComponent(cc.Slider).progress = this._soundProgress;
        this.soundSlider.on("slide", this.onSoundSliderSlide, this);
        this.musicToggle = bg.getChildByName("musicToggle").getComponent(cc.Toggle);
        this.musicProgress = bg.getChildByName("musicProgress").getComponent(cc.ProgressBar);
        this.musicSlider = bg.getChildByName("musicSlider");
        0 === fun.gameCfg.musicValume ? this.musicToggle.isChecked = false : this.musicToggle.isChecked = true;
        var m = fun.gameCfg.musicValume;
        this._musicProgress = progressBar && progressBar.music ? progressBar.music : m;
        this.musicProgress.progress = this._musicProgress;
        this.musicSlider.getComponent(cc.Slider).progress = this._musicProgress;
        this.musicSlider.on("slide", this.onMusicSliderSlide, this);
        bg.getChildByName("btnClose").on("click", this.onBtnCloseClick, this);
        this.animation = this.node.getComponent(cc.Animation);
        this.clips = this.animation.getClips();
      },
      onEnable: function onEnable() {
        this.animation.play(this.clips[0].name);
      },
      onSoundSliderSlide: function onSoundSliderSlide(event) {
        this.soundProgress.progress = event.detail.progress;
        fun.gameCfg.soundValume = event.detail.progress;
        this._soundProgress = fun.gameCfg.soundValume;
        0 === this._soundProgress ? this.soundToggle.isChecked = false : this.soundToggle.isChecked = true;
      },
      onMusicSliderSlide: function onMusicSliderSlide(event) {
        this.musicProgress.progress = event.detail.progress;
        fun.gameCfg.musicValume = event.detail.progress;
        this._musicProgress = fun.gameCfg.musicValume;
        0 === this._musicProgress ? this.musicToggle.isChecked = false : this.musicToggle.isChecked = true;
      },
      onSoundToggleClicked: function onSoundToggleClicked() {
        true == this.soundToggle.isChecked && (this._soundProgress = .5);
        this._soundVolum = this.soundToggle.isChecked ? this._soundProgress : 0;
        fun.gameCfg.soundValume = this._soundVolum;
        this.soundProgress.progress = this._soundVolum;
        this._soundProgress = fun.gameCfg.soundValume;
        this.soundSlider.getComponent(cc.Slider).progress = this._soundProgress;
      },
      onMusicToggleClicked: function onMusicToggleClicked() {
        true == this.musicToggle.isChecked && (this._musicProgress = .5);
        this._musicVolum = this.musicToggle.isChecked ? this._musicProgress : 0;
        fun.gameCfg.musicValume = this._musicVolum;
        this.musicProgress.progress = this._musicVolum;
        this._musicProgress = this._musicVolum;
        this.musicSlider.getComponent(cc.Slider).progress = this._musicProgress;
      },
      onBtnCloseClick: function onBtnCloseClick() {
        Audio.playEffect("hall", "button_close.mp3");
        false == this.soundToggle.isChecked && (this._soundProgress = 0);
        false == this.musicToggle.isChecked && (this._musicProgress = 0);
        fun.gameCfg.musicValume = this._musicProgress;
        fun.gameCfg.soundValume = this._soundProgress;
        var valumeData = JSON.stringify({
          sound: fun.gameCfg.soundValume,
          music: fun.gameCfg.musicValume
        });
        cc.sys.localStorage.setItem("valumeData", valumeData);
        var progressBar = JSON.stringify({
          sound: this._soundProgress,
          music: this._musicProgress
        });
        cc.sys.localStorage.setItem("progressBar", progressBar);
        this.animation.play(this.clips[1].name).once("finished", function() {
          this.node.destroy();
        }, this);
        cc.YL.DDZAudio.playBGM();
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio"
  } ],
  DDZ_Sound: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "12dfeItydlEObeEgOaTxwrh", "DDZ_Sound");
    "use strict";
    var DDZ_Audio = cc.Class({});
    DDZ_Audio.bindPath = function() {
      this._manPath = "res/raw-assets/resources/poker/DDZ/Audio/Man/";
      this._womanPath = "res/raw-assets/resources/poker/DDZ/Audio/Woman/";
      this._commonPath = "res/raw-assets/resources/poker/DDZ/Audio/Common/";
    };
    DDZ_Audio.playerOutSound = function(data) {
      this.bindPath();
      var soundPath = null;
      var typePath = [ "", "s_", "dui_", "sanbudai", "sandaiyi", "sandaidui", "shunzi", "liandui", "feiji", "feiji", "feiji", "sidaidui", "sidaier", "zadan", "wangza" ];
      var numStr = "";
      1 != data.outType && 2 != data.outType || (numStr = cc.YL.cardtypeArrTrans.TransPokertypeArr(data.paiIds[0]).Num);
      var playArr = [ typePath[data.outType] + numStr, "daguo_1", "daguo_2", "daguo_3" ];
      fun.db.getData("UserInfo").UserId == data.retMsg.userId && (soundPath = 1 == cc.YL.DDZselfPlayerInfo.sex ? this._manPath + playArr[0] : this._womanPath + playArr[0]);
      cc.YL.DDZrightPlayerInfo && data.retMsg.userId == cc.YL.DDZrightPlayerInfo.userId && (soundPath = 1 == cc.YL.DDZselfPlayerInfo.sex ? this._manPath + playArr[0] : this._womanPath + playArr[0]);
      cc.YL.DDZleftPlayerInfo && data.retMsg.userId == cc.YL.DDZleftPlayerInfo.userId && (soundPath = 1 == cc.YL.DDZselfPlayerInfo.sex ? this._manPath + playArr[0] : this._womanPath + playArr[0]);
      soundPath && this.playE(soundPath + ".mp3");
    };
    DDZ_Audio.playSpecialEffect = function(userId, str) {
      this.bindPath();
      var soundPath = null;
      fun.db.getData("UserInfo").UserId == userId && (soundPath = 1 == cc.YL.DDZselfPlayerInfo.sex ? this._manPath + str : this._womanPath + str);
      cc.YL.DDZrightPlayerInfo && userId == cc.YL.DDZrightPlayerInfo.userId && (soundPath = 1 == cc.YL.DDZrightPlayerInfo.sex ? this._manPath + str : this._womanPath + str);
      cc.YL.DDZleftPlayerInfo && userId == cc.YL.DDZleftPlayerInfo.userId && (soundPath = 1 == cc.YL.DDZleftPlayerInfo.sex ? this._manPath + str : this._womanPath + str);
      soundPath && this.playE(soundPath + ".mp3");
    };
    DDZ_Audio.playPass = function(userId) {
      this.bindPath();
      var soundPath = null;
      fun.db.getData("UserInfo").UserId == userId && (soundPath = 1 == cc.YL.DDZselfPlayerInfo.sex ? this._manPath + "pass_" + this.rangeInt(1, 3) : this._womanPath + "pass_" + this.rangeInt(1, 3));
      cc.YL.DDZrightPlayerInfo && userId == cc.YL.DDZrightPlayerInfo.userId && (soundPath = 1 == cc.YL.DDZrightPlayerInfo.sex ? this._manPath + "pass_" + this.rangeInt(1, 3) : this._womanPath + "pass_" + this.rangeInt(1, 3));
      cc.YL.DDZleftPlayerInfo && userId == cc.YL.DDZleftPlayerInfo.userId && (soundPath = 1 == cc.YL.DDZleftPlayerInfo.sex ? this._manPath + "pass_" + this.rangeInt(1, 3) : this._womanPath + "pass_" + this.rangeInt(1, 3));
      soundPath && this.playE(soundPath + ".mp3");
    };
    DDZ_Audio.playWaring = function(userId, num) {
      this.bindPath();
      var soundPath = null;
      fun.db.getData("UserInfo").UserId == userId && (soundPath = 1 == cc.YL.DDZselfPlayerInfo.sex ? this._manPath + "last_" + num : this._womanPath + "last_" + num);
      cc.YL.DDZrightPlayerInfo && userId == cc.YL.DDZrightPlayerInfo.userId && (soundPath = 1 == cc.YL.DDZrightPlayerInfo.sex ? this._manPath + "last_" + num : this._womanPath + "last_" + num);
      cc.YL.DDZleftPlayerInfo && userId == cc.YL.DDZleftPlayerInfo.userId && (soundPath = 1 == cc.YL.DDZleftPlayerInfo.sex ? this._manPath + "last_" + num : this._womanPath + "last_" + num);
      soundPath && this.playE(soundPath + ".mp3");
    };
    DDZ_Audio.rangeInt = function(start, end) {
      return Math.floor(Math.random() * (end - start + 1) + start);
    };
    DDZ_Audio.playBtnClick = function() {
      this.playE("res/raw-assets/resources/hall/audio/sound/button_nomal.mp3");
    };
    DDZ_Audio.playBtnClose = function() {
      this.playE("res/raw-assets/resources/hall/audio/sound/button_close.mp3");
    };
    DDZ_Audio.playMsgMusic = function(userId, index) {
      this.bindPath();
      var soundPath = null;
      var pathName = "";
      if (fun.db.getData("UserInfo").UserId == userId) {
        pathName = index >= 10 ? "male_talk0" : "male_talk00";
        soundPath = 1 == cc.YL.DDZselfPlayerInfo.sex ? this._manPath + pathName + index : this._womanPath + pathName + index;
      }
      if (cc.YL.DDZrightPlayerInfo && userId == cc.YL.DDZrightPlayerInfo.userId) {
        pathName = index >= 10 ? "male_talk0" : "male_talk00";
        soundPath = 1 == cc.YL.DDZrightPlayerInfo.sex ? this._manPath + pathName + index : this._womanPath + pathName + index;
      }
      if (cc.YL.DDZleftPlayerInfo && userId == cc.YL.DDZleftPlayerInfo.userId) {
        pathName = index >= 10 ? "male_talk0" : "male_talk00";
        soundPath = 1 == cc.YL.DDZleftPlayerInfo.sex ? this._manPath + pathName + index : this._womanPath + pathName + index;
      }
      soundPath && this.playE(soundPath + ".mp3");
    };
    DDZ_Audio.playCommonBGM = function(type) {
      this.bindPath();
      var typeArr = [ "Bomb", "Chuntian", "SelectCard", "Special_star", "alert", "plane", "wang_Bomb" ];
      this.playE(this._commonPath + typeArr[type] + ".mp3");
    };
    DDZ_Audio.playFaPai = function() {
      this.playE("res/raw-assets/resources/poker/audio/sound/fapai.mp3");
    };
    DDZ_Audio.playE = function(str) {
      var data = cc.sys.localStorage.getItem("valumeData");
      if (data) {
        var soundData = JSON.parse(data);
        this.effect = str;
        if (0 == soundData.sound) cc.audioEngine.stop(this.effect); else {
          cc.audioEngine.play(this.effect);
          cc.audioEngine.setVolume(this.effect, soundData.sound);
        }
      } else {
        var valumeData = JSON.stringify({
          sound: .1,
          music: .1
        });
        cc.sys.localStorage.setItem("valumeData", valumeData);
        cc.audioEngine.play(str);
      }
    };
    DDZ_Audio.playBGM = function() {
      var data = cc.sys.localStorage.getItem("valumeData");
      var rootNode = cc.find("DDZ_UIROOT/MainNode");
      if (data) {
        var soundData = JSON.parse(data);
        if (0 == soundData.music) rootNode.getComponent(cc.AudioSource).mute = true; else if (soundData.music == this.musicV) {
          rootNode.getComponent(cc.AudioSource).volume = soundData.music;
          this.musicV = soundData.music;
          rootNode.getComponent(cc.AudioSource).mute = false;
        } else {
          rootNode.getComponent(cc.AudioSource).volume = soundData.music;
          this.musicV = soundData.music;
          rootNode.getComponent(cc.AudioSource).mute = false;
          rootNode.getComponent(cc.AudioSource).play();
        }
      } else {
        var valumeData = JSON.stringify({
          sound: .1,
          music: .1
        });
        cc.sys.localStorage.setItem("valumeData", valumeData);
        rootNode.getComponent(cc.AudioSource).volume = .1;
        rootNode.getComponent(cc.AudioSource).mute = false;
        rootNode.getComponent(cc.AudioSource).play();
      }
    };
    module.exports = DDZ_Audio;
    cc.YL.DDZAudio = DDZ_Audio;
    cc._RF.pop();
  }, {} ],
  DDZ_Tools: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9b06bCKi7VGjb7R7I5SRWt6", "DDZ_Tools");
    "use strict";
    var DDZTools = cc.Class({});
    DDZTools.SortPoker = function(arr) {
      return arr.sort(function(a, b) {
        return a - b;
      });
    };
    module.exports = DDZTools;
    cc.YL.DDZTools = DDZTools;
    cc._RF.pop();
  }, {} ],
  GameCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7d53dpPcHtJkbKqCPGpAYSA", "GameCfg");
    "use strict";
    var _gameTypeSceneNameMap, _gameTypeZhNameMap;
    function _defineProperty(obj, key, value) {
      key in obj ? Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      }) : obj[key] = value;
      return obj;
    }
    var version = "version:2.1.0.7315";
    var logLevel = cc.Enum({
      none: 0,
      error: 1,
      warn: 2,
      info: 3,
      verbose: 4,
      debug: 5,
      silly: 6
    });
    var logTags = {
      net: logLevel.info,
      funEvent: logLevel.info,
      funDB: logLevel.info,
      funUtils: logLevel.info,
      login: logLevel.info,
      hotUpdate: logLevel.info,
      hall: logLevel.verbose,
      mj: logLevel.verbose
    };
    var forceUpdateUrl = cc.Enum({
      android: "http://download.game2me.net/",
      ios: "https://itunes.apple.com/cn/app/id1261810679?mt=8"
    });
    var commonUrl = cc.Enum({
      timeLimitCard: "http://download.game2me.net/sharePage/index.html"
    });
    var loginUrl = [ "ws://192.168.1.77:9999/ws", "ws://am.fmgames.cn:29990/ws", "ws://yuchuan.fmgames.cn:9901/ws", "ws://sh.fmgames.cn:9901/ws", "ws://208.185.128.235:9901/ws" ];
    var loginUrlType = cc.Enum({
      intranet: 0,
      extranet: 1,
      fisher: 2,
      apple: 3,
      test: 4
    });
    var loginType = cc.Enum({
      weChat: 0,
      guest: 1,
      ID: 2
    });
    var gameName = cc.Enum({
      hall: 0,
      mahjong: 1,
      poker: 2,
      digFlower: 3
    });
    var voiceLanguage = cc.Enum({
      mandarin: 0,
      huangYan: 1
    });
    var gameType = cc.Enum({
      universal: 0,
      maJiangWenLing: 1,
      sanGong: 2,
      maJiangHuangYan: 3,
      niuNiu: 4,
      digFlower: 5,
      DDZ: 6,
      scMahjong: 7
    });
    var gameTypeSceneNameMap = (_gameTypeSceneNameMap = {}, _defineProperty(_gameTypeSceneNameMap, gameType.maJiangHuangYan, "majiang"), 
    _defineProperty(_gameTypeSceneNameMap, gameType.maJiangWenLing, "majiang"), _defineProperty(_gameTypeSceneNameMap, gameType.sanGong, "puke"), 
    _defineProperty(_gameTypeSceneNameMap, gameType.niuNiu, "puke"), _defineProperty(_gameTypeSceneNameMap, gameType.digFlower, "wahua"), 
    _defineProperty(_gameTypeSceneNameMap, gameType.DDZ, "DouDiZhu"), _defineProperty(_gameTypeSceneNameMap, gameType.scMahjong, "majiang"), 
    _gameTypeSceneNameMap);
    var gameTypeZhNameMap = (_gameTypeZhNameMap = {}, _defineProperty(_gameTypeZhNameMap, gameType.maJiangHuangYan, "黄岩麻将"), 
    _defineProperty(_gameTypeZhNameMap, gameType.maJiangWenLing, "温岭麻将"), _defineProperty(_gameTypeZhNameMap, gameType.sanGong, "三公"), 
    _defineProperty(_gameTypeZhNameMap, gameType.niuNiu, "牛牛"), _defineProperty(_gameTypeZhNameMap, gameType.digFlower, "温岭挖花"), 
    _defineProperty(_gameTypeZhNameMap, gameType.DDZ, "斗地主"), _defineProperty(_gameTypeZhNameMap, gameType.scMahjong, "四川麻将"), 
    _gameTypeZhNameMap);
    var wltest = {
      logUrl: "ws://192.168.1.89:6868/websocket",
      loginType: loginType.guest,
      logLevel: logLevel.verbose,
      enableAutoLogin: false,
      logSaveDay: 3,
      enableUpdate: false,
      voiceLanguage: voiceLanguage.mandarin,
      soundValume: .8,
      musicValume: .8
    };
    var compileType = cc.Enum({
      custom: 0,
      wltest: 1
    });
    var compileContent = [ {}, wltest ];
    var releaseName = [ "normal", "apple", "release", "fisher" ];
    var releaseType = cc.Enum({
      normal: 0,
      apple: 1,
      release: 2,
      fisher: 3
    });
    var itemCsv = cc.Enum({
      huangYan: 1,
      wenLing: 2,
      voucher: 3
    });
    var pRetCode = {
      1: "服务器忙",
      2: "非法游戏类型",
      3: "登录失败",
      4: "使用第三方登录",
      5: "非法第三方平台",
      6: "重复登录",
      7: "非法认证名",
      8: "非法认证号",
      9: "认证失败",
      10: "服务未开启",
      11: "服务停止",
      12: "非法房间号",
      13: "房间未找到",
      14: "已在房间中",
      15: "已在另一个房间中"
    };
    module.exports = {
      version: version,
      logLevel: logLevel,
      forceUpdateUrl: forceUpdateUrl,
      commonUrl: commonUrl,
      logTags: logTags,
      loginUrl: loginUrl,
      loginUrlType: loginUrlType,
      loginType: loginType,
      gameName: gameName,
      voiceLanguage: voiceLanguage,
      gameType: gameType,
      gameTypeSceneNameMap: gameTypeSceneNameMap,
      gameTypeZhNameMap: gameTypeZhNameMap,
      compileType: compileType,
      compileContent: compileContent,
      releaseName: releaseName,
      releaseType: releaseType,
      pRetCode: pRetCode,
      itemCsv: itemCsv
    };
    cc._RF.pop();
  }, {} ],
  JSPhoneBaiDu: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bd7c935Gr9E9aIFR6RNhBcn", "JSPhoneBaiDu");
    "use strict";
    var className = "org/cocos2dx/javascript/AppActivity";
    var baiDu = {
      getBaiDuLocation: function getBaiDuLocation() {
        cc.sys.os === cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod(className, "getBaiDuLocation", "()V") : cc.sys.os === cc.sys.OS_IOS && jsb.reflection.callStaticMethod("OCPhoneBaiDu", "getBaiDuLocation");
      },
      reBaiDuLocation: function reBaiDuLocation(lat, lng, locdesc) {
        console.log("---* JS reBaiDuLocation *---");
        console.log("latitude:  " + lat);
        console.log("longitude: " + lng);
        console.log("locdesc:   " + locdesc);
        if (0 === parseInt(lat) && 0 === parseInt(lng)) return;
        var userInfo = fun.db.getData("UserInfo");
        userInfo.location = {
          lat: lat,
          lng: lng,
          locdesc: locdesc
        };
        fun.db.setData("UserInfo", userInfo);
      },
      getDistanceByPoints: function getDistanceByPoints(points) {
        var fD = function fD(a, b, c) {
          for (;a > c; ) a -= c - b;
          for (;a < b; ) a += c - b;
          return a;
        };
        var jD = function jD(a, b, c) {
          null != b && (a = Math.max(a, b));
          null != c && (a = Math.min(a, c));
          return a;
        };
        var yk = function yk(a) {
          return Math.PI * a / 180;
        };
        var Ce = function Ce(a, b, c, d) {
          var dO = 6370996.81;
          return dO * Math.acos(Math.sin(c) * Math.sin(d) + Math.cos(c) * Math.cos(d) * Math.cos(b - a));
        };
        var getDistance = function getDistance(a, b) {
          if (!a || !b) return 0;
          a.lng = fD(a.lng, -180, 180);
          a.lat = jD(a.lat, -74, 74);
          b.lng = fD(b.lng, -180, 180);
          b.lat = jD(b.lat, -74, 74);
          return Ce(yk(a.lng), yk(b.lng), yk(a.lat), yk(b.lat));
        };
        return getDistance(points.p1, points.p2).toFixed(1);
      }
    };
    module.exports = baiDu;
    cc._RF.pop();
  }, {} ],
  JSPhoneDevice: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "44cc5w0FeZAOLLWkPaoB4+I", "JSPhoneDevice");
    "use strict";
    var className = "org/cocos2dx/javascript/AppActivity";
    var ApplePayPrice = [ 6, 18, 50, 128, 298, 618 ];
    var device = {
      getDeviceUUID: function getDeviceUUID() {
        var uuid = void 0;
        cc.sys.os === cc.sys.OS_ANDROID ? uuid = jsb.reflection.callStaticMethod(className, "getDeviceUUID", "()Ljava/lang/String;") : cc.sys.os === cc.sys.OS_IOS && (uuid = jsb.reflection.callStaticMethod("OCPhoneDevice", "getDeviceUUID"));
        console.log("---* js getDeviceUUID *---");
        console.log(uuid);
      },
      ApplePay: function ApplePay(strId) {
        if (cc.sys.os !== cc.sys.OS_IOS) return;
        jsb.reflection.callStaticMethod("OCPhoneDevice", "ApplePay:", strId);
      },
      ReApplePayResult: function ReApplePayResult(result, receipt) {
        console.log("---* js ReApplePayResult *---");
        console.log("result:  " + result);
        console.log("receipt: " + receipt);
        if ("" !== receipt) {
          var applePayStr = JSON.stringify({
            check: true,
            receipt: receipt
          });
          cc.sys.localStorage.setItem("applePayReceiptStr", applePayStr);
        }
        fun.event.dispatch("PhonePayResult", {
          from: "apple",
          result: result,
          receipt: receipt
        });
      }
    };
    module.exports = device;
    cc._RF.pop();
  }, {} ],
  JSPhoneNetBattery: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8591du7QZtENp678nRlptS8", "JSPhoneNetBattery");
    "use strict";
    var className = "org/cocos2dx/javascript/AppActivity";
    var netBattery = {
      getNetBatteryStatus: function getNetBatteryStatus() {
        cc.sys.os === cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod(className, "getNetBatteryStatus", "()V") : cc.sys.os === cc.sys.OS_IOS && jsb.reflection.callStaticMethod("OCPhoneNetBattery", "getNetBatteryStatus");
      },
      reBattery: function reBattery(status, level) {
        console.log("---* js reBattery *---");
        console.log("status: " + status);
        console.log("level:  " + level);
        fun.event.dispatch("PhoneBattery", {
          status: parseInt(status),
          level: parseInt(level)
        });
      },
      reNet: function reNet(status, strength, signal) {
        console.log("---* js reNet *---");
        console.log("status:   " + status);
        console.log("strength: " + strength);
        console.log("signal:   " + signal);
        5 === status && cc.sys.os === cc.sys.OS_IOS && (strength = parseInt(strength) + 1);
        fun.event.dispatch("PhoneNet", {
          status: parseInt(status),
          strength: parseInt(strength),
          signal: parseInt(signal)
        });
      }
    };
    module.exports = netBattery;
    cc._RF.pop();
  }, {} ],
  JSPhoneUmeng: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "afc90G4e95IXbFJOGT1N4Ng", "JSPhoneUmeng");
    "use strict";
    var className = "org/cocos2dx/javascript/AppActivity";
    var umeng = {
      umengAnalytics: function umengAnalytics(info) {
        var strInfo = JSON.stringify(info);
        cc.sys.os === cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod(className, "UmengSDK", "(Ljava/lang/String;)V", strInfo) : cc.sys.os === cc.sys.OS_IOS && jsb.reflection.callStaticMethod("NativeOcClass", "UmengSDK:", strInfo);
      }
    };
    module.exports = umeng;
    cc._RF.pop();
  }, {} ],
  JSPhoneVoice: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cc151LWgchNTrn8yRH8f/md", "JSPhoneVoice");
    "use strict";
    var className = "org/cocos2dx/javascript/AppActivity";
    var voice = {
      startAudio: function startAudio(name) {
        var filepath = cc.path.join(this.getVoicePath(), name);
        cc.sys.os === cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod(className, "startAudio", "(Ljava/lang/String;)V", filepath) : cc.sys.os === cc.sys.OS_IOS && jsb.reflection.callStaticMethod("OCPhoneAudio", "startAudio:", filepath);
      },
      stopAudio: function stopAudio() {
        cc.sys.os === cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod(className, "stopAudio", "()V") : cc.sys.os === cc.sys.OS_IOS && jsb.reflection.callStaticMethod("OCPhoneAudio", "stopAudio");
      },
      playAudio: function playAudio(name) {
        if (!cc.sys.isNative) return;
        var filepath = cc.path.join(this.getVoicePath(), name);
        if (!jsb.fileUtils.isFileExist(filepath + ".mp3")) {
          console.log("---* js. voice file not exist. *---");
          return;
        }
        cc.sys.os === cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod(className, "playAudio", "(Ljava/lang/String;)V", filepath) : cc.sys.os === cc.sys.OS_IOS && jsb.reflection.callStaticMethod("OCPhoneAudio", "playAudio:", filepath);
      },
      getVoiceDataByName: function getVoiceDataByName(name) {
        if (!cc.sys.isNative) return;
        var fileName = cc.path.join(this.getVoicePath(), name + ".mp3");
        if (!jsb.fileUtils.isFileExist(fileName)) {
          console.log("---* js. voice file not exist. *---");
          return null;
        }
        var voiceData = jsb.fileUtils.getDataFromFile(fileName);
        return fun.base64.fromByteArray(voiceData);
      },
      writeVoiceData: function writeVoiceData(data, name) {
        if (!cc.sys.isNative) return;
        var fileName = cc.path.join(this.getVoicePath(), name + ".mp3");
        var voiceData = fun.base64.toByteArray(data);
        jsb.fileUtils.writeDataToFile(voiceData, fileName);
      },
      getVoicePath: function getVoicePath() {
        if (!cc.sys.isNative) return;
        return cc.path.join(jsb.fileUtils.getWritablePath(), "VoiceChatPath/");
      },
      clearOldVoice: function clearOldVoice() {
        if (!cc.sys.isNative) return;
        var dirpath = cc.path.join(jsb.fileUtils.getWritablePath(), "VoiceChatPath/");
        jsb.fileUtils.isDirectoryExist(dirpath) && jsb.fileUtils.removeDirectory(dirpath);
        jsb.fileUtils.createDirectory(dirpath);
      }
    };
    module.exports = voice;
    cc._RF.pop();
  }, {} ],
  JSPhoneWeChat: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d77ebjCLotCvpAp3NvVMGPr", "JSPhoneWeChat");
    "use strict";
    var className = "org/cocos2dx/javascript/AppActivity";
    var appUrl = "http://download.game2me.net/";
    var wechat = {
      WxAppIsInstalled: function WxAppIsInstalled() {
        var isInstall = true;
        cc.sys.os === cc.sys.OS_IOS && (isInstall = jsb.reflection.callStaticMethod("OCPhoneWeChat", "WxAppIsInstalled"));
        return isInstall;
      },
      WxLogin: function WxLogin(func) {
        this._wxLoginFunc = func;
        cc.sys.os === cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod(className, "WxLogin", "()V") : cc.sys.os === cc.sys.OS_IOS && jsb.reflection.callStaticMethod("OCPhoneWeChat", "WxLogin");
      },
      WxShareFriend: function WxShareFriend(info) {
        info.url = info.url ? info.url : appUrl;
        cc.sys.os === cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod(className, "WxShareFriend", "(Ljava/lang/String;)V", JSON.stringify(info)) : cc.sys.os === cc.sys.OS_IOS && jsb.reflection.callStaticMethod("OCPhoneWeChat", "WxShareFriend:", JSON.stringify(info));
      },
      WxShareCircle: function WxShareCircle() {
        var sharePath = "res/raw-assets/resources/hall/texture/wx_share_circle.jpg";
        var fileData = jsb.fileUtils.getDataFromFile(sharePath);
        var newPath = jsb.fileUtils.getWritablePath() + "wx_share_circle.jpg";
        jsb.fileUtils.writeDataToFile(fileData, newPath);
        cc.sys.os === cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod(className, "WxShareCircle", "(Ljava/lang/String;)V", newPath) : cc.sys.os === cc.sys.OS_IOS && jsb.reflection.callStaticMethod("OCPhoneWeChat", "WxShareCircle:", newPath);
      },
      WxShareFriendScreen: function WxShareFriendScreen() {
        fun.utils.screenShoot(function(filename) {
          cc.sys.os === cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod(className, "WxShareFriendScreen", "(Ljava/lang/String;)V", filename) : cc.sys.os === cc.sys.OS_IOS && jsb.reflection.callStaticMethod("OCPhoneWeChat", "WxShareFriendScreen:", filename);
        });
      },
      WxPay: function WxPay(info) {
        cc.sys.os === cc.sys.OS_ANDROID ? jsb.reflection.callStaticMethod(className, "WxPay", "(Ljava/lang/String;)V", JSON.stringify(info)) : cc.sys.os === cc.sys.OS_IOS && jsb.reflection.callStaticMethod("OCPhoneWeChat", "WxPay:", JSON.stringify(info));
      },
      WxReLogin: function WxReLogin(openid, token) {
        console.log("---* js wxReLogin *---");
        console.log("openid: " + openid);
        console.log("token:  " + token);
        this._wxLoginFunc && (openid && "false" !== openid ? this._wxLoginFunc({
          state: true,
          token: token,
          openid: openid
        }) : this._wxLoginFunc({
          state: false
        }));
      },
      WxReShareResult: function WxReShareResult(result) {
        console.log("---* js WxReShareResult *---");
        console.log("result: " + result);
        fun.event.dispatch("PhoneWeChatShareResult", "0" !== result && result);
      },
      WxRePayResult: function WxRePayResult(result) {
        console.log("---* js WxRePayResult *---");
        console.log("result: " + result);
        fun.event.dispatch("PhonePayResult", {
          from: "wechat",
          result: result
        });
      }
    };
    module.exports = wechat;
    cc._RF.pop();
  }, {} ],
  MessageCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5e2ferte69HkZf0i31hE/0N", "MessageCfg");
    "use strict";
    var MessageCfg = {
      Heartbeat: {
        id: "Heartbeat",
        desc: "心跳",
        req: 101,
        rsp: 201,
        notify: 301
      },
      ServerTime: {
        id: "ServerTime",
        desc: "服务器时间",
        req: 102,
        rsp: 202,
        notify: 302
      },
      ThirdLogin: {
        id: "ThirdLogin",
        desc: "第三方登陆",
        req: 103,
        rsp: 203,
        notify: 303
      },
      TokenLogin: {
        id: "TokenLogin",
        desc: "token登录",
        req: 104,
        rsp: 204,
        notify: 304
      },
      GustLogin: {
        id: "GustLogin",
        desc: "游客登录",
        req: 105,
        rsp: 205,
        notify: 305
      },
      AccountBind: {
        id: "AccountBind",
        desc: "账号绑定(针对游客登录的账号)",
        req: 106,
        rsp: 206,
        notify: 306
      },
      KickOff: {
        id: "KickOff",
        desc: "被踢下线",
        req: 107,
        rsp: 207,
        notify: 307
      },
      Chat: {
        id: "Chat",
        desc: "聊天",
        req: 108,
        rsp: 208,
        notify: 308
      },
      CreateRoom: {
        id: "CreateRoom",
        desc: "创建房间",
        req: 109,
        rsp: 209,
        notify: 309
      },
      EnterRoom: {
        id: "EnterRoom",
        desc: "进入房间",
        req: 110,
        rsp: 210,
        notify: 310
      },
      RoomCard: {
        id: "RoomCard",
        desc: "房卡数量",
        req: 111,
        rsp: 211,
        notify: 311
      },
      OffLine: {
        id: "OffLine",
        desc: "下线",
        req: 112,
        rsp: 212,
        notify: 312
      },
      OnLine: {
        id: "OnLine",
        desc: "上线",
        req: 113,
        rsp: 213,
        notify: 313
      },
      Announce: {
        id: "Announce",
        desc: "公告",
        req: 114,
        rsp: 214,
        notify: 314
      },
      StandingsList: {
        id: "StandingsList",
        desc: "战绩",
        req: 115,
        rsp: 215,
        notify: 315
      },
      StandingBrief: {
        id: "StandingBrief",
        desc: "单个房间总结算",
        req: 116,
        rsp: 216,
        notify: 316
      },
      StandingDetail: {
        id: "StandingDetail",
        desc: "单个房间中每局的结算",
        req: 117,
        rsp: 217,
        notify: 317
      },
      ReplayRecord: {
        id: "ReplayRecord",
        desc: "单局回放",
        req: 118,
        rsp: 218,
        notify: 318
      },
      ShareRecord: {
        id: "ShareRecord",
        desc: "分享战绩",
        req: 119,
        rsp: 219,
        notify: 319
      },
      ReplayRecordByCode: {
        id: "ReplayRecordByCode",
        desc: "通过分享码播放录像",
        req: 120,
        rsp: 220,
        notify: 320
      },
      MailList: {
        id: "MailList",
        desc: "客户端拉取新邮件",
        req: 121,
        rsp: 221,
        notify: 321
      },
      NewMailId: {
        id: "NewMailId",
        desc: "服务端向客户端推送最新邮件id",
        req: 122,
        rsp: 222,
        notify: 322
      },
      NewMail: {
        id: "NewMail",
        desc: "服务端向客户端推送最新邮件",
        req: 123,
        rsp: 223,
        notify: 323
      },
      DelMail: {
        id: "DelMail",
        desc: "删除邮件",
        req: 124,
        rsp: 224,
        notify: 324
      },
      WeChatInfo: {
        id: "WeChatInfo",
        desc: "微信信息",
        req: 125,
        rsp: 225,
        notify: 325
      },
      Certification: {
        id: "Certification",
        desc: "实名认证",
        req: 126,
        rsp: 226,
        notify: 326
      },
      WxPay: {
        id: "WxPay",
        desc: "生成微信支付订单",
        req: 127,
        rsp: 227,
        notify: 327
      },
      AliPay: {
        id: "AliPay",
        desc: "生成阿里支付订单",
        req: 128,
        rsp: 228,
        notify: 328
      },
      ApPay: {
        id: "ApPay",
        desc: "苹果支付",
        req: 129,
        rsp: 229,
        notify: 329
      },
      WxShare: {
        id: "WxShare",
        desc: "微信分享",
        req: 130,
        rsp: 230,
        notify: 330
      },
      ServerError: {
        id: "ServerError",
        desc: "返回服务器错误",
        req: 131,
        rsp: 231,
        notify: 331
      },
      HuoDong: {
        id: "HuoDong",
        desc: "活动",
        req: 132,
        rsp: 232,
        notify: 332
      },
      GoodCnt: {
        id: "GoodCnt",
        desc: "获取物品数量",
        req: 133,
        rsp: 233,
        notify: 333
      },
      ExchgGood: {
        id: "ExchgGood",
        desc: "兑换物品",
        req: 134,
        rsp: 234,
        notify: 334
      },
      TimeCardList: {
        id: "TimeCardList",
        desc: "获取限时卡列表",
        req: 135,
        rsp: 235,
        notify: 335
      },
      ShareTimeCard: {
        id: "ShareTimeCard",
        desc: "分享限时卡",
        req: 136,
        rsp: 236,
        notify: 336
      },
      ReceiveTimeCard: {
        id: "ReceiveTimeCard",
        desc: "领取限时卡",
        req: 137,
        rsp: 237,
        notify: 337
      },
      SharedTimeCardList: {
        id: "SharedTimeCardList",
        desc: "分享的限时卡列表",
        req: 138,
        rsp: 238,
        notify: 338
      }
    };
    module.exports = MessageCfg;
    cc._RF.pop();
  }, {} ],
  NiuNiuCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1047372EMZLcr3yKSV2Usqx", "NiuNiuCfg");
    "use strict";
    var NiuNiuCfg = {
      NiuDisbandRoom: {
        id: "NiuDisbandRoom",
        desc: "解散房间",
        req: 403,
        rsp: 503,
        notify: 603
      },
      NiuReady: {
        id: "NiuReady",
        desc: "准备",
        req: 404,
        rsp: 504,
        notify: 604
      },
      NiuDisbandRoomVote: {
        id: "NiuDisbandRoomVote",
        desc: "申请解散房间",
        req: 406,
        rsp: 506,
        notify: 606
      },
      NiuDisbandRoomResult: {
        id: "NiuDisbandRoomResult",
        desc: "解散房间结果",
        req: 407,
        rsp: 507,
        notify: 607
      },
      NiuQZhuang: {
        id: "NiuQZhuang",
        desc: "抢庄",
        req: 410,
        rsp: 510,
        notify: 610
      },
      NiuYaFen: {
        id: "NiuYaFen",
        desc: "压分",
        req: 411,
        rsp: 511,
        notify: 611
      },
      NiuShowCards: {
        id: "NiuShowCards",
        desc: "自动算牛(亮牌)",
        req: 412,
        rsp: 512,
        notify: 612
      },
      NiuErrCode: {
        id: "NiuErrCode",
        desc: "不做任何操作",
        req: 414,
        rsp: 514,
        notify: 614
      },
      NiuStartGame: {
        id: "NiuStartGame",
        desc: "开始游戏",
        req: 415,
        rsp: 515,
        notify: 615
      },
      NiuSingalAccount: {
        id: "NiuSingalAccount",
        desc: "单局结算",
        req: 416,
        rsp: 516,
        notify: 616
      },
      NiuLeaveRoom: {
        id: "NiuLeaveRoom",
        desc: "离开游戏",
        req: 418,
        rsp: 518,
        notify: 618
      },
      NiuTotalAccount: {
        id: "NiuTotalAccount",
        desc: "总结算",
        req: 419,
        rsp: 519,
        notify: 619
      }
    };
    module.exports = NiuNiuCfg;
    cc._RF.pop();
  }, {} ],
  NiuNiuManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b5b8arOA4NBdbYvRRG0RCtb", "NiuNiuManager");
    "use strict";
    var NiuNiuManager = {};
    var PukeData = require("PukeData");
    var funUtils = require("funUtils");
    var PukeUtils = require("PukeUtils");
    var PukeDefine = require("PukeDefine");
    var Audio = require("Audio");
    NiuNiuManager.initGame = function(gameUICB) {
      this.gameUICB = gameUICB;
      this.UserInfo = fun.db.getData("UserInfo", true);
      this.MineUserId = this.UserInfo.UserId;
      this.MineSeat = this.getSeatByNumber(1);
      this.data = fun.db.getData("RoomInfo");
      this.MineIsMaster = this.getRoomMasterByRoomInfo();
      this._isShowCard = true;
      this._isMineNewUser = "create" === this.data.EnterRoom || this.data.userMap[this.MineUserId].newUser;
      this._checkSpineCacheComplete = {};
      for (var i = 1; i <= 6; ++i) this._checkSpineCacheComplete[i] = false;
      this.initRoomInfo();
      this.initSeatInfo();
      this.initQZhuangFunction();
      this.initListener();
    };
    NiuNiuManager.update = function(dt) {
      if (this.StartChooseZhuang) {
        this.qzDtTime = (this.qzDtTime || 0) + dt;
        var chaTime = PukeDefine.QIANG_ZHUANG_WAIT_TIME - this.DingZhuangTime;
        if (this.qzDtTime >= chaTime) {
          this.gameUICB.setBtnQZhuangActive(false);
          this._isMineNewUser || this.gameUICB.showHint(false);
          this.seatNum = this.QiangZhuangSeat.length;
          var qzPersonNum = 0 === this.seatNum ? this.ZeroZhuangSeat.length : this.seatNum;
          this.TurnZhuangTime = PukeDefine.QIANG_ZHUANG_TURN_TIME / (5 * qzPersonNum);
          this.tzDtSingle = 0;
          this.tzDtMore = 0;
          this.TurnZhuangCount = 0;
          this.TurnZhuang = true;
          this.StartChooseZhuang = false;
          this.qzDtTime = 0;
        }
      }
      if (this.TurnZhuang) if (0 === this.seatNum) {
        this.tzDtSingle += dt;
        if (this.tzDtSingle >= this.TurnZhuangTime) {
          this.tzDtSingle -= this.TurnZhuangTime;
          this.TurnZhuangCount = this.TurnZhuangCount === this.ZeroZhuangSeat.length ? 1 : this.TurnZhuangCount + 1;
          this.setZhuangFalse();
          var seat = this.getSeatByNumber(this.ZeroZhuangSeat[this.TurnZhuangCount - 1]);
          seat.Zhuang.active = true;
        }
      } else if (this.seatNum >= 2) {
        this.tzDtMore += dt;
        if (this.tzDtMore >= this.TurnZhuangTime) {
          this.tzDtMore -= this.TurnZhuangTime;
          this.TurnZhuangCount = this.TurnZhuangCount === this.seatNum ? 1 : this.TurnZhuangCount + 1;
          this.setZhuangFalse();
          var _seat = this.getSeatByNumber(this.QiangZhuangSeat[this.TurnZhuangCount - 1]);
          _seat.Zhuang.active = true;
        }
      }
      for (var i = 1; i <= 6; ++i) if (void 0 !== this._checkSpineCacheComplete && void 0 !== this._checkSpineCacheComplete[i] && this._checkSpineCacheComplete[i] && 6 === this.gameUICB.getSpineCacheComplete().length) {
        this._checkSpineCacheComplete[i] = false;
        this._spineCacheFunc(i);
      }
    };
    NiuNiuManager.onDestroy = function() {
      this.cleanListener();
      this.UserInfo.RoomId = 0;
      fun.db.setData("UserInfo", this.UserInfo);
      this.SeatArray = [];
      this.UserInfo = {};
      this.data = {};
      this.faPaiPukes = [];
      this.faPaiSeats = [];
      this.QiangZhuangSeat = [];
      this.ZeroZhuangSeat = [];
      this._userMap = {};
      this.copyDisbandPrefab = void 0;
      this.copyTotalAccount = void 0;
      this.StartChooseZhuang = false;
      this.TurnZhuang = false;
    };
    NiuNiuManager.updateSeatNumber = function(player) {
      var minePlayer = {};
      if ("enter" === this.data.EnterRoom) for (var id in player) {
        var value = player[id];
        this.checkIsMineUserId(value.userId) && (minePlayer = value);
      } else "create" === this.data.EnterRoom && (minePlayer = {
        sort: 0
      });
      this.SeatArray = new Array();
      for (var i = 0; i < 6; i++) 0 === i ? this.SeatArray[0] = minePlayer.sort : this.SeatArray[i] = "";
      if ("enter" === this.data.EnterRoom) for (var _i in player) {
        var _value = player[_i];
        var cha = Math.abs(minePlayer.sort - _value.sort);
        minePlayer.sort > _value.sort ? this.SeatArray[6 - cha] = _value.sort : minePlayer.sort < _value.sort && (this.SeatArray[cha] = _value.sort);
      }
    };
    NiuNiuManager.getSeatNumberByRoomIdx = function(roomIdx) {
      for (var i = 0; i < this.SeatArray.length; i++) if (this.SeatArray[i] === parseInt(roomIdx)) return i + 1;
      return roomIdx + 1;
    };
    NiuNiuManager.getSeatByNumber = function(num) {
      return this.gameUICB.getSeatByNumber(num);
    };
    NiuNiuManager.getSeatByUserId = function(id) {
      for (var i = 1; i <= 6; i++) {
        var seat = this.getSeatByNumber(i);
        if (parseInt(seat.UserId) === parseInt(id)) return seat;
      }
    };
    NiuNiuManager.getNewPaiIdById = function(id) {
      var addNum = void 0;
      addNum = id <= 13 ? 1 : id > 13 && id <= 26 ? 2 : id > 26 && id <= 39 ? 3 : id > 39 && id <= 52 ? 4 : id;
      var idx = id % 13 === 0 ? 12 : id % 13 - 1;
      var newPaiId = "pai" === addNum ? id : 4 * idx + addNum;
      return newPaiId;
    };
    NiuNiuManager.getPukeSpriteById = function(id) {
      return this.gameUICB.getPukeSpriteById(this.getNewPaiIdById(id));
    };
    NiuNiuManager.cleanSeatData = function() {
      for (var i = 1; i <= 6; i++) {
        var seat = this.getSeatByNumber(i);
        seat.Readying.active = false;
        for (var j = 1; j <= 5; j++) seat["Puke" + j].active = false;
        seat.ShuZi.active = false;
        seat.YaBox.active = false;
        seat.Ying.active = false;
        seat.Shu.active = false;
      }
    };
    NiuNiuManager.pushGold = function(seatNumber, goldNum) {
      this.gameUICB.getGoldsNode().active = true;
      var min = 2, max = 8, divisor = 12;
      for (var j = 0; j < PukeDefine.PUSH_GOLD_NUMBER; j++) {
        var copyGold = this.gameUICB.getFromGoldPool();
        this.gameUICB.getGoldsNode().getChildByName("seat" + seatNumber).addChild(copyGold);
        var startPos = PukeDefine.POSITION.GOLD[seatNumber].START_POS;
        copyGold.setScale(.6);
        copyGold.setPosition(cc.p(startPos.x, startPos.y));
        var time = funUtils.random(min, max) / divisor;
        var endPos = PukeDefine.POSITION.GOLD[seatNumber].END_POS;
        var randPx = endPos.x + funUtils.random(-30, 30);
        var randPy = endPos.y + funUtils.random(-30, 30);
        var distance = PukeUtils.pGetDistance(startPos, cc.p(randPx, randPy));
        var intCen = Math.floor(distance / time);
        copyGold.setLocalZOrder(1e3 - intCen);
        var moveto = cc.moveTo(time, cc.p(randPx, randPy));
        moveto.easing(cc.easeSineInOut());
        copyGold.stopAllActions();
        copyGold.runAction(moveto);
      }
      Audio.playEffect("pork", "gold.wav");
    };
    NiuNiuManager.callInGold = function(msg) {
      this.gameUICB.getGoldsNode().active = true;
      var account = msg.gameOver;
      var self = this;
      var overTime = 0;
      var min = 5, max = 10, min2 = 5, max2 = 10, divisor = 10;
      var zhuangStartPos = void 0;
      if (4 === this.data.roomRule.makersType) zhuangStartPos = {
        x: 0,
        y: 0
      }; else {
        var zhuangSeatNumber = this.getSeatNumberByRoomIdx(this.CurrentZhuang);
        zhuangStartPos = PukeDefine.POSITION.GOLD[zhuangSeatNumber].START_POS;
      }
      for (var i = 1; i <= 6; i++) {
        var seat = this.getSeatByNumber(i);
        if (seat.RoomIdx != this.CurrentZhuang) {
          var goldSeat = this.gameUICB.getGoldsNode().getChildByName("seat" + i);
          if (goldSeat.childrenCount > 0) {
            var _loop = function _loop(_i2) {
              var gold = goldSeat.children[_i2];
              var time = funUtils.random(min, max) / divisor;
              overTime = Math.max(time, overTime);
              var moveto = cc.moveTo(time, cc.p(zhuangStartPos.x, zhuangStartPos.y));
              moveto.easing(cc.easeSineInOut());
              gold.runAction(cc.sequence(moveto, cc.callFunc(function() {
                self.gameUICB.putInGoldPool(gold);
              })));
            };
            for (var _i2 = 0; _i2 < goldSeat.children.length; ++_i2) _loop(_i2);
          }
        }
      }
      Audio.playEffect("pork", "gold.wav");
      if (4 === this.data.roomRule.makersType) {
        this.gameUICB.scheduleOnceFunc(function() {
          for (var id in account) {
            var value = account[id];
            value.score > 0 && function() {
              var winSeat = self.getSeatByUserId(id);
              var goldWinSeat = self.gameUICB.getGoldsNode().getChildByName("seat" + winSeat.SeatNumber);
              var goldStartPos = PukeDefine.POSITION.GOLD[winSeat.SeatNumber].START_POS;
              var maxTime = 0;
              for (var k = 0; k < PukeDefine.PUSH_GOLD_NUMBER; ++k) {
                var _gold = self.gameUICB.getFromGoldPool();
                goldWinSeat.addChild(_gold);
                _gold.setPosition(cc.p(zhuangStartPos.x, zhuangStartPos.y));
                var time = funUtils.random(min2, max2) / divisor;
                maxTime = Math.max(time, maxTime);
                var moveto = cc.moveTo(time, cc.p(goldStartPos.x, goldStartPos.y));
                moveto.easing(cc.easeSineInOut());
                _gold.stopAllActions();
                _gold.runAction(cc.sequence(moveto, cc.callFunc(function() {
                  for (var m = 0; m < goldWinSeat.children.length; ++m) {
                    var _gold2 = goldWinSeat.children[m];
                    self.gameUICB.putInGoldPool(_gold2);
                  }
                })));
              }
              self.gameUICB.scheduleOnceFunc(function() {
                for (var num in goldWinSeat.children) self.gameUICB.putInGoldPool(goldWinSeat.children[num]);
              }, .98 * maxTime);
            }();
          }
          Audio.playEffect("pork", "gold.wav");
          self.onAccountFunc(msg);
        }, overTime);
        return;
      }
      this.gameUICB.scheduleOnceFunc(function() {
        var isZhuangShu = false;
        for (var id in account) {
          var value = account[id];
          if (value.score > 0) {
            var winSeat = self.getSeatByUserId(id);
            winSeat.RoomIdx != self.CurrentZhuang && function() {
              isZhuangShu = true;
              var goldWinSeat = self.gameUICB.getGoldsNode().getChildByName("seat" + winSeat.SeatNumber);
              var goldStartPos = PukeDefine.POSITION.GOLD[winSeat.SeatNumber].START_POS;
              var maxTime = 0;
              for (var k = 0; k < PukeDefine.PUSH_GOLD_NUMBER; ++k) {
                var _gold3 = self.gameUICB.getFromGoldPool();
                goldWinSeat.addChild(_gold3);
                _gold3.setPosition(cc.p(zhuangStartPos.x, zhuangStartPos.y));
                var time = funUtils.random(min2, max2) / divisor;
                maxTime = Math.max(time, maxTime);
                var moveto = cc.moveTo(time, cc.p(goldStartPos.x, goldStartPos.y));
                moveto.easing(cc.easeSineInOut());
                _gold3.stopAllActions();
                _gold3.runAction(cc.sequence(moveto, cc.callFunc(function() {
                  for (var m = 0; m < goldWinSeat.children.length; ++m) {
                    var _gold4 = goldWinSeat.children[m];
                    self.gameUICB.putInGoldPool(_gold4);
                  }
                })));
              }
              self.gameUICB.scheduleOnceFunc(function() {
                self.gameUICB.getGoldsNode().active = false;
                for (var num in goldWinSeat.children) self.gameUICB.putInGoldPool(goldWinSeat.children[num]);
              }, .98 * maxTime);
            }();
          }
        }
        isZhuangShu && Audio.playEffect("pork", "gold.wav");
        self.onAccountFunc(msg);
      }, overTime);
    };
    NiuNiuManager.faPaiAnimation = function(index) {
      Audio.playEffect("pork", "fapai.mp3");
      var self = this;
      if (index >= this.faPaiPukes.length) this.gameUICB.scheduleOnceFunc(function() {
        if (!self._isMineNewUser) {
          self.setState("搓牌中");
          self.gameUICB.setBtnCuoPaiActive(true);
        }
      }, PukeDefine.SEND_CARD_COMPLETE_TIME); else {
        var time = PukeDefine.SEND_CARD_SINGLE_TIME;
        var copyPuke = this.gameUICB.getPukePool().get();
        copyPuke.setPosition(0, 0);
        this.gameUICB.getChildNode().getChildByName("puke").addChild(copyPuke);
        var px = this.faPaiPukes[index].x, py = this.faPaiPukes[index].y;
        var moveto = cc.moveTo(time, cc.p(px, py));
        moveto.easing(cc.easeSineInOut());
        copyPuke.runAction(cc.sequence(moveto, cc.callFunc(function() {
          self.gameUICB.getPukePool().put(copyPuke);
          var count = index % 5 + 1;
          var seat = self.faPaiSeats[Math.floor(index / 5)];
          var seatPuke = seat.getChildByName("puke" + count);
          var type = 1 === seat.SeatNumber ? "MINE" : "OTHER";
          var posx = PukeDefine.POSITION.PUKE.NIU_NIU[count][type].x;
          seatPuke.setPositionX(posx);
          seatPuke.active = true;
          if (seat.UserId === self.MineUserId && 5 != count) {
            var puke = self.faPaiSeats.myCards[count - 1];
            seatPuke.getComponent(cc.Sprite).spriteFrame = self.getPukeSpriteById(puke);
          } else seatPuke.getComponent(cc.Sprite).spriteFrame = self.getPukeSpriteById("pai");
          seatPuke.active = true;
          index += 1;
          self.faPaiAnimation(index);
        })));
      }
    };
    NiuNiuManager.cuoPaiAnimation = function(type, showType) {
      this.gameUICB.setBtnCuoPaiActive(false);
      this.isCuoPaiComplete = false;
      this.copyCuoPai && this.gameUICB.getCuoPaiPool().put(this.copyCuoPai);
      var seat = this.getSeatByNumber(1);
      var pukeCuo = seat.getChildByName("puke5");
      pukeCuo.active = false;
      this.copyCuoPai = this.gameUICB.getCuoPaiPool().get();
      this.copyCuoPai.setPosition(0, 0);
      this.gameUICB.getChildNode().getChildByName("cuopai").addChild(this.copyCuoPai);
      var data = {};
      data.from = type;
      data.GameType = "NIUNIU";
      data.num = this.getNewPaiIdById(this.CuoPaiNumber) + 3;
      data.cb = function() {
        "showCard" != type && fun.net.send("NiuShowCards", {});
        this.isCuoPaiComplete = true;
        pukeCuo.active = true;
        pukeCuo.getComponent(cc.Sprite).spriteFrame = this.getPukeSpriteById(this.CuoPaiNumber);
        this.gameUICB.getCuoPaiPool().put(this.copyCuoPai);
      }.bind(this);
      this.copyCuoPai.getComponent("CuoPai").initPuke(data);
    };
    NiuNiuManager.initQZhuangFunction = function() {
      if (void 0 != this.data && 3 === this.data.roomRule.makersType) {
        this.IsFreeQiangZhuang = true;
        this.QiangZhuangSeat = new Array();
        this.ZeroZhuangSeat = new Array();
        this.TurnZhuang = false;
      }
    };
    NiuNiuManager.resetUserInfo = function(info) {
      var newInfo = {};
      newInfo.HeadUrl = info.imageUrl;
      newInfo.Name = info.userName;
      newInfo.UserId = parseInt(info.userId);
      newInfo.Score = info.totalScore;
      newInfo.RoomIdx = info.sort;
      newInfo.Ip = info.ip;
      newInfo.Sex = info.sex;
      newInfo.Zhu = info.yaFeng || 0;
      newInfo.Ready = 0 !== info.currentState && 3 !== info.currentState;
      newInfo.GamePhase = info.GamePhase;
      newInfo.newUser = info.newUser;
      newInfo.Address = info.Address;
      return newInfo;
    };
    NiuNiuManager.getRoomMasterByRoomInfo = function() {
      var idx = "create" === this.data.EnterRoom ? 0 : this.data.userMap[this.MineUserId].sort;
      return 0 === idx;
    };
    NiuNiuManager.setZhuangFalse = function() {
      for (var i = 0; i < 6; ++i) {
        var seat = this.getSeatByNumber(i + 1);
        seat.Zhuang.active = false;
      }
    };
    NiuNiuManager.checkIsMineUserId = function(id) {
      return parseInt(id) === this.MineUserId;
    };
    NiuNiuManager.setState = function(content) {
      for (var i = 0; i < 6; ++i) {
        var seat = this.getSeatByNumber(i + 1);
        if (seat.active) if (content) {
          var seatNumber = this.getSeatNumberByRoomIdx(this.CurrentZhuang);
          "下注中" === content && seatNumber === i + 1 ? console.log("庄家不下注") : this.gameUICB.setState({
            state: seat.State,
            content: content,
            color: 0
          });
        } else seat.State.active = false;
      }
    };
    NiuNiuManager.initRoomInfo = function() {
      var roomRule = this.data.roomRule;
      var userMap = this.data.userMap;
      this.gameUICB.setGameStatus(roomRule.gamePhase);
      this.RoomId = roomRule.RoomId;
      this.RoundJuShu = roomRule.currentNum;
      this.TotalJuShu = roomRule.roomNum;
      this.DiFen = PukeDefine.ROOM_INFO.DI_FEN[roomRule.bottomScore - 1];
      this.ZhuangWei = PukeDefine.NIUNIU_ROOM_INFO.MASKERS_TYPE[roomRule.makersType - 1];
      this.Charge = PukeDefine.ROOM_INFO.COST[roomRule.reduceCard - 1];
      this.IsMaster = PukeDefine.ROOM_INFO.ISMASTER[this.getRoomMasterByRoomInfo() ? 0 : 1];
      var msg = {
        RoomId: this.RoomId,
        Round: this.RoundJuShu,
        Total: this.TotalJuShu,
        ZhuangWei: this.ZhuangWei,
        DiFen: this.DiFen[0],
        IsMaster: this.IsMaster,
        GamePhase: roomRule.gamePhase
      };
      this.gameUICB.initRoomInfo(msg);
      this.TypeScore = roomRule.typeScore;
      this.KanDou = roomRule.kanDou || 0;
      this.ShunDou = roomRule.shunDou || 0;
      this.WuHua = roomRule.wuHua || 0;
      this.WuXiao = roomRule.wuXiao || 0;
      this.ZhaDan = roomRule.zhaDan || 0;
    };
    NiuNiuManager.initSeatInfo = function() {
      var roomRule = this.data.roomRule;
      var userMap = this.data.userMap;
      this._userMap = {};
      if ("create" === this.data.EnterRoom) {
        this.updateSeatNumber();
        this.gameUICB.setCreateSeat();
        this.RecentYaZhu = 1;
      } else if ("enter" === this.data.EnterRoom) {
        this.updateSeatNumber(userMap);
        for (var id in userMap) {
          var value = userMap[id];
          var seatNumber = this.getSeatNumberByRoomIdx(value.sort);
          var seat = this.getSeatByNumber(seatNumber);
          1 != value.onLine && (seat.Mask.active = true);
          var isMine = this.checkIsMineUserId(id);
          value.GamePhase = roomRule.gamePhase;
          this.gameUICB.setEnterSeat(seatNumber, this.resetUserInfo(value));
          if (value.niuThree && null !== value.niuThree && void 0 !== value.niuThree) {
            if (value.niuThree.length <= 0) return;
            for (var i = 1; i <= 3; ++i) {
              var puke = this.getPukeSpriteById(value.niuThree[i - 1]);
              seat["Puke" + i].getComponent(cc.Sprite).spriteFrame = puke;
              seat["Puke" + i].active = true;
            }
            for (var _i3 = 4; _i3 <= 5; ++_i3) {
              var _puke = this.getPukeSpriteById(value.niuTwo[_i3 - 4]);
              seat["Puke" + _i3].getComponent(cc.Sprite).spriteFrame = _puke;
              seat["Puke" + _i3].active = true;
            }
            this._checkSpineCacheComplete[seat.SeatNumber] = true;
            this._userMap[seat.SeatNumber] = {};
            this._userMap[seat.SeatNumber].value = value;
            this._userMap[seat.SeatNumber].seat = seat;
            this._spineCacheFunc = function(sn) {
              this.showTypeFunc(this._userMap[sn].seat, this._userMap[sn].value);
            }.bind(this);
          } else if (value.alreadyChess && void 0 !== value.alreadyChess) {
            for (var _i4 = 1; _i4 <= 5; ++_i4) {
              var pukeid = isMine ? 5 === _i4 ? "pai" : value.alreadyChess[_i4 - 1] : "pai";
              seat["Puke" + _i4].getComponent(cc.Sprite).spriteFrame = this.getPukeSpriteById(pukeid);
              seat["Puke" + _i4].active = true;
            }
            isMine && (this.CuoPaiNumber = value.alreadyChess[4]);
          }
          isMine && (this.RecentYaZhu = 0 === value.yaFeng || void 0 === value.yaFeng ? 1 : value.yaFeng);
          if (1 === value.zhuang) {
            this.CurrentZhuang = value.sort;
            for (var _i5 = 1; _i5 <= 6; _i5++) {
              var _seat2 = this.getSeatByNumber(_i5);
              if (_seat2.RoomIdx === value.sort) {
                _seat2.Zhuang.active = true;
                _seat2.ZhuangSp.setAnimation(0, "Zhong", false);
              }
            }
          }
        }
      }
    };
    NiuNiuManager.startGameReady = function() {
      this.gameUICB.setBtnInviteActive(false);
      for (var i = 1; i <= 6; i++) {
        var seat = this.getSeatByNumber(i);
        seat.Readying.active = false;
        seat.YaBox.active = false;
      }
    };
    NiuNiuManager.initListener = function() {
      this.ListenCBList = [];
      this.pListenCBList = [];
      var listen = function(cmd, cb, isPingTai) {
        if (isPingTai) {
          fun.net.pListen(cmd, cb);
          this.pListenCBList.push(cmd);
        } else {
          fun.net.listen(cmd, cb);
          this.ListenCBList.push(cmd);
        }
      }.bind(this);
      listen("EnterRoom", this.onEnterRoomAck.bind(this), true);
      listen("OffLine", this.onOffLineAck.bind(this), true);
      listen("NiuReady", this.onReadyNextAck.bind(this));
      listen("NiuQZhuang", this.onQZhuangAck.bind(this));
      listen("NiuYaFen", this.onSomeOneYaZhuAck.bind(this));
      listen("NiuStartGame", this.onStartGameAck.bind(this));
      listen("NiuShowCards", this.onShowCardAck.bind(this));
      listen("NiuSingalAccount", this.onSingalAccountAck.bind(this));
      listen("NiuTotalAccount", this.onTotalAccountAck.bind(this));
      listen("NiuLeaveRoom", this.onLeaveRoomAck.bind(this));
      listen("NiuDisbandRoom", this.onDisbandRoomAck.bind(this));
      listen("NiuDisbandRoomVote", this.onDisbandRoomVoteAck.bind(this));
      listen("NiuDisbandRoomResult", this.onDisbandRoomResultAck.bind(this));
    };
    NiuNiuManager.cleanListener = function() {
      for (var i in this.ListenCBList) fun.net.rmListen(this.ListenCBList[i]);
      for (var _i6 in this.pListenCBList) fun.net.rmPListen(this.pListenCBList[_i6]);
      this.ListenCBList = [];
      this.pListenCBList = [];
    };
    NiuNiuManager.onEnterRoomAck = function(msg) {
      if (this.checkIsMineUserId(msg.userOneMap.userId)) return;
      if (void 0 === this.SeatArray) return;
      var roomIdx = msg.userOneMap.sort;
      var cha = Math.abs(this.SeatArray[0] - roomIdx);
      this.SeatArray[0] > roomIdx ? this.SeatArray[6 - cha] = roomIdx : this.SeatArray[cha] = roomIdx;
      var seatNumber = this.getSeatNumberByRoomIdx(roomIdx);
      this.gameUICB.setEnterSeat(seatNumber, this.resetUserInfo(msg.userOneMap));
      this.onOnLineAck({
        userId: msg.userOneMap.userId
      });
    };
    NiuNiuManager.onReadyNextAck = function(msg) {
      if (void 0 !== msg.hint && 1 === msg.hint) this.gameUICB.setBtnReadyActive(true); else {
        var seat = this.getSeatByUserId(msg.ready);
        seat.Readying.active = true;
        seat.Ying.active = false;
        seat.Shu.active = false;
      }
    };
    NiuNiuManager.onQZhuangAck = function(msg) {
      if (void 0 !== msg.hint && 1 === msg.hint && 3 === this.data.roomRule.makersType) {
        Audio.playEffect("pork", "remind.mp3");
        this.setState("抢庄中");
        this.gameUICB.setBtnInviteActive(false);
        this.gameUICB.setBtnQZhuangActive(true);
        this.gameUICB.showHint(PukeDefine.HINT_TEXT.WAIT_QIANG_ZHUANG);
        for (var i = 1; i <= 6; i++) {
          var seat = this.getSeatByNumber(i);
          seat.Readying.active = false;
          seat.active && (this.ZeroZhuangSeat[this.ZeroZhuangSeat.length] = i);
        }
        this.DingZhuangTime = 0;
        this.StartChooseZhuang = true;
      }
      this.cleanSeatData();
      if (void 0 !== msg.RobMakersPeopl) {
        var _seat3 = this.getSeatByUserId(msg.RobMakersPeopl);
        this.QiangZhuangSeat[this.QiangZhuangSeat.length] = _seat3.SeatNumber;
        this.checkIsMineUserId(msg.RobMakersPeopl) && this.gameUICB.setBtnQZhuangActive(false);
      }
      if (void 0 !== msg.robMakers) {
        var _seat4 = this.getSeatByUserId(msg.RobMakersPeopl);
        1 === msg.robMakers ? this.gameUICB.setState({
          state: _seat4.State,
          content: "已抢庄",
          color: 0
        }) : 2 === msg.Op && this.gameUICB.setState({
          state: _seat4.State,
          content: "不抢庄",
          color: 1
        });
      }
      if (void 0 !== msg.Zhuangjia) {
        this.gameUICB.setBtnReadyActive(false);
        this.onZhuangAck(msg);
      }
    };
    NiuNiuManager.roomJuShuAdd = function() {
      this.RoundJuShu += 1;
      this.RoundJuShu <= this.TotalJuShu && this.gameUICB.setJuShuText(this.RoundJuShu + "/" + this.TotalJuShu);
    };
    NiuNiuManager.onZhuangAck = function(msg) {
      this.gameUICB.setGameStatus(2);
      var self = this;
      this.CurrentZhuang = this.getSeatByUserId(msg.Zhuangjia).RoomIdx;
      this.setState(false);
      var zhuangFunc = function zhuangFunc() {
        self.setState("下注中");
        self.gameUICB.setBtnXuYaActive(parseInt(msg.Zhuangjia) !== self.MineUserId);
        self.startGameReady();
        self._isMineNewUser || self.gameUICB.showHint(PukeDefine.HINT_TEXT.WAIT_XIA_ZHU);
        self.gameUICB.setBtnInviteActive(false);
        self.gameUICB.setBtnQZhuangActive(false);
        self.setZhuangFalse();
        var zhuangSeat = self.getSeatByUserId(msg.Zhuangjia);
        zhuangSeat.Zhuang.active = true;
        zhuangSeat.ZhuangSp.setAnimation(0, "Zhong", false);
      };
      var resetFunc = function resetFunc() {
        self.TurnZhuang = false;
        self.ZeroZhuangSeat = [];
        self.QiangZhuangSeat = [];
        self.DingZhuangTime = 0;
        self.StartChooseZhuang = false;
        self.qzDtTime = 0;
      };
      if (this.IsFreeQiangZhuang && 1 != this.QiangZhuangSeat.length) {
        this.DingZhuangTime = PukeDefine.QIANG_ZHUANG_WAIT_TIME;
        this.gameUICB.scheduleOnceFunc(function() {
          resetFunc();
          zhuangFunc();
        }, PukeDefine.QIANG_ZHUANG_TURN_TIME);
      } else if (this.IsFreeQiangZhuang && 1 === this.QiangZhuangSeat.length) {
        resetFunc();
        zhuangFunc();
      } else zhuangFunc();
    };
    NiuNiuManager.onSomeOneYaZhuAck = function(msg) {
      if (void 0 !== msg.hint && 1 === msg.hint) {
        3 !== this.data.roomRule.makersType && Audio.playEffect("pork", "remind.mp3");
        this.gameUICB.showHint(PukeDefine.HINT_TEXT.WAIT_XIA_ZHU);
        this.gameUICB.setBtnXiaZhuActive(true);
        this.startGameReady();
        this.gameUICB.showXiaZhu(msg.canBetScore);
        this.cleanSeatData();
        this.gameUICB.getIsXuYa() && this.RecentYaZhu && this.gameUICB.scheduleOnceFunc(function() {
          1 === this.RecentYaZhu ? this.gameUICB.onBtnXiaZhuClicked("", 1) : 2 === this.RecentYaZhu ? this.gameUICB.onBtnXiaZhuClicked("", 2) : 3 === this.RecentYaZhu && this.gameUICB.onBtnXiaZhuClicked("", 3);
        }.bind(this), PukeDefine.ZI_DONG_XU_YA_TIME);
        if (void 0 !== msg.xianScore && msg.xianScore > 0) {
          this.XianTuiZhuScore = msg.xianScore;
          this.gameUICB.setBtnTuiZhuActive(true);
        }
      } else {
        if (this.checkIsMineUserId(msg.userId)) {
          this.gameUICB.setBtnXiaZhuActive(false);
          this.gameUICB.setBtnTuiZhuActive(false);
        }
        var seat = this.getSeatByUserId(msg.userId);
        seat.YaBox.active = true;
        seat.YaZhu.string = msg.betScore;
        this.gameUICB.setState({
          state: seat.State,
          content: "已下注",
          color: 0
        });
        this.pushGold(seat.SeatNumber, msg.betScore);
      }
    };
    NiuNiuManager.onStartGameAck = function(msg) {
      var self = this;
      this._isShowCard = false;
      this._showType = {
        niuThree: msg.niuThree,
        niuTwo: msg.niuTwo,
        niuType: msg.niuType
      };
      this.roomJuShuAdd();
      this.gameUICB.setGameStatus(6);
      self._isMineNewUser || this.gameUICB.showHint(false);
      this.setState(false);
      this.isCuoPaiComplete = false;
      this.gameUICB.scheduleOnceFunc(function() {
        var sortCardsMap = new Array();
        var seatNumber = void 0;
        seatNumber = 4 === self.data.roomRule.makersType ? 1 : self.getSeatNumberByRoomIdx(self.CurrentZhuang);
        for (var i in msg.currentPlayer) {
          var id = msg.currentPlayer[i];
          for (var _i7 = 1; _i7 <= 6; ++_i7) {
            var seat = self.getSeatByNumber(_i7);
            if (parseInt(id) === seat.UserId) {
              var cha = seatNumber - seat.SeatNumber;
              var _idx = cha >= 0 ? cha : 6 - Math.abs(cha);
              sortCardsMap[_idx] = {};
              sortCardsMap[_idx].UserId = id;
              sortCardsMap[_idx].Cards = parseInt(id) === self.MineUserId ? msg.alreadyChess : {};
            }
          }
        }
        var pukes = [], idx = -1, seats = [];
        for (var k in sortCardsMap) {
          var value = sortCardsMap[k];
          for (var _i8 = 1; _i8 <= 6; ++_i8) {
            var _seat5 = self.getSeatByNumber(_i8);
            _seat5.Readying.active = false;
            if (_seat5.UserId === parseInt(value.UserId)) {
              seats.push(_seat5);
              var pos = _seat5.getPosition();
              if (1 === _i8) {
                seats.myCards = value.Cards;
                self.CuoPaiNumber = value.Cards[4];
              }
              for (var j = 1; j <= 5; ++j) {
                idx++;
                var fuhao = 1 === j || 2 === j ? -j : 4 === j || 5 === j ? j - 3 : 0;
                pukes[idx] = {};
                pukes[idx].x = 1 === _i8 ? 30 * fuhao : pos.x + 30 * fuhao;
                pukes[idx].y = 1 === _i8 ? .8 * pos.y : pos.y - _seat5.getContentSize().width / 1.58;
              }
            }
          }
        }
        self.faPaiPukes = pukes;
        self.faPaiSeats = seats;
        self.faPaiAnimation(0);
      }, PukeDefine.SEND_CARD_DELAY);
    };
    NiuNiuManager.onShowCardAck = function(msg) {
      if (void 0 !== msg.hint && 1 === msg.hint) {
        this._isShowCard && this.gameUICB.setBtnCuoPaiActive(true);
        return;
      }
      this.gameUICB.setGameStatus(3);
      var showType = msg.showType;
      if (void 0 === showType.niuTwo || void 0 === showType.niuTwo[0]) return;
      var seat = this.getSeatByUserId(msg.userId);
      this.gameUICB.setState({
        state: seat.State,
        content: "已亮牌",
        color: 0
      });
      if (parseInt(msg.userId) === seat.UserId) {
        var isMine = this.checkIsMineUserId(msg.userId);
        if (isMine && !this.isCuoPaiComplete) {
          this.cuoPaiAnimation("showCard", showType);
          this.showTypeFunc(seat, showType);
        } else {
          var pos = isMine ? "MINE_ACCOUNT" : "OTHER_ACCOUNT";
          for (var i = 1; i <= 3; ++i) {
            var puke = this.getPukeSpriteById(showType.niuThree[i - 1]);
            seat["Puke" + i].getComponent(cc.Sprite).spriteFrame = puke;
            seat["Puke" + i].setPositionX(PukeDefine.POSITION.PUKE.NIU_NIU[i][pos].x);
          }
          for (var _i9 = 4; _i9 <= 5; ++_i9) {
            var _puke2 = this.getPukeSpriteById(showType.niuTwo[_i9 - 4]);
            seat["Puke" + _i9].getComponent(cc.Sprite).spriteFrame = _puke2;
            seat["Puke" + _i9].setPositionX(PukeDefine.POSITION.PUKE.NIU_NIU[_i9][pos].x);
          }
          this.showTypeFunc(seat, showType);
        }
      }
    };
    NiuNiuManager.showTypeFunc = function(seat, value) {
      var anim = "WuniuX1";
      var niuType = value.niuType;
      anim = 0 === niuType ? "WuniuX1" : niuType >= 6 && niuType <= 10 ? PukeDefine.NIUNIU_ROOM_INFO.TYPE_SCORE_EN[this.TypeScore - 1][niuType - 6] : 11 === niuType ? "KandouX5" : 12 === niuType ? "SihuaX5" : 13 === niuType ? 1 === this.WuHua ? "WuhuaX6" : "WuhuaX5" : 14 === niuType ? 1 === this.ZhaDan ? "ZhadanX8" : "ZhadanX6" : 15 === niuType ? 1 === this.WuXiao ? "WuxiaoniuX10" : "WuxiaoniuX6" : "Niu" + niuType + "X1";
      cc.log("--- anim : " + anim + ", " + niuType);
      seat.ShuZi.active = true;
      seat.ShuZiSp.setAnimation(0, anim, false);
      if (this.checkIsMineUserId(seat.UserId)) {
        var type = PukeDefine.NIUNIU_ROOM_INFO.PAI_JU_SCORE["NIU_NIU"][value.niuType];
        var sex = 1 === this.UserInfo.Sex ? "male" : "female";
        Audio.playEffect("pork", type + ".mp3", sex);
      }
    };
    NiuNiuManager.onSingalAccountAck = function(msg) {
      if (void 0 !== msg.isClean && 1 === msg.isClean) return;
      this.gameUICB.setGameStatus(4);
      this.callInGold(msg);
      this.setState(false);
    };
    NiuNiuManager.onAccountFunc = function(msg) {
      for (var id in msg.gameOver) {
        cc.log(id);
        var value = msg.gameOver[id];
        if (void 0 === value.newUser) {
          var seat = this.getSeatByUserId(id);
          if (value.score > 0) {
            seat.Ying.active = true;
            seat.Shu.active = false;
            seat.YingLabel.string = "+" + value.score;
          } else {
            seat.Ying.active = false;
            seat.Shu.active = true;
            seat.ShuLabel.string = value.score;
          }
          seat.Fen.string = value.totalScore;
          seat.ShuZi.active || this.showTypeFunc(seat, value);
        }
      }
      this.RoundJuShu < this.TotalJuShu && this.gameUICB.scheduleOnceFunc(function() {
        this.gameUICB.showHint(PukeDefine.HINT_TEXT.WAIT_READY);
        this._isMineNewUser = false;
        this.gameUICB.setBtnReadyActive(true);
        this.gameUICB.setGameStatus(1);
      }.bind(this), PukeDefine.ACCOUNT_CURRENT_JUSHU);
    };
    NiuNiuManager.onTotalAccountAck = function(msg) {
      msg.RoomId = this.RoomId;
      msg.JuShu = this.TotalJuShu;
      msg.DiFen = this.DiFen[0];
      msg.ZhuangWei = this.ZhuangWei;
      msg.highestScore = 0;
      var count = -1;
      var newData = new Array();
      for (var id in msg.gameOver) {
        var value = msg.gameOver[id];
        var seat = this.getSeatByUserId(id);
        msg.highestScore = Math.max(value.totalScore, msg.highestScore);
        count++;
        newData[count] = {};
        newData[count].id = id;
        newData[count].score = value.totalScore;
        newData[count].name = seat._Name;
        newData[count].head = seat.HeadUrl;
        newData[count].left = 99;
        newData[count].lost = value.Deduc;
      }
      newData.sort(function(a, b) {
        return a.score < b.score;
      });
      msg.sortAccounts = newData;
      this.gameUICB.showHint(PukeDefine.HINT_TEXT.WAIT_TOTAL_ACCOUNT);
      var time = PukeDefine.TOTAL_ACCOUNT_SHOW_TIME;
      if (this.copyDisbandPrefab) {
        this.copyDisbandPrefab.destroy();
        time = .1;
      }
      this.copyTotalAccount = this.gameUICB.onTotalAccountAck();
      this.copyTotalAccount.setPosition(0, 0);
      this.gameUICB.setCountDownTime(true, time);
      this.gameUICB.scheduleOnceFunc(function() {
        this.gameUICB.setCountDownTime(false);
        this.gameUICB.showHint(false);
        this.gameUICB.getChildNode().getChildByName("totalaccount").addChild(this.copyTotalAccount);
        this.copyTotalAccount.getComponent("PukeAccount").initTotalAccount(msg);
      }.bind(this), time);
    };
    NiuNiuManager.onLeaveRoomAck = function(msg) {
      if (this.checkIsMineUserId(msg.userId)) cc.director.loadScene("hall"); else {
        var seat = this.getSeatByUserId(msg.userId);
        var pukeNumber = PukeDefine.GAME_TYPE[this.data.GameType].PUKE_NUMBER;
        this.gameUICB.resetSeat(seat.SeatNumber, pukeNumber);
      }
    };
    NiuNiuManager.onDisbandRoomAck = function(msg) {
      1 === msg.breakStatu && cc.director.loadScene("hall");
    };
    NiuNiuManager.onDisbandRoomVoteAck = function(msg) {
      this.gameUICB.setGameStatus(6);
      this.gameUICB.setMenuBgActive(false);
      for (var id in msg.applyBreakStatu) 2 === msg.applyBreakStatu[id] && this.gameUICB.scheduleOnceFunc(function() {
        this.copyDisbandPrefab && (this.copyDisbandPrefab.active = false);
      }.bind(this), PukeDefine.DISBAND_ROOM_DELAY_TIME);
      this.inDisbandRoomFunc(msg);
    };
    NiuNiuManager.onDisbandRoomResultAck = function(msg) {
      void 0 !== msg.breakStatu && 1 !== msg.breakStatu && fun.event.dispatch("MinSingleButtonPop", {
        contentStr: "解散房间失败"
      });
    };
    NiuNiuManager.inDisbandRoomFunc = function(msg) {
      this.copyDisbandPrefab || (this.copyDisbandPrefab = this.gameUICB.getDisband());
      this.copyDisbandPrefab.active = true;
      msg.GameType = "niuniu";
      for (var i = 1; i <= 6; i++) {
        var seat = this.getSeatByNumber(i);
        for (var id in msg.applyStatu) if (id == seat.UserId) {
          var state = msg.applyStatu[id];
          msg.applyStatu[id] = {};
          msg.applyStatu[id].state = state;
          msg.applyStatu[id].name = seat.Name.string;
          msg.applyStatu[id].headUrl = seat.HeadUrl;
        }
      }
      this.copyDisbandPrefab.getComponent("PukeDisband").disbandRoomInit(msg);
    };
    NiuNiuManager.onOnLineAck = function(msg) {
      if (!msg || void 0 === msg.userId) return;
      var seat = this.getSeatByUserId(msg.userId);
      seat.Mask.active = false;
    };
    NiuNiuManager.onOffLineAck = function(msg) {
      if (!msg || void 0 === msg.userId) return;
      var seat = this.getSeatByUserId(msg.userId);
      seat.Mask.active = true;
    };
    NiuNiuManager.YaZhuFunction = function(yanum) {
      4 == this.data.roomRule.bottomScore && (yanum = 1);
      this.RecentYaZhu = parseInt(yanum);
      var yaFen = {
        betScore: this.DiFen[yanum - 1],
        xianScore: 0
      };
      fun.net.send("NiuYaFen", yaFen);
    };
    NiuNiuManager.TuiZhuFunction = function() {
      var seat = this.getSeatByUserId(this.MineUserId);
      var yaFen = {
        betScore: 0,
        xianScore: this.XianTuiZhuScore
      };
      fun.net.send("NiuYaFen", yaFen, function(rsp) {
        if (void 0 !== rsp.returnStatu && 1 === rsp.returnStatu) {
          this.gameUICB.setBtnXiaZhuActive(false);
          this.gameUICB.setBtnTuiZhuActive(false);
        }
      }.bind(this));
    };
    NiuNiuManager.LeaveRoomFunction = function() {
      var state = this.gameUICB.getGameStatus();
      var jushu = this.gameUICB.getJuShuText();
      (1 === state || 0 == state) && "0" === jushu.substring(0, 1) || this._isMineNewUser ? this.MineIsMaster ? fun.net.send("NiuDisbandRoom", {}, function(rsp) {
        cc.log(rsp);
        void 0 !== rsp.returnStatu && 1 === rsp.returnStatu && cc.director.loadScene("hall");
      }.bind(this)) : fun.net.send("NiuLeaveRoom", {}, function(rsp) {
        void 0 !== rsp.returnStatu && 1 === rsp.returnStatu && cc.director.loadScene("hall");
      }.bind(this)) : fun.net.send("NiuDisbandRoomVote", {
        applyStatu: 0
      });
    };
    NiuNiuManager.ReadyFunction = function() {
      fun.net.send("NiuReady", {}, function(rsp) {
        this._isMineNewUser = false;
        this.gameUICB.setBtnReadyActive(false);
        this.MineSeat.Readying.active = true;
      }.bind(this));
    };
    NiuNiuManager.QZhuangFunction = function(type) {
      var qz = 0 === type ? 1 : 2;
      fun.net.send("NiuQZhuang", {
        robMakers: qz
      });
      this.gameUICB.setBtnQZhuangActive(false);
    };
    NiuNiuManager.wxShare = function() {
      var jushu = this.TotalJuShu + "局";
      var difen = "底分" + this.DiFen[0];
      var info = {};
      info.title = "牛牛-房间号：" + this.data.roomRule.RoomId;
      info.content = jushu + ", " + this.Charge + ", " + this.ZhuangWei + ", " + difen;
      require("JSPhoneWeChat").WxShareFriend(info);
    };
    module.exports = NiuNiuManager;
    cc._RF.pop();
  }, {
    Audio: "Audio",
    JSPhoneWeChat: "JSPhoneWeChat",
    PukeData: "PukeData",
    PukeDefine: "PukeDefine",
    PukeUtils: "PukeUtils",
    funUtils: "funUtils"
  } ],
  PukeAccountBox: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "233afJ1I2ZM0r/KjmERc522", "PukeAccountBox");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        BigWinner: cc.Node,
        HeadImg: cc.Node,
        Name: cc.Label,
        Id: cc.Label,
        YingScore: cc.Node,
        Ying: cc.Label,
        ShuScore: cc.Node,
        Shu: cc.Label,
        Own: cc.Node,
        OwnName: cc.Label,
        OwnId: cc.Label,
        OwnCostCard: cc.Label,
        OwnLeaveCard: cc.Label,
        costRoomCard: cc.Label,
        leaveRoomCard: cc.Label
      },
      initAccountBox: function initAccountBox(data) {
        var UserInfo = fun.db.getData("UserInfo");
        void 0 != data.winner && data.winner ? this.BigWinner.active = true : this.BigWinner.active = false;
        if (UserInfo.UserId === parseInt(data.id)) {
          this.Own.active = true;
          this.OwnName.string = data.name;
          this.OwnId.string = data.id;
          this.OwnCostCard.string = data.lost;
          this.OwnLeaveCard.string = data.left;
        } else this.Own.active = false;
        fun.utils.loadUrlRes(data.head, this.HeadImg);
        this.Name.string = data.name;
        this.Id.string = data.id;
        if (data.score > 0) {
          this.YingScore.active = true;
          this.ShuScore.active = false;
          this.Ying.string = "+" + data.score;
        } else {
          this.YingScore.active = false;
          this.ShuScore.active = true;
          this.Shu.string = data.score;
        }
        this.costRoomCard.string = data.lost;
        this.leaveRoomCard.string = data.left;
      }
    });
    cc._RF.pop();
  }, {} ],
  PukeAccount: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ca7belv0vtNqZeL7UIhTFFm", "PukeAccount");
    "use strict";
    var PukeDefine = require("PukeDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        RoomId: cc.Label,
        JuShu: cc.Label,
        DiFen: cc.Label,
        WanFa: cc.Label,
        AccountBox: cc.Prefab,
        BtnShare: cc.Node
      },
      initTotalAccount: function initTotalAccount(data) {
        fun.gameCfg.releaseType === gameConst.releaseType.apple && (this.BtnShare.active = false);
        this.RoomId.string = data.RoomId;
        this.JuShu.string = data.JuShu;
        this.DiFen.string = data.DiFen;
        this.WanFa.string = data.ZhuangWei;
        for (var i in data.sortAccounts) {
          var value = data.sortAccounts[i];
          value.score === data.highestScore && 0 != data.highestScore && (value.winner = true);
          var copyAccountBox = cc.instantiate(this.AccountBox);
          var pos = PukeDefine.POSITION.ACCOUT_BOX[parseInt(i) + 1];
          copyAccountBox.setPosition(pos.x, pos.y);
          this.node.addChild(copyAccountBox);
          copyAccountBox.getComponent("PukeAccountBox").initAccountBox(value);
        }
      },
      btnWechatShare: function btnWechatShare() {
        require("JSPhoneWeChat").WxShareFriendScreen();
      },
      btnReturnDaTing: function btnReturnDaTing() {
        cc.director.loadScene("hall");
      }
    });
    cc._RF.pop();
  }, {
    JSPhoneWeChat: "JSPhoneWeChat",
    PukeDefine: "PukeDefine"
  } ],
  PukeChatUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f3a29a+zTRD0ZwHCI4nJx6p", "PukeChatUI");
    "use strict";
    var PukeDefine = require("PukeDefine");
    var Audio = require("Audio");
    var PhoneVoice = require("JSPhoneVoice");
    cc.Class({
      extends: cc.Component,
      properties: {
        ChatBox: cc.Prefab,
        Emoticon: cc.Prefab,
        BtnVoice: cc.Node,
        interact: cc.Prefab
      },
      onLoad: function onLoad() {
        cc.sys.isNative || (this.BtnVoice.active = false);
        var ChildNode = this.node.parent.parent.getChildByName("childNode");
        this._userInfoN = ChildNode.getChildByName("userinfo");
        this._chatEmojiQueueFunc = {};
        this._chatTextQueueFunc = {};
        this._isPlayChatEmoji = {};
        this._isPlayChatText = {};
        for (var i = 1; i <= 6; ++i) {
          this._chatEmojiQueueFunc[i] = new Array();
          this._chatTextQueueFunc[i] = new Array();
          this._isPlayChatEmoji[i] = true;
          this._isPlayChatText[i] = true;
        }
        fun.event.add("PukeChatUI_RoomChat", "RoomChat", this.onChatAck.bind(this));
        fun.event.add("PukeChatUI_Voice", "RoomChatVoice", this.onVoiceAck.bind(this));
      },
      update: function update() {
        for (var i = 1; i <= 6; ++i) {
          if (void 0 !== this._chatEmojiQueueFunc && void 0 !== this._chatEmojiQueueFunc[i] && this._chatEmojiQueueFunc[i].length > 0 && this._isPlayChatEmoji[i]) {
            this._chatEmojiQueueFunc[i][0]();
            this._chatEmojiQueueFunc[i].splice(0, 1);
          }
          if (void 0 !== this._chatTextQueueFunc && void 0 !== this._chatTextQueueFunc[i] && this._chatTextQueueFunc[i].length > 0 && this._isPlayChatText[i]) {
            this._chatTextQueueFunc[i][0]();
            this._chatTextQueueFunc[i].splice(0, 1);
          }
        }
      },
      onDestroy: function onDestroy() {
        this._chatEmojiQueueFunc = {};
        this._chatTextQueueFunc = {};
        this._isPlayChatEmoji = {};
        this._isPlayChatText = {};
        fun.event.remove("PukeChatUI_RoomChat");
        fun.event.remove("PukeChatUI_Voice");
      },
      onBtnMessageClicked: function onBtnMessageClicked() {
        Audio.playEffect("hall", "button_nomal.mp3");
        var copyChatBox = cc.instantiate(this.ChatBox);
        copyChatBox.setPosition(0, 0);
        copyChatBox.parent = this._userInfoN;
      },
      onVoiceAck: function onVoiceAck(data) {
        var self = this;
        var chatFunc = function chatFunc(seat, seato) {
          seat.Speaker.active = true;
          var _sp = seat.Speaker.getChildByName("sp").getComponent(sp.Skeleton);
          _sp.setAnimation(0, "animation", true);
          _sp.timeScale = 1;
          self.scheduleOnce(function() {
            seat.Speaker.active = false;
            _sp.timeScale = 0;
          }, data.length);
        };
        fun.event.dispatch("PukeChatUI", {
          fromId: data.from,
          toId: data.to ? data.to : null,
          func: chatFunc
        });
      },
      onChatAck: function onChatAck(data) {
        var self = this;
        var chatFunc = function chatFunc(seat, seato) {
          var seatNumber = seat.SeatNumber;
          if ("emoji" === data.chatType) {
            var func = function func() {
              self._isPlayChatEmoji[seatNumber] = false;
              var copyEmot = cc.instantiate(self.Emoticon);
              copyEmot.setPosition(-83, 12);
              copyEmot.parent = seat;
              var anim = copyEmot.getComponent(sp.Skeleton);
              anim.animation = data.content;
              self.scheduleOnce(function() {
                copyEmot.destroy();
                self._isPlayChatEmoji[seatNumber] = true;
              }, PukeDefine.CHAT_MESSAGE_SHOW_TIME);
            };
            var len = self._chatEmojiQueueFunc[seatNumber].length;
            self._chatEmojiQueueFunc[seatNumber][len] = func;
          } else if ("interact" === data.chatType) {
            var interactN = cc.instantiate(self.interact);
            interactN.parent = self._userInfoN;
            var wposS = self.node.convertToWorldSpaceAR(PukeDefine.POSITION.SEAT[seatNumber]);
            var wposE = self.node.convertToWorldSpaceAR(PukeDefine.POSITION.SEAT[seato.SeatNumber]);
            interactN.getComponent("interact").show(data, wposS, wposE);
          } else if ("text" === data.chatType) {
            var _func = function _func() {
              self._isPlayChatText[seatNumber] = false;
              var chatImg = seat.getChildByName("chatImg");
              chatImg.active = true;
              var chatContent = chatImg.getChildByName("content");
              chatContent.getComponent(cc.Label).string = data.content;
              var length = chatContent.getContentSize().width;
              chatImg.setContentSize(length + 30, chatImg.getContentSize().height);
              self.scheduleOnce(function() {
                chatImg.active = false;
                self._isPlayChatText[seatNumber] = true;
              }, PukeDefine.CHAT_MESSAGE_SHOW_TIME);
            };
            var _len = self._chatTextQueueFunc[seatNumber].length;
            self._chatTextQueueFunc[seatNumber][_len] = _func;
          }
        };
        fun.event.dispatch("PukeChatUI", {
          fromId: data.from,
          toId: data.to ? data.to : null,
          func: chatFunc
        });
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio",
    JSPhoneVoice: "JSPhoneVoice",
    PukeDefine: "PukeDefine"
  } ],
  PukeCommUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dbfeemSe9tJ+4EGDx0YSRAI", "PukeCommUI");
    "use strict";
    var PukeDefine = require("PukeDefine");
    var PukeData = require("PukeData");
    var PukeUtils = require("PukeUtils");
    cc.Class({
      extends: cc.Component,
      properties: {
        Background: cc.Node,
        phoneStatus: cc.Node
      },
      onLoad: function onLoad() {
        PukeData.init();
        this.skinPeeler(PukeData.getSkin());
        this.scheduleTime();
        this.refreTimeCount = 1;
      },
      start: function start() {
        fun.event.add("PukeCommUI_PukeSkin", "PukeSkin", this.skinPeeler.bind(this));
        fun.event.add("PukeCommUI_Battery", "PhoneBattery", this.batteryStatus.bind(this));
        fun.event.add("PukeCommUI_Net", "PhoneNet", this.netStatus.bind(this));
        require("JSPhoneNetBattery").getNetBatteryStatus();
      },
      update: function update(dt) {
        this.totalDtTime = (this.totalDtTime || 0) + dt;
        if (this.totalDtTime > this.refreTimeCount) {
          this.totalDtTime -= this.refreTimeCount;
          this.scheduleTime();
        }
      },
      onDestroy: function onDestroy() {
        fun.event.remove("PukeCommUI_PukeSkin");
        fun.event.remove("PukeCommUI_Battery");
        fun.event.remove("PukeCommUI_Net");
      },
      scheduleTime: function scheduleTime() {
        var date = new Date();
        this.lastMinutes = this.lastMinutes || date.getMinutes();
        var minutesStr = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes();
        var hoursStr = date.getHours() < 10 ? "0" + date.getHours() : date.getHours();
        var systemTime = date.getHours() + ":" + minutesStr;
        this.lastMinutes < date.getMinutes() && 1 == this.refreTimeCount && (this.refreTimeCount = 30);
        this.lastMinutes = date.getMinutes();
        this.phoneStatus.getChildByName("time").getComponent(cc.Label).string = systemTime;
      },
      batteryStatus: function batteryStatus(msg) {
        var isCharge = this.phoneStatus.getChildByName("charge");
        var progress = this.phoneStatus.getChildByName("battery");
        isCharge.active = 0 !== msg.status && 1 !== msg.status;
        progress.getComponent(cc.ProgressBar).progress = msg.level / 100;
      },
      netStatus: function netStatus(msg) {
        var wifi = this.phoneStatus.getChildByName("wifi");
        var signal = this.phoneStatus.getChildByName("signal");
        if (5 === msg.status) {
          wifi.active = true;
          signal.active = false;
          for (var i = 1; i <= 4; ++i) wifi.getChildByName("pk_wifi_" + i).active = false;
          wifi.getChildByName("pk_wifi_" + msg.strength).active = true;
        } else {
          wifi.active = false;
          signal.active = true;
          for (var _i = 1; _i <= 5; ++_i) signal.getChildByName("pk_signal_" + _i).active = false;
          var sg = msg.signal;
          signal.getChildByName("pk_signal_" + (msg.signal + 1)).active = true;
        }
      },
      skinPeeler: function skinPeeler(skinNum) {
        var self = this;
        PukeUtils.LoadRes(PukeDefine.BACKGROUND[skinNum - 1], "SpriteFrame", function(frame) {
          self.Background.getComponent(cc.Sprite).spriteFrame = frame;
        });
      }
    });
    cc._RF.pop();
  }, {
    JSPhoneNetBattery: "JSPhoneNetBattery",
    PukeData: "PukeData",
    PukeDefine: "PukeDefine",
    PukeUtils: "PukeUtils"
  } ],
  PukeData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1dc3927kCtKz6NcIEK/wZqW", "PukeData");
    "use strict";
    var pukeDataPath = "pukeDataPath";
    var pukeData = {
      haveXuYa: false,
      isXuYa: false,
      skin: 1
    };
    module.exports = {
      cleanGameData: function cleanGameData() {
        pukeData.isRoomMaster = 1;
        pukeData.haveXuYa = false;
        pukeData.isXuYa = false;
        pukeData.skin = 1;
      },
      needSaveLocalData: function needSaveLocalData() {
        var data = {};
        data.skin = pukeData.skin;
        return data;
      },
      init: function init() {
        try {
          var data = JSON.parse(cc.sys.localStorage.getItem(pukeDataPath));
          for (var key in data) pukeData[key] = data[key];
        } catch (err) {
          log("--- getLocalData err : " + err);
        }
      },
      setLocalData: function setLocalData() {
        try {
          cc.sys.localStorage.setItem(pukeDataPath, JSON.stringify(this.needSaveLocalData()));
        } catch (err) {
          log("--- setLocalData err : " + err);
        }
      },
      getPukeData: function getPukeData() {
        return pukeData;
      },
      setXuYa: function setXuYa(xuya) {
        pukeData.isXuYa = xuya;
      },
      getXuYa: function getXuYa() {
        return pukeData.isXuYa;
      },
      getHaveXuYa: function getHaveXuYa() {
        return pukeData.haveXuYa;
      },
      setSkin: function setSkin(num) {
        pukeData.skin = num;
        this.setLocalData();
      },
      getSkin: function getSkin() {
        return pukeData.skin;
      }
    };
    cc._RF.pop();
  }, {} ],
  PukeDefine: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "16621cJf0xNnLBm1fQ/ys0B", "PukeDefine");
    "use strict";
    var PukeDefine = {};
    PukeDefine.VERSION = "1.0.0";
    PukeDefine.TOTAL_CARDS_NUMBER = 52;
    PukeDefine.QIANG_ZHUANG_WAIT_TIME = 5;
    PukeDefine.QIANG_ZHUANG_TURN_TIME = 3;
    PukeDefine.ZI_DONG_XU_YA_TIME = 1;
    PukeDefine.SEND_CARD_DELAY = 1;
    PukeDefine.SEND_CARD_SINGLE_TIME = .12;
    PukeDefine.SEND_CARD_COMPLETE_TIME = .5;
    PukeDefine.TOTAL_ACCOUNT_SHOW_TIME = 3;
    PukeDefine.DISBAND_ROOM_DELAY_TIME = 1;
    PukeDefine.NIU_SEND_ACCOUNT_DELAY = .5;
    PukeDefine.ACCOUNT_CURRENT_JUSHU = .5;
    PukeDefine.CREATE_JUSHU_MIN = 10;
    PukeDefine.CREATE_JUSHU_MAX = 40;
    PukeDefine.CREATE_JUSHU_SPACE = 5;
    PukeDefine.CHAT_MESSAGE_SHOW_TIME = 3;
    PukeDefine.GOLD_POOL_NUMBER = 500;
    PukeDefine.PUSH_GOLD_NUMBER = 30;
    PukeDefine.TEXT_JUMP_TIME = .4;
    PukeDefine.GAME_TYPE = {
      2: {
        TYPE: 2,
        CH_NAME: "三公",
        EN_NAME: "sangong",
        PUKE_NUMBER: 3,
        PUKE_POSITION: "SAN_GONG"
      },
      4: {
        TYPE: 4,
        CH_NAME: "牛牛",
        EN_NAME: "niuniu",
        PUKE_NUMBER: 5,
        PUKE_POSITION: "NIU_NIU"
      }
    };
    PukeDefine.NIUNIU_ROOM_INFO = {
      MASKERS_TYPE: [ "牛牛上庄", "固定庄家", "自由抢庄", "通比牛牛", "轮流庄" ],
      TYPE_SCORE: [ "牛六x2, 牛七x2, 牛八x3, 牛九x3, 牛牛x5", "牛六x2, 牛七x2, 牛八x3, 牛九x3, 牛牛x4", "牛六x2, 牛七x2, 牛八x2, 牛九x3, 牛牛x4", "牛八x2, 牛九x3, 牛牛x4", "牛六x2, 牛七x2, 牛八x2, 牛九x2, 牛牛x3" ],
      TYPE_SCORE_EN: [ [ "Niu6X2", "Niu7X2", "Niu8X3", "Niu9X3", "NiuniuX5" ], [ "Niu6X2", "Niu7X2", "Niu8X3", "Niu9X3", "NiuniuX4" ], [ "Niu6X2", "Niu7X2", "Niu8X2", "Niu9X3", "NiuniuX4" ], [ "Niu6X1", "Niu7X1", "Niu8X2", "Niu9X3", "NiuniuX4" ], [ "Niu6X2", "Niu7X2", "Niu8X2", "Niu9X2", "NiuniuX3" ] ],
      TYPE_SCORE_SPECIAL: [ "WuhuaX6", "ZhadanX8", "WuxiaoniuX10" ],
      PAI_JU_SCORE: {
        NIU_NIU: [ "meiniu", "niu1", "niu2", "niu3", "niu4", "niu5", "niu6", "niu7", "niu8", "niu9", "niuniu", "kandou", "4huaniu", "5huaniu", "zhadan", "5xiaoniu" ],
        SAN_GONG: [ "0dian", "1dian", "2dian", "3dian", "4dian", "5dian", "6dian", "7dian", "8dian", "9dian", "hun", "feiji", "da", "tian" ]
      },
      NIU_SPECIAL: [ "kanDou", "wuHua", "zhaDan", "wuXiao", "xianJia", "joinLimit", "zhangSuo", "shunDou" ],
      GAME_STATUS: [ "游戏未开始", "开始游戏", "游戏结束" ]
    };
    PukeDefine.ROOM_INFO = {
      COST: [ "均摊房费", "冠军房费" ],
      DI_FEN: [ [ 1, 2, 3 ], [ 2, 4, 6 ], [ 3, 6, 9 ], [ 10 ] ],
      ZHUANG_WEI: [ "9点上庄", "固定庄", "自由抢庄", "轮流庄" ],
      SHI_XIAN: [ "不限时", "5秒开", "10秒开", "15秒开" ],
      SPECIAL: {
        1: [ "涨缩注", "不能缩注" ],
        2: [ "游戏开始后禁止加入", "游戏开始后允许加入" ]
      },
      ISMASTER: [ "解散房间", "离开房间" ]
    };
    PukeDefine.HINT_TEXT = {
      WAIT_READY: "等待玩家准备",
      WAIT_XIA_ZHU: "等待玩家下注",
      WAIT_QIANG_ZHUANG: "等待玩家抢庄",
      WAIT_TOTAL_ACCOUNT: "等待结算",
      WAIT_CURRENT_END: "等待本局结束"
    };
    PukeDefine.BACKGROUND = [ "poker/background/pk_zhuozi", "poker/background/pk_zhuozi2" ];
    PukeDefine.POSITION = {
      SEAT: {
        1: {
          x: -530,
          y: -305
        },
        2: {
          x: -530,
          y: 50
        },
        3: {
          x: -325,
          y: 235
        },
        4: {
          x: 0,
          y: 280
        },
        5: {
          x: 325,
          y: 235
        },
        6: {
          x: 530,
          y: 50
        }
      },
      PUKE: {
        SAN_GONG: {
          1: {
            MINE_ACCOUNT: {
              x: 440,
              y: 65
            },
            OTHER_ACCOUNT: {
              x: -30,
              y: -133
            }
          },
          2: {
            MINE_ACCOUNT: {
              x: 490,
              y: 65
            },
            OTHER_ACCOUNT: {
              x: 0,
              y: -133
            }
          },
          3: {
            MINE_ACCOUNT: {
              x: 540,
              y: 25
            },
            OTHER_ACCOUNT: {
              x: 30,
              y: -133
            }
          }
        },
        NIU_NIU: {
          1: {
            MINE: {
              x: 410,
              y: 65
            },
            OTHER: {
              x: -60,
              y: -133
            },
            MINE_ACCOUNT: {
              x: 410,
              y: 65
            },
            OTHER_ACCOUNT: {
              x: -60,
              y: -133
            }
          },
          2: {
            MINE: {
              x: 450,
              y: 65
            },
            OTHER: {
              x: -30,
              y: -133
            },
            MINE_ACCOUNT: {
              x: 445,
              y: 65
            },
            OTHER_ACCOUNT: {
              x: -35,
              y: -133
            }
          },
          3: {
            MINE: {
              x: 490,
              y: 65
            },
            OTHER: {
              x: 0,
              y: -133
            },
            MINE_ACCOUNT: {
              x: 480,
              y: 65
            },
            OTHER_ACCOUNT: {
              x: -10,
              y: -133
            }
          },
          4: {
            MINE: {
              x: 530,
              y: 65
            },
            OTHER: {
              x: 30,
              y: -133
            },
            MINE_ACCOUNT: {
              x: 535,
              y: 65
            },
            OTHER_ACCOUNT: {
              x: 35,
              y: -133
            }
          },
          5: {
            MINE: {
              x: 570,
              y: 65
            },
            OTHER: {
              x: 60,
              y: -133
            },
            MINE_ACCOUNT: {
              x: 570,
              y: 65
            },
            OTHER_ACCOUNT: {
              x: 60,
              y: -133
            }
          }
        }
      },
      GOLD: {
        1: {
          START_POS: {
            x: -495,
            y: -331
          },
          END_POS: {
            x: -280,
            y: -220
          }
        },
        2: {
          START_POS: {
            x: -537,
            y: 51
          },
          END_POS: {
            x: -330,
            y: -80
          }
        },
        3: {
          START_POS: {
            x: -323.5,
            y: 281.5
          },
          END_POS: {
            x: -190,
            y: 40
          }
        },
        4: {
          START_POS: {
            x: -11,
            y: 304.5
          },
          END_POS: {
            x: 0,
            y: 80
          }
        },
        5: {
          START_POS: {
            x: 322,
            y: 278
          },
          END_POS: {
            x: 190,
            y: 40
          }
        },
        6: {
          START_POS: {
            x: 537,
            y: 57
          },
          END_POS: {
            x: 330,
            y: -80
          }
        }
      },
      DETAIL: {
        1: {
          x: -465,
          y: -178
        },
        2: {
          x: -272,
          y: 98
        },
        3: {
          x: -58,
          y: 153
        },
        4: {
          x: 41,
          y: 97
        },
        5: {
          x: 264,
          y: 72
        },
        6: {
          x: 265,
          y: -69
        }
      },
      ACCOUT_BOX: {
        1: {
          x: -405,
          y: 155
        },
        2: {
          x: 0,
          y: 155
        },
        3: {
          x: 405,
          y: 155
        },
        4: {
          x: -405,
          y: -100
        },
        5: {
          x: 0,
          y: -100
        },
        6: {
          x: 405,
          y: -100
        }
      }
    };
    PukeDefine.RESOURCE_FOLDER_PATH = {
      SPINE: {
        FAN_PAI: "poker/spine/Fanpai/",
        Sangong_Dazi: "poker/spine/Sangong_Dazi/Sangong_Dazi",
        Sangong_Xiaozi: "poker/spine/Sangong_Xiaozi/Sangong_Xiaozi",
        Niuniu_Dazi: "poker/spine/Niuniu_Dazi/Niuniu_Dazi",
        Niuniu_Xiaozi: "poker/spine/Niuniu_Xiaozi/Niuniu_Xiaozi"
      }
    };
    PukeDefine.PUKE = {
      MODULE_NAME_NIUNIU: [ "HHeng", "Shu", "Heng", "SShu" ],
      MODULE_NAME_SANGONG: [ "HHeng", "Shu", "Heng", "SShu" ]
    };
    module.exports = PukeDefine;
    cc._RF.pop();
  }, {} ],
  PukeDisband: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "78ccfDirgtHcb5qyHPzdW4K", "PukeDisband");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        applicantTabel: cc.RichText,
        PlayerList: cc.Node,
        TimeLabel: cc.Label,
        BtnAgree: cc.Node,
        BtnDisagree: cc.Node
      },
      update: function update(dt) {
        if (this.isUpdate) {
          var time = parseInt(this.TimeLabel.string);
          if (time <= 0) {
            this.isUpdate = false;
            this.node.active = false;
          } else {
            this.dtTime = (this.dtTime || 0) + dt;
            if (this.dtTime >= 1) {
              this.dtTime -= 1;
              var newTime = time - 1;
              this.TimeLabel.string = newTime <= 0 ? 0 : newTime;
            }
          }
        }
      },
      disbandRoomInit: function disbandRoomInit(data) {
        this.data = data;
        var UserInfo = fun.db.getData("UserInfo");
        this.MineUserId = parseInt(UserInfo.UserId);
        this.isUpdate = true;
        this.setBtnAgreeActive(false);
        this.setPlayerActive();
        if ("sangong" === data.GameType) fun.net.pSend("ServerTime", "", function(rsp) {
          if (rsp.Now) {
            this.NewBeginTime = rsp.Now;
            this.TimeLabel.string = data.EndTime - this.NewBeginTime;
            this.initSanGongShow();
          }
        }.bind(this)); else if ("niuniu" === data.GameType) {
          data.timeBreak && (this.TimeLabel.string = data.timeBreak);
          this.initNiuNiuShow();
        }
      },
      setBtnAgreeActive: function setBtnAgreeActive(active) {
        this.BtnAgree.active = active;
        this.BtnDisagree.active = active;
      },
      setPlayerActive: function setPlayerActive(active) {
        for (var i = 0; i < this.PlayerList.children.length; ++i) this.PlayerList.children[i].active = false;
      },
      allAgreeDisband: function allAgreeDisband() {
        for (var i = 1; i <= 6; ++i) {
          var player = this.PlayerList.getChildByName("player_" + i);
          var ok = player.getChildByName("ok").getChildByName("tag");
          ok.active = true;
        }
      },
      initSanGongShow: function initSanGongShow() {
        var count = 0;
        for (var id in this.data.VoteInfo) {
          count++;
          var info = this.data.VoteInfo[id];
          info.name = "gust" === info.name ? info.name + id : info.name;
          parseInt(id) === this.MineUserId && 0 === info.state && this.setBtnAgreeActive(true);
          var player = this.PlayerList.getChildByName("player_" + count);
          player.active = true;
          var icon = player.getChildByName("icon").getChildByName("img");
          fun.utils.loadUrlRes(info.headUrl, icon);
          var name = player.getChildByName("name").getComponent(cc.Label);
          name.string = info.name;
          var ok = player.getChildByName("ok").getChildByName("tag");
          var no = player.getChildByName("no").getChildByName("tag");
          if (0 === info.state) {
            ok.active = false;
            no.active = false;
          } else if (1 === info.state) {
            ok.active = true;
            no.active = false;
            this.applicantTabel.string = "玩家" + info.name + "申请退出游戏，请投票";
          } else if (2 === info.state) {
            ok.active = true;
            no.active = false;
          } else if (3 === info.state) {
            ok.active = false;
            no.active = true;
          }
        }
      },
      initNiuNiuShow: function initNiuNiuShow() {
        var count = 0;
        for (var id in this.data.applyStatu) {
          count++;
          var info = this.data.applyStatu[id];
          info.name = "gust" === info.name ? info.name + id : info.name;
          parseInt(id) === this.MineUserId && 3 === info.state && this.setBtnAgreeActive(true);
          var player = this.PlayerList.getChildByName("player_" + count);
          player.active = true;
          var icon = player.getChildByName("icon").getChildByName("img");
          fun.utils.loadUrlRes(info.headUrl, icon);
          var name = player.getChildByName("name").getComponent(cc.Label);
          name.string = info.name;
          var ok = player.getChildByName("ok").getChildByName("tag");
          var no = player.getChildByName("no").getChildByName("tag");
          if (3 === info.state) {
            ok.active = false;
            no.active = false;
          } else if (0 === info.state) {
            ok.active = true;
            no.active = false;
            this.applicantTabel.string = "玩家" + info.name + "申请退出游戏，请投票";
          } else if (1 === info.state) {
            ok.active = true;
            no.active = false;
          } else if (2 === info.state) {
            ok.active = false;
            no.active = true;
          }
        }
      },
      onBtnAgreeClicked: function onBtnAgreeClicked() {
        "niuniu" === this.data.GameType ? fun.net.send("NiuDisbandRoomVote", {
          applyStatu: 1
        }) : "sangong" === this.data.GameType && fun.net.send("DisbandRoomVote", {
          OP: 2
        });
        this.setBtnAgreeActive(false);
      },
      onBtnDisagreeClicked: function onBtnDisagreeClicked() {
        "niuniu" === this.data.GameType ? fun.net.send("NiuDisbandRoomVote", {
          applyStatu: 2
        }) : "sangong" === this.data.GameType && fun.net.send("DisbandRoomVote", {
          OP: 3
        });
        this.setBtnAgreeActive(false);
      }
    });
    cc._RF.pop();
  }, {} ],
  PukeSkin: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ada04Stxb1F5aDzToDF1t3Y", "PukeSkin");
    "use strict";
    var PukeUtils = require("PukeUtils");
    var PukeData = require("PukeData");
    var PukeDefine = require("PukeDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        Skin1: cc.Sprite,
        Skin2: cc.Sprite,
        SkinChoose1: cc.Node,
        SkinChoose2: cc.Node,
        SkinNumber: 2
      },
      onLoad: function onLoad() {
        this.initSkin();
        this.initSkinChoose();
        var curSkin = PukeData.getSkin();
        this["SkinChoose" + curSkin].active = true;
      },
      initSkin: function initSkin() {
        var self = this;
        var _loop = function _loop(i) {
          var spriteName = PukeDefine.BACKGROUND[i];
          PukeUtils.LoadRes(spriteName, "SpriteName", function(frame) {
            self["Skin" + (i + 1)].spriteFrame = frame;
          });
        };
        for (var i = 0; i < this.SkinNumber; i++) _loop(i);
      },
      initSkinChoose: function initSkinChoose() {
        for (var i = 1; i <= this.SkinNumber; i++) this["SkinChoose" + i].active = false;
      },
      onBtnSkinClicked: function onBtnSkinClicked(sender, num) {
        this.initSkinChoose();
        this["SkinChoose" + num].active = true;
        PukeData.setSkin(num);
        fun.event.dispatch("PukeSkin", num);
      },
      onBtnQuitClicked: function onBtnQuitClicked() {
        require("Audio").playEffect("hall", "button_close.mp3");
        this.node.active = false;
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio",
    PukeData: "PukeData",
    PukeDefine: "PukeDefine",
    PukeUtils: "PukeUtils"
  } ],
  PukeUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a95f8il81pO7JI8G4Gc87bv", "PukeUI");
    "use strict";
    var PukeUtils = require("PukeUtils");
    var PukeDefine = require("PukeDefine");
    var PukeData = require("PukeData");
    var Audio = require("Audio");
    var PukeCfg = void 0, PukeManager = void 0;
    cc.Class({
      extends: cc.Component,
      properties: {
        ChildNode: cc.Node,
        Background: cc.Node,
        RoomInfoNode: cc.Node,
        PukeAltas: cc.SpriteAtlas,
        MenuBg: cc.Node,
        Players: cc.Node,
        Golds: cc.Node,
        BtnReady: cc.Node,
        BtnQiangZhuang: cc.Node,
        BtnNotQiangZhuang: cc.Node,
        BtnCuoPai: cc.Node,
        BtnLiangPai: cc.Node,
        BtnInvite: cc.Node,
        BtnLeave: cc.Node,
        HintBack: cc.Node,
        XiaZhuBtns: cc.Node,
        BtnXuYa: cc.Node,
        BtnTuiZhu: cc.Node,
        BtnHead: cc.Prefab,
        Puke: cc.Prefab,
        Gold: cc.Prefab,
        Skin: cc.Prefab,
        PukeAccount: cc.Prefab,
        CuoPai: cc.Prefab,
        SetPrefab: cc.Prefab,
        DisbandPrefab: cc.Prefab,
        phoneStatus: cc.Node
      },
      onLoad: function onLoad() {
        fun.event.dispatch("Zhuanquan", {
          flag: false
        });
        cc.log(gameConst);
        if (fun.gameCfg.releaseType === gameConst.releaseType.apple) {
          this.BtnInvite.active = false;
          this.BtnLeave.setPositionX(0);
        }
        this.RoomInfoNode.getChildByName("nnRoomInfo").active = false;
        this.RoomInfoNode.getChildByName("sgRoomInfo").active = false;
        this.RoomInfo = fun.db.getData("RoomInfo");
        this.GameType = this.RoomInfo.GameType;
        var PukeCfg = require(2 === this.GameType ? "SanGongCfg" : "NiuNiuCfg");
        fun.net.setGameMsgCfg(PukeCfg);
        this.initSeat();
        this.XiaZhu = new Array();
        for (var _i = 0; _i < 3; _i++) this.XiaZhu[_i] = this.XiaZhuBtns.getChildByName("btnXiaZhu" + (_i + 1));
        PukeManager = require(2 === this.GameType ? "SanGongManager" : "NiuNiuManager");
        PukeManager.initGame(this);
      },
      start: function start() {
        var sg = this.Background.getChildByName("sangong");
        var nn = this.Background.getChildByName("niuniu");
        if (2 === this.GameType) {
          sg.active = true;
          nn.active = false;
        } else if (4 === this.GameType) {
          sg.active = false;
          nn.active = true;
        }
        this.Background.on("touchend", function() {
          this.MenuBg.active && (this.MenuBg.active = false);
          void 0 !== this._roomInfoUp && this._roomInfoUp && this.onBtnRoomInfoClicked();
        }, this);
        this.initPool();
        this.initNnRoomInfoDetail();
        this.initSgRoomInfoDetail();
        this.initState();
        fun.event.add("PukeUI_Chat", "PukeChatUI", this.onPukeChatUI.bind(this));
        Audio.playMusic("pork", "BGM150S.mp3");
      },
      update: function update(dt) {
        (2 === this.GameType && 3 === this.RoomInfo.DZhuang || 4 === this.GameType) && PukeManager.update(dt);
        if (this._isCountdownTime && this._CountdownTime > 0) {
          this._countDtTime += dt;
          if (this._countDtTime >= 1) {
            this._countDtTime -= 1;
            this._CountdownTime -= 1;
            this.HintBack.getChildByName("time").getComponent(cc.Label).string = this._CountdownTime;
            this._CountdownTime <= 0 && (this._isCountdownTime = false);
          }
        }
        for (var _i2 = 0; _i2 < 6; _i2++) if (this._isJumpText[_i2]) {
          this._jumpDtTime[_i2] += dt;
          if (this._jumpDtTime[_i2] >= this._jumpTextTime) {
            this._jumpDtTime[_i2] -= this._jumpTextTime;
            this._jumpTextNumber[_i2] = this._jumpTextNumber[_i2] === this._jumpTextLength[_i2] - 1 ? -2 : this._jumpTextNumber[_i2] + 1;
            var jumpBy = cc.jumpBy(this._jumpTextTime, cc.p(0, 0), 20, 1);
            if (this._jumpTextNumber[_i2] >= 0 && void 0 !== this._jumpTextArray[_i2][this._jumpTextNumber[_i2]]) {
              this._jumpTextArray[_i2][this._jumpTextNumber[_i2]].stopAction(jumpBy);
              this._jumpTextArray[_i2][this._jumpTextNumber[_i2]].runAction(jumpBy);
            }
          }
        }
      },
      onDestroy: function onDestroy() {
        fun.event.remove("PukeUI_Chat");
        PukeManager.onDestroy();
        Audio.stopMusic();
        this._jumpTextArray[i] = [];
      },
      getPukeSpriteById: function getPukeSpriteById(paiId) {
        return "pai" === paiId ? this.PukeAltas.getSpriteFrame("Paiback") : this.PukeAltas.getSpriteFrame(paiId);
      },
      getSeatByNumber: function getSeatByNumber(num) {
        return this.Players.getChildByName("player" + num);
      },
      initPool: function initPool() {
        this.GoldPool = new cc.NodePool();
        for (var _i3 = 0; _i3 < PukeDefine.GOLD_POOL_NUMBER; ++_i3) {
          var gold = cc.instantiate(this.Gold);
          this.GoldPool.put(gold);
        }
        this.PukePool = new cc.NodePool();
        var pukePoolNumber = 6 * PukeDefine.GAME_TYPE[this.GameType].PUKE_NUMBER;
        for (var _i4 = 0; _i4 < pukePoolNumber; ++_i4) {
          var puke = cc.instantiate(this.Puke);
          this.PukePool.put(puke);
        }
        this.CuoPaiPool = new cc.NodePool();
        var cuoPai = cc.instantiate(this.CuoPai);
        this.CuoPaiPool.put(cuoPai);
      },
      scheduleOnceFunc: function scheduleOnceFunc(func, time) {
        this.scheduleOnce(function() {
          func();
        }, time);
      },
      initState: function initState() {
        this._jumpTextArray = new Array();
        this._isJumpText = new Array();
        this._jumpDtTime = new Array();
        this._jumpTextNumber = new Array();
        this._jumpTextLength = new Array();
        this._jumpBy = new Array();
        this._jumpTextTime = PukeDefine.TEXT_JUMP_TIME;
        for (var _i5 = 0; _i5 < 6; ++_i5) {
          this._jumpTextArray[_i5] = new Array();
          this._jumpBy[_i5] = new Array();
        }
      },
      setState: function setState(msg) {
        msg.state.active = true;
        var txt = msg.state.getChildByName("label");
        txt.getComponent(cc.Label).string = msg.content;
        var rgb0 = {
          r: 148,
          g: 151,
          b: 221,
          a: 255
        };
        var rgb1 = {
          r: 190,
          g: 108,
          b: 53,
          a: 255
        };
        var color = 0 === msg.color ? rgb0 : rgb1;
        txt.color = new cc.Color(color);
        this.jumpTextAnim(txt, msg.content, color);
      },
      initSeat: function initSeat() {
        var _this = this;
        var self = this;
        var pukeNumber = PukeDefine.GAME_TYPE[this.GameType].PUKE_NUMBER;
        var pukePosition = PukeDefine.GAME_TYPE[this.GameType].PUKE_POSITION;
        this._spineCacheComplete = new Array();
        var _loop = function _loop(_i6) {
          var seat = _this.getSeatByNumber(_i6);
          var HeadBox = seat.getChildByName("headBox");
          seat.HeadImg = HeadBox.getChildByName("headImg");
          seat.Mask = HeadBox.getChildByName("mask");
          seat.Name = seat.getChildByName("name").getComponent(cc.Label);
          seat.Fen = seat.getChildByName("fen").getChildByName("label").getComponent(cc.Label);
          seat.State = seat.getChildByName("state");
          seat.YaBox = seat.getChildByName("yaBox");
          seat.YaZhu = seat.YaBox.getChildByName("yaZhu").getComponent(cc.Label);
          seat.Ying = seat.getChildByName("ying");
          seat.YingLabel = seat.Ying.getChildByName("label").getComponent(cc.Label);
          seat.Shu = seat.getChildByName("shu");
          seat.ShuLabel = seat.Shu.getChildByName("label").getComponent(cc.Label);
          seat.ShuZi = seat.getChildByName("shuzi");
          seat.ShuZiSp = seat.ShuZi.getComponent(sp.Skeleton);
          if (4 === _this.GameType) {
            var url = void 0;
            if (1 === _i6) {
              seat.ShuZi.setPosition(cc.p(490, -52));
              seat.ShuZi.scale = .9;
              url = PukeDefine.RESOURCE_FOLDER_PATH.SPINE.Niuniu_Dazi;
            } else {
              seat.ShuZi.setPosition(cc.p(10, -190));
              seat.ShuZi.scale = 1;
              url = PukeDefine.RESOURCE_FOLDER_PATH.SPINE.Niuniu_Xiaozi;
            }
            PukeUtils.LoadRes(url, "sp.SkeletonData", function(res) {
              seat.ShuZiSp.skeletonData = res;
              self._spineCacheComplete[self._spineCacheComplete.length] = _i6;
            });
          } else if (2 === _this.GameType) {
            var _url = void 0;
            if (1 === _i6) {
              seat.ShuZi.setPosition(cc.p(475, -26));
              seat.ShuZi.scale = .9;
              _url = PukeDefine.RESOURCE_FOLDER_PATH.SPINE.Sangong_Dazi;
            } else {
              seat.ShuZi.setPosition(cc.p(20, -182));
              seat.ShuZi.scale = .9;
              _url = PukeDefine.RESOURCE_FOLDER_PATH.SPINE.Sangong_Xiaozi;
            }
            PukeUtils.LoadRes(_url, "sp.SkeletonData", function(res) {
              seat.ShuZiSp.skeletonData = res;
            });
          }
          seat.Readying = seat.getChildByName("readying");
          seat.ChatImg = seat.getChildByName("chatImg");
          seat.Speaker = seat.getChildByName("speaker");
          var who = 1 === _i6 ? "MINE_ACCOUNT" : "OTHER_ACCOUNT";
          for (var num = 1; num <= 5; ++num) {
            seat["Puke" + num] = seat.getChildByName("puke" + num);
            if (num <= pukeNumber) {
              var posx = PukeDefine.POSITION.PUKE[pukePosition][num][who].x;
              seat["Puke" + num].setPositionX(posx);
            }
          }
          seat.Zhuang = seat.getChildByName("zhuang");
          seat.ZhuangSp = seat.Zhuang.getComponent(sp.Skeleton);
          if (1 === _i6) {
            seat.Zhuang.scale = 1.3;
            var DZhuangSp = seat.Zhuang.getChildByName("dingZhuang");
            DZhuangSp.setPositionX(DZhuangSp.getPositionX() - 20);
          }
          _this.resetSeat(_i6);
        };
        for (var _i6 = 1; _i6 <= 6; _i6++) _loop(_i6);
      },
      resetSeat: function resetSeat(seatNumber) {
        var seat = this.getSeatByNumber(seatNumber);
        seat.active = false;
        seat.State.active = false;
        seat.Mask.active = false;
        seat.YaBox.active = false;
        seat.Shu.active = false;
        seat.Ying.active = false;
        seat.ShuZi.active = false;
        seat.Readying.active = false;
        seat.ChatImg.active = false;
        seat.Speaker.active = false;
        for (var num = 1; num <= 5; ++num) seat["Puke" + num].active = false;
        seat.Zhuang.active = false;
        seat.RoomIdx = -1;
        seat.Ip = "";
        seat.UserId = -1;
        seat.Sex = -1;
        seat.SeatNumber = seatNumber;
        var uN = this.ChildNode.getChildByName("userinfo");
        for (var _i7 = 0; _i7 < uN.children.length; ++_i7) uN.children[_i7].getTag() === seatNumber && uN.children[_i7].removeFromParent();
      },
      initRoomInfo: function initRoomInfo(msg) {
        this.Background.getChildByName("version").getComponent(cc.Label).string = gameConst.version;
        this.RoomInfoNode.getChildByName("roomid").getComponent(cc.Label).string = msg.RoomId;
        this.setJuShuText(msg.Round + "/" + msg.Total);
        this.RoomInfoNode.getChildByName("zhuangwei").getComponent(cc.Label).string = msg.ZhuangWei;
        this.RoomInfoNode.getChildByName("difen").getComponent(cc.Label).string = msg.DiFen;
        this.BtnLeave.getChildByName("label").getComponent(cc.Label).string = msg.IsMaster;
        this.BtnReady.active = false;
        this.MenuBg.active = false;
        this.showHint(false);
        this.setBtnXiaZhuActive(false);
        this.setBtnQZhuangActive(false);
        this.setBtnCuoPaiActive(false);
        this.setBtnInviteActive(false);
      },
      initSgRoomInfoDetail: function initSgRoomInfoDetail() {
        if (2 !== this.GameType) return;
        var roomInfo = this.RoomInfo;
        var sginfo = this.RoomInfoNode.getChildByName("sgRoomInfo");
        var sx = PukeDefine.ROOM_INFO.SHI_XIAN[roomInfo.TimeLimit];
        sginfo.getChildByName("shixian").getComponent(cc.Label).string = sx;
        var func = function func(data) {
          return data ? data + "\n" : "";
        };
        var zsz = false, jzjr = false;
        for (var _i8 = 0; _i8 < roomInfo.Special.length; ++_i8) {
          1 === roomInfo.Special[_i8] && (zsz = "涨缩注");
          2 === roomInfo.Special[_i8] && (jzjr = "游戏开始后禁止加入");
        }
        var teshu = func(zsz) + func(jzjr);
        var teshuN = sginfo.getChildByName("teshu");
        teshuN.getComponent(cc.Label).string = teshu;
      },
      initNnRoomInfoDetail: function initNnRoomInfoDetail() {
        if (4 !== this.GameType) return;
        var roomInfo = this.RoomInfo.roomRule;
        var nninfo = this.RoomInfoNode.getChildByName("nnRoomInfo");
        var sx = "";
        nninfo.getChildByName("shixian").getComponent(cc.Label).string = sx;
        var kd = 1 === roomInfo.kanDou && "坎斗(x5)";
        var whn = 1 === roomInfo.wuHua && "五花牛(x6)";
        var zdn = 1 === roomInfo.zhaDan && "炸弹牛(x8)";
        var wxn = 1 === roomInfo.wuXiao && "五小牛(x10)";
        var func = function func(data) {
          return data ? data + "\n" : "";
        };
        var wanfa = func(kd) + func(whn) + func(zdn) + func(wxn);
        var wanfaN = nninfo.getChildByName("wanfa");
        wanfaN.getComponent(cc.Label).string = wanfa;
        var bs = PukeDefine.NIUNIU_ROOM_INFO.TYPE_SCORE[roomInfo.typeScore - 1];
        var beishuN = nninfo.getChildByName("beishu");
        beishuN.setPositionY(wanfaN.getPositionY() - wanfaN.getContentSize().height + 20);
        beishuN.getComponent(cc.Label).string = bs;
        var xjtz = 1 === roomInfo.xianJia && "闲家推注";
        var jzjr = 1 === roomInfo.joinLimit ? "游戏开始后禁止加入" : "游戏开始后可以加入";
        var zsz = 1 === roomInfo.zhangSuo && "涨缩注";
        var sd = 1 === roomInfo.shunDou && "顺斗";
        var teshu = func(xjtz) + func(jzjr) + func(zsz) + func(sd);
        var teshuN = nninfo.getChildByName("teshu");
        teshuN.setPositionY(beishuN.getPositionY() - beishuN.getContentSize().height - 5);
        teshuN.getComponent(cc.Label).string = teshu;
      },
      setCreateSeat: function setCreateSeat() {
        var seat = this.getSeatByNumber(1);
        seat.active = true;
        var UserInfo = fun.db.getData("UserInfo");
        cc.log(UserInfo);
        fun.utils.loadUrlRes(UserInfo.UserHeadUrl, seat.HeadImg);
        seat.Name.string = UserInfo.UserName;
        seat._Name = UserInfo.UserName;
        seat.UserId = UserInfo.UserId;
        seat.Fen.string = 0;
        seat.RoomIdx = 0;
        seat.Ip = UserInfo.Ip;
        seat.Location = UserInfo.location;
        seat.Sex = UserInfo.UserSex;
        seat.HeadUrl = UserInfo.UserHeadUrl;
        this.BtnReady.active = true;
        this.setBtnInviteActive(true);
        this.showHint(PukeDefine.HINT_TEXT.WAIT_READY);
      },
      setEnterSeat: function setEnterSeat(seatNumber, player) {
        var UserInfo = fun.db.getData("UserInfo");
        var seat = this.getSeatByNumber(seatNumber);
        seat.active = true;
        fun.utils.loadUrlRes(player.HeadUrl, seat.HeadImg);
        seat.Name.string = player.Name;
        seat._Name = player.Name;
        seat.UserId = player.UserId;
        seat.Fen.string = player.Score;
        seat.RoomIdx = player.RoomIdx;
        seat.Ip = player.Ip;
        seat.Location = player.Address;
        seat.Sex = player.Sex;
        seat.HeadUrl = player.HeadUrl;
        if (player.Zhu <= 0) seat.YaBox.active = false; else {
          seat.YaBox.active = true;
          seat.YaZhu.string = player.Zhu;
        }
        var isMine = player.UserId === UserInfo.UserId;
        if (2 === this.GameType) if (1 === this.getGameStatus() || 2 === this.getGameStatus()) {
          1 === this.getGameStatus() && this.setBtnInviteActive(true);
          seat.Readying.active = player.Ready;
          if (isMine) {
            this.showHint(PukeDefine.HINT_TEXT.WAIT_READY);
            this.BtnReady.active = !player.Ready;
          }
        } else 3 === this.getGameStatus() && isMine ? this.showHint(PukeDefine.HINT_TEXT.WAIT_QIANG_ZHUANG) : 5 === this.getGameStatus() && isMine && this.showHint(PukeDefine.HINT_TEXT.WAIT_XIA_ZHU); else if (4 === this.GameType) {
          if (1 === this.getGameStatus() || 0 === this.getGameStatus()) {
            "0" === this.getJuShuText().substring(0, 1) && 0 === this.getGameStatus() && this.setBtnInviteActive(true);
            isMine && this.showHint(PukeDefine.HINT_TEXT.WAIT_READY);
          }
          isMine && (void 0 !== player.newUser && player.newUser && player.GamePhase > 1 ? this.showHint(PukeDefine.HINT_TEXT.WAIT_CURRENT_END) : this.BtnReady.active = !player.Ready);
          this.getGameStatus() <= 1 ? seat.Readying.active = player.Ready : seat.Readying.active = false;
        }
      },
      setGameStatus: function setGameStatus(status) {
        this.GameStatus = status;
      },
      getGameStatus: function getGameStatus() {
        return this.GameStatus;
      },
      getSpineCacheComplete: function getSpineCacheComplete() {
        return this._spineCacheComplete;
      },
      showHint: function showHint(content, id) {
        if (content) {
          this.HintBack.active = true;
          var con = this.HintBack.getChildByName("content");
          con.getComponent(cc.Label).string = content;
        } else this.HintBack.active = false;
      },
      setCountDownTime: function setCountDownTime(active, time) {
        this.HintBack.getChildByName("time").active = active;
        this._countDtTime = 0;
        this._isCountdownTime = active;
        this._CountdownTime = time;
      },
      showXiaZhu: function showXiaZhu(zhus) {
        if (zhus.length >= 3) for (var _i9 = 0; _i9 < 3; _i9++) {
          this.XiaZhu[_i9].active = true;
          this.XiaZhu[_i9].getChildByName("label").getComponent(cc.Label).string = zhus[_i9];
          var posx = 0 === _i9 ? -195 : 1 === _i9 ? 0 : 195;
          this.XiaZhu[_i9].setPositionX(posx);
        } else if (2 === zhus.length) {
          this.XiaZhu[0].active = false;
          this.XiaZhu[1].active = true;
          this.XiaZhu[1].setPositionX(-120);
          this.XiaZhu[2].setPositionX(120);
          this.XiaZhu[1].getChildByName("label").getComponent(cc.Label).string = zhus[0];
          this.XiaZhu[2].getChildByName("label").getComponent(cc.Label).string = zhus[1];
        } else if (1 === zhus.length) {
          this.XiaZhu[0].active = false;
          this.XiaZhu[1].active = false;
          this.XiaZhu[2].setPositionX(0);
          this.XiaZhu[2].getChildByName("label").getComponent(cc.Label).string = zhus[0];
        }
      },
      getIsXuYa: function getIsXuYa() {
        return this.BtnXuYa.getComponent(cc.Toggle).isChecked;
      },
      setJuShuText: function setJuShuText(text) {
        this.RoomInfoNode.getChildByName("jushu").getComponent(cc.Label).string = text;
      },
      getJuShuText: function getJuShuText() {
        return this.RoomInfoNode.getChildByName("jushu").getComponent(cc.Label).string;
      },
      getChildNode: function getChildNode() {
        return this.ChildNode;
      },
      onTotalAccountAck: function onTotalAccountAck() {
        return cc.instantiate(this.PukeAccount);
      },
      putInGoldPool: function putInGoldPool(msg) {
        this.GoldPool.put(msg);
      },
      getFromGoldPool: function getFromGoldPool() {
        return this.GoldPool.get();
      },
      getGoldsNode: function getGoldsNode() {
        return this.Golds;
      },
      getPukePool: function getPukePool() {
        return this.PukePool;
      },
      getCuoPaiPool: function getCuoPaiPool() {
        return this.CuoPaiPool;
      },
      getDisband: function getDisband() {
        var copyDisband = cc.instantiate(this.DisbandPrefab);
        copyDisband.setPosition(cc.p(0, 0));
        copyDisband.parent = this.ChildNode.getChildByName("disband");
        return copyDisband;
      },
      onBtnHeadClicked: function onBtnHeadClicked(sender, player) {
        Audio.playEffect("hall", "button_nomal.mp3");
        var seat = this.getSeatByNumber(player);
        var data = {};
        data.name = seat.Name.string;
        data.id = "ID: " + seat.UserId;
        data.addr = null === seat.Location ? "未开启定位" : seat.Location.locdesc;
        data.url = seat.HeadUrl;
        data.isSelf = 1 === parseInt(player);
        data.isNoLocation = true;
        data.selfUid = fun.db.getData("UserInfo").UserId;
        data.curUid = seat.UserId;
        var head = cc.instantiate(this.BtnHead);
        var pos = PukeDefine.POSITION.DETAIL[player];
        head.setPosition(cc.p(pos.x, pos.y));
        head.getComponent("playerDetailUI").show(data);
        head.setTag(parseInt(player));
        head.parent = this.ChildNode.getChildByName("userinfo");
      },
      onBtnInviteClicked: function onBtnInviteClicked() {
        Audio.playEffect("hall", "button_nomal.mp3");
        PukeManager.wxShare();
      },
      onBtnSetClicked: function onBtnSetClicked() {
        Audio.playEffect("hall", "button_nomal.mp3");
        this.setMenuBgActive(false);
        var set = cc.instantiate(this.SetPrefab);
        set.setPosition(0, 0);
        set.getComponent("set").setGameType("pork");
        set.parent = this.ChildNode.getChildByName("userinfo");
      },
      onBtnSkinClicked: function onBtnSkinClicked() {
        Audio.playEffect("hall", "button_nomal.mp3");
        this.setMenuBgActive(false);
        this.copyPrefabActive(this.Skin, "copySkin");
      },
      onBtnReadyClicked: function onBtnReadyClicked() {
        Audio.playEffect("hall", "button_nomal.mp3");
        PukeManager.ReadyFunction();
      },
      onBtnQiangZhuangClicked: function onBtnQiangZhuangClicked() {
        Audio.playEffect("hall", "button_nomal.mp3");
        PukeManager.QZhuangFunction(0);
      },
      onBtnNotQiangZhuangClicked: function onBtnNotQiangZhuangClicked() {
        Audio.playEffect("hall", "button_nomal.mp3");
        PukeManager.QZhuangFunction(1);
      },
      onBtnXiaZhuClicked: function onBtnXiaZhuClicked(sender, num) {
        Audio.playEffect("hall", "button_nomal.mp3");
        PukeManager.YaZhuFunction(num);
      },
      onBtnTuiZhuClicked: function onBtnTuiZhuClicked() {
        Audio.playEffect("hall", "button_nomal.mp3");
        PukeManager.TuiZhuFunction();
      },
      onBtnXuYaClicked: function onBtnXuYaClicked() {
        Audio.playEffect("hall", "button_nomal.mp3");
        var isXuYa = this.BtnXuYa.getComponent(cc.Toggle).isChecked;
        PukeData.setXuYa(isXuYa);
      },
      onBtnCuoPaiClicked: function onBtnCuoPaiClicked(sender, type) {
        Audio.playEffect("hall", "button_nomal.mp3");
        PukeManager.cuoPaiAnimation(type);
      },
      onBtnMenuClicked: function onBtnMenuClicked() {
        Audio.playEffect("hall", "button_nomal.mp3");
        this.MenuBg.active = !this.MenuBg.active;
      },
      onBtnRoomInfoClicked: function onBtnRoomInfoClicked() {
        var roominfo = this.RoomInfoNode.getChildByName("roomInfo");
        var btn = this.RoomInfoNode.getChildByName("btnRoomInfo");
        var isUp = btn.getScaleY() < 0;
        this._roomInfoUp = isUp;
        var scaleX = isUp ? 1.5 : 2 / 3;
        var scaleY = isUp ? 3 : 1 / 3;
        var scaleBy = cc.scaleBy(.1, scaleX, scaleY);
        roominfo.runAction(scaleBy);
        var pos = isUp ? {
          x: -500,
          y: -80
        } : {
          x: -555,
          y: 215
        };
        var moveTo = cc.moveTo(.1, cc.p(pos.x, pos.y));
        btn.runAction(moveTo);
        if (2 === this.GameType) {
          var sg = this.RoomInfoNode.getChildByName("sgRoomInfo");
          sg.active = isUp;
        } else this.scheduleOnce(function() {
          var nn = this.RoomInfoNode.getChildByName("nnRoomInfo");
          nn.active = isUp;
        }, .05);
        btn.setScaleY(-btn.getScaleY());
      },
      onBtnLeaveClicked: function onBtnLeaveClicked() {
        Audio.playEffect("hall", "button_nomal.mp3");
        this.setMenuBgActive(false);
        PukeManager.LeaveRoomFunction();
      },
      copyPrefabActive: function copyPrefabActive(prefab, copyPrefab, func) {
        if (this[copyPrefab]) this[copyPrefab].active = true; else {
          this[copyPrefab] = cc.instantiate(prefab);
          this[copyPrefab].setPosition(0, 0);
          this[copyPrefab].parent = this.ChildNode.getChildByName("userinfo");
          func && func(this[copyPrefab]);
        }
      },
      setBtnReadyActive: function setBtnReadyActive(active) {
        this.BtnReady.active = active;
      },
      setBtnQZhuangActive: function setBtnQZhuangActive(active) {
        this.BtnQiangZhuang.active = active;
        this.BtnNotQiangZhuang.active = active;
      },
      setBtnInviteActive: function setBtnInviteActive(active) {
        fun.gameCfg.releaseType !== gameConst.releaseType.apple && (this.BtnInvite.active = active);
        this.BtnLeave.active = active;
      },
      setBtnXiaZhuActive: function setBtnXiaZhuActive(active) {
        this.XiaZhuBtns.active = active;
      },
      setBtnTuiZhuActive: function setBtnTuiZhuActive(active) {
        this.BtnTuiZhu.active = active;
      },
      setBtnCuoPaiActive: function setBtnCuoPaiActive(active) {
        this.BtnCuoPai.active = active;
        this.BtnLiangPai.active = active;
      },
      setMenuBgActive: function setMenuBgActive(active) {
        this.MenuBg.active = active;
      },
      setBtnXuYaActive: function setBtnXuYaActive(active) {
        this.BtnXuYa.active = active;
      },
      onPukeChatUI: function onPukeChatUI(data) {
        var fromSeat = PukeManager.getSeatByUserId(data.fromId);
        var toSeat = null === data.toId ? null : PukeManager.getSeatByUserId(data.toId);
        data.func(fromSeat, toSeat);
      },
      jumpTextAnim: function jumpTextAnim(node, text, color) {
        return;
        var sn;
        var len;
        var pos;
        var _i11;
        var label;
        var _i10;
        var j;
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio",
    NiuNiuCfg: "NiuNiuCfg",
    NiuNiuManager: "NiuNiuManager",
    PukeData: "PukeData",
    PukeDefine: "PukeDefine",
    PukeUtils: "PukeUtils",
    SanGongCfg: "SanGongCfg",
    SanGongManager: "SanGongManager"
  } ],
  PukeUtils: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "50dc4/BiFFISJyUGo6iYF08", "PukeUtils");
    "use strict";
    var SanGongCfg = require("SanGongCfg");
    var NiuNiuCfg = require("NiuNiuCfg");
    var loadedRes = {};
    var PukeUtils = {
      pSub: function pSub(pt1, pt2) {
        return {
          x: pt1.x - pt2.x,
          y: pt1.y - pt2.y
        };
      },
      pGetLength: function pGetLength(pt) {
        return Math.sqrt(Math.pow(pt.x, 2) + Math.pow(pt.y, 2));
      },
      pGetDistance: function pGetDistance(startP, endP) {
        return this.pGetLength(this.pSub(startP, endP));
      },
      LoadRes: function LoadRes(filepath, name, callback) {
        "SpriteFrame" === name ? cc.loader.loadRes(filepath, cc.SpriteFrame, function(err, frame) {
          if (err) {
            cc.error(err.message || err);
            return;
          }
          callback(frame);
        }) : "sp.SkeletonData" === name && cc.loader.loadRes(filepath, sp.SkeletonData, function(err, res) {
          if (err) {
            cc.error(err.message || err);
            return;
          }
          callback(res);
        });
      },
      buttonTouch: function buttonTouch(button, scale, initScale, func) {
        var scaleDownAction = cc.scaleTo(.1, scale);
        var scaleUpAction = cc.scaleTo(.1, initScale);
        var touch = button.getChildByName("touch");
        touch.on("touchstart", function() {
          button.stopAllActions();
          button.runAction(scaleDownAction);
        });
        touch.on("touchend", function() {
          button.stopAllActions();
          button.runAction(cc.sequence(scaleUpAction, cc.callFunc(function() {
            func();
          })));
        });
        touch.on("touchcancel", function() {
          button.stopAllActions();
          button.runAction(scaleUpAction);
        });
      },
      VerificationPhoneCode: function VerificationPhoneCode(phoneNumber) {
        if (0 === phoneNumber.length) return "NO_NUMBER";
        var myreg = /^(((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1}))+\d{8})$/;
        return 11 === phoneNumber.length && myreg.test(phoneNumber) ? "SUCCESS" : "FAILED";
      },
      getLength: function getLength(obj) {
        var count = 0;
        for (var value in obj) obj.hasOwnProperty(value) && count++;
        return count;
      }
    };
    module.exports = PukeUtils;
    cc._RF.pop();
  }, {
    NiuNiuCfg: "NiuNiuCfg",
    SanGongCfg: "SanGongCfg"
  } ],
  SanGongCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a358bOZxQNOP4TgaBTaSUSl", "SanGongCfg");
    "use strict";
    var SanGongCfg = {
      LeaveRoom: {
        id: "LeaveRoom",
        desc: "离开房间",
        req: 400,
        rsp: 500,
        notify: 600
      },
      DisbandRoomVote: {
        id: "DisbandRoomVote",
        desc: "解散牌局投票",
        req: 401,
        rsp: 501,
        notify: 601
      },
      DisbandRoomResult: {
        id: "DisbandRoomResult",
        desc: "解散房间投票结果",
        req: 402,
        rsp: 502,
        notify: 602
      },
      ReadyNext: {
        id: "ReadyNext",
        desc: "准备好了可以下一局",
        req: 403,
        rsp: 503,
        notify: 603
      },
      StartGame: {
        id: "StartGame",
        desc: "三公开始请求",
        req: 404,
        rsp: 504,
        notify: 604
      },
      YaZhu: {
        id: "YaZhu",
        desc: "三公开始压注",
        req: 405,
        rsp: 505,
        notify: 605
      },
      SomeOneYaZhu: {
        id: "SomeOneYaZhu",
        desc: "三公有人压注",
        req: 406,
        rsp: 506,
        notify: 606
      },
      ShowCard: {
        id: "ShowCard",
        desc: "三公翻出第3张牌",
        req: 407,
        rsp: 507,
        notify: 607
      },
      Qzhuang: {
        id: "Qzhuang",
        desc: "三公抢庄",
        req: 408,
        rsp: 508,
        notify: 608
      },
      Zhuang: {
        id: "Zhuang",
        desc: "庄",
        req: 409,
        rsp: 509,
        notify: 609
      },
      AccountOne: {
        id: "AccountOne",
        desc: "单局结算",
        req: 410,
        rsp: 510,
        notify: 610
      },
      AccountAll: {
        id: "AccountAll",
        desc: "结算多局",
        req: 411,
        rsp: 511,
        notify: 611
      }
    };
    module.exports = SanGongCfg;
    cc._RF.pop();
  }, {} ],
  SanGongManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8265f0mtItErJK7rHKWSRFR", "SanGongManager");
    "use strict";
    var SanGongManager = {};
    var PukeData = require("PukeData");
    var funUtils = require("funUtils");
    var PukeUtils = require("PukeUtils");
    var PukeDefine = require("PukeDefine");
    var Audio = require("Audio");
    SanGongManager.initGame = function(gameUICB) {
      this.gameUICB = gameUICB;
      this.UserInfo = fun.db.getData("UserInfo", true);
      this.MineUserId = this.UserInfo.UserId;
      this.MineSeat = this.getSeatByNumber(1);
      this.data = fun.db.getData("RoomInfo");
      this.MineIsMaster = this.getRoomMasterByRoomInfo();
      this.FirstEnterRoom = true;
      this.initRoomInfo();
      this.initSeatInfo();
      this.initQZhuangFunction();
      this.initListener();
    };
    SanGongManager.update = function(dt) {
      if (this.StartChooseZhuang) {
        this.qzDtTime = (this.qzDtTime || 0) + dt;
        var chaTime = PukeDefine.QIANG_ZHUANG_WAIT_TIME - this.DingZhuangTime;
        if (this.qzDtTime >= chaTime) {
          this.gameUICB.setBtnQZhuangActive(false);
          this.gameUICB.showHint(false);
          this.seatNum = this.QiangZhuangSeat.length;
          var qzPersonNum = 0 === this.seatNum ? this.ZeroZhuangSeat.length : this.seatNum;
          this.TurnZhuangTime = PukeDefine.QIANG_ZHUANG_TURN_TIME / (5 * qzPersonNum);
          this.tzDtSingle = 0;
          this.tzDtMore = 0;
          this.TurnZhuangCount = 0;
          this.TurnZhuang = true;
          this.StartChooseZhuang = false;
          this.qzDtTime = 0;
        }
      }
      if (this.TurnZhuang) if (0 === this.seatNum) {
        this.tzDtSingle += dt;
        if (this.tzDtSingle >= this.TurnZhuangTime) {
          this.tzDtSingle -= this.TurnZhuangTime;
          this.TurnZhuangCount = this.TurnZhuangCount === this.ZeroZhuangSeat.length ? 1 : this.TurnZhuangCount + 1;
          this.setZhuangFalse();
          var seat = this.getSeatByNumber(this.ZeroZhuangSeat[this.TurnZhuangCount - 1]);
          seat.Zhuang.active = true;
        }
      } else if (this.seatNum >= 2) {
        this.tzDtMore += dt;
        if (this.tzDtMore >= this.TurnZhuangTime) {
          this.tzDtMore -= this.TurnZhuangTime;
          this.TurnZhuangCount = this.TurnZhuangCount === this.seatNum ? 1 : this.TurnZhuangCount + 1;
          this.setZhuangFalse();
          var _seat = this.getSeatByNumber(this.QiangZhuangSeat[this.TurnZhuangCount - 1]);
          _seat.Zhuang.active = true;
        }
      }
    };
    SanGongManager.onDestroy = function() {
      this.cleanListener();
      this.UserInfo.RoomId = 0;
      fun.db.setData("UserInfo", this.UserInfo);
      this.SeatArray = [];
      this.UserInfo = {};
      this.data = {};
      this.faPaiPukes = [];
      this.faPaiSeats = [];
      this.QiangZhuangSeat = [];
      this.ZeroZhuangSeat = [];
      this.copyDisbandPrefab = void 0;
      this.copyTotalAccount = void 0;
    };
    SanGongManager.updateSeatNumber = function(player) {
      var minePlayer = {};
      if ("enter" === this.data.EnterRoom) for (var i in player) {
        var value = player[i];
        this.checkIsMineUserId(value.UserId) && (minePlayer = value);
      } else "create" === this.data.EnterRoom && (minePlayer = this.data);
      this.SeatArray = new Array();
      for (var _i = 0; _i < 6; _i++) 0 === _i ? this.SeatArray[0] = minePlayer.RoomIdx : this.SeatArray[_i] = "";
      if ("enter" === this.data.EnterRoom) for (var _i2 in player) {
        var _value = player[_i2];
        var cha = Math.abs(minePlayer.RoomIdx - _value.RoomIdx);
        minePlayer.RoomIdx > _value.RoomIdx ? this.SeatArray[6 - cha] = _value.RoomIdx : minePlayer.RoomIdx < _value.RoomIdx && (this.SeatArray[cha] = _value.RoomIdx);
      }
    };
    SanGongManager.getSeatNumberByRoomIdx = function(roomIdx) {
      for (var i = 0; i < this.SeatArray.length; i++) if (this.SeatArray[i] === roomIdx) return i + 1;
      return roomIdx + 1;
    };
    SanGongManager.getSeatByNumber = function(num) {
      return this.gameUICB.getSeatByNumber(num);
    };
    SanGongManager.getSeatByUserId = function(id) {
      for (var i = 1; i <= 6; i++) {
        var seat = this.getSeatByNumber(i);
        if (parseInt(seat.UserId) === parseInt(id)) return seat;
      }
    };
    SanGongManager.getPukeSpriteById = function(id) {
      var paiId = "pai" === id ? id : Math.abs(id) - 3;
      return this.gameUICB.getPukeSpriteById(paiId);
    };
    SanGongManager.cleanSeatData = function() {
      for (var i = 1; i <= 6; i++) {
        var seat = this.getSeatByNumber(i);
        seat.Readying.active = false;
        for (var j = 1; j <= 3; j++) seat["Puke" + j].active = false;
        seat.ShuZi.active = false;
        seat.YaBox.active = false;
        seat.Ying.active = false;
        seat.Shu.active = false;
      }
    };
    SanGongManager.pushGold = function(seatNumber, goldNum) {
      this.gameUICB.getGoldsNode().active = true;
      var min = 2, max = 8, divisor = 12;
      for (var j = 0; j < PukeDefine.PUSH_GOLD_NUMBER; j++) {
        var copyGold = this.gameUICB.getFromGoldPool();
        this.gameUICB.getGoldsNode().getChildByName("seat" + seatNumber).addChild(copyGold);
        var startPos = PukeDefine.POSITION.GOLD[seatNumber].START_POS;
        copyGold.setScale(.6);
        copyGold.setPosition(cc.p(startPos.x, startPos.y));
        var time = funUtils.random(min, max) / divisor;
        var endPos = PukeDefine.POSITION.GOLD[seatNumber].END_POS;
        var randPx = endPos.x + funUtils.random(-30, 30);
        var randPy = endPos.y + funUtils.random(-30, 30);
        var distance = PukeUtils.pGetDistance(startPos, cc.p(randPx, randPy));
        var intCen = Math.floor(distance / time);
        copyGold.setLocalZOrder(1e3 - intCen);
        var moveto = cc.moveTo(time, cc.p(randPx, randPy));
        moveto.easing(cc.easeSineInOut());
        copyGold.stopAllActions();
        copyGold.runAction(moveto);
      }
      Audio.playEffect("pork", "gold.wav");
    };
    SanGongManager.callInGold = function(winSeats) {
      this.gameUICB.getGoldsNode().active = true;
      var self = this;
      var overTime = 0;
      var min = 2, max = 10, min2 = 5, max2 = 15, divisor = 15;
      var zhuangSeatNumber = this.getSeatNumberByRoomIdx(this.CurrentZhuang);
      var zhuangStartPos = PukeDefine.POSITION.GOLD[zhuangSeatNumber].START_POS;
      for (var i = 1; i <= 6; i++) {
        var seat = this.getSeatByNumber(i);
        if (seat.RoomIdx != this.CurrentZhuang) {
          var goldSeat = this.gameUICB.getGoldsNode().getChildByName("seat" + i);
          if (goldSeat.childrenCount > 0) {
            var _loop = function _loop(_i3) {
              var gold = goldSeat.children[_i3];
              var time = funUtils.random(min, max) / divisor;
              overTime = Math.max(time, overTime);
              var moveto = cc.moveTo(time, cc.p(zhuangStartPos.x, zhuangStartPos.y));
              moveto.easing(cc.easeSineInOut());
              gold.runAction(cc.sequence(moveto, cc.callFunc(function() {
                self.gameUICB.putInGoldPool(gold);
              })));
            };
            for (var _i3 = 0; _i3 < goldSeat.children.length; ++_i3) _loop(_i3);
          }
        }
      }
      Audio.playEffect("pork", "gold.wav");
      this.gameUICB.scheduleOnceFunc(function() {
        var isZhuangShu = false;
        for (var _i4 in winSeats) {
          var winSeat = winSeats[_i4];
          winSeat.RoomIdx != self.CurrentZhuang && function() {
            var goldWinSeat = self.gameUICB.getGoldsNode().getChildByName("seat" + winSeat.SeatNumber);
            var goldStartPos = PukeDefine.POSITION.GOLD[winSeat.SeatNumber].START_POS;
            for (var j in winSeat.Slice) {
              var value = winSeat.Slice[j];
              var maxTime = 0;
              isZhuangShu = true;
              for (var k = 0; k < PukeDefine.PUSH_GOLD_NUMBER; ++k) {
                var _gold = self.gameUICB.getFromGoldPool();
                goldWinSeat.addChild(_gold);
                _gold.setPosition(cc.p(zhuangStartPos.x, zhuangStartPos.y));
                var time = funUtils.random(min2, max2) / divisor;
                maxTime = Math.max(time, maxTime);
                var moveto = cc.moveTo(time, cc.p(goldStartPos.x, goldStartPos.y));
                moveto.easing(cc.easeSineInOut());
                _gold.stopAllActions();
                _gold.runAction(cc.sequence(moveto, cc.callFunc(function() {
                  for (var m = 0; m < goldWinSeat.children.length; ++m) {
                    var _gold2 = goldWinSeat.children[m];
                    self.gameUICB.putInGoldPool(_gold2);
                  }
                })));
              }
              self.gameUICB.scheduleOnceFunc(function() {
                self.gameUICB.getGoldsNode().active = false;
                for (var num in goldWinSeat.children) self.gameUICB.putInGoldPool(goldWinSeat.children[num]);
              }, .98 * maxTime);
            }
          }();
        }
        isZhuangShu && Audio.playEffect("pork", "gold.wav");
      }, overTime);
    };
    SanGongManager.faPaiAnimation = function(index) {
      Audio.playEffect("pork", "fapai.mp3");
      var self = this;
      if (index >= this.faPaiPukes.length) this.gameUICB.scheduleOnceFunc(function() {
        self.setState("搓牌中");
        self.gameUICB.setBtnCuoPaiActive(true);
      }, PukeDefine.SEND_CARD_COMPLETE_TIME); else {
        var _self = this;
        var time = PukeDefine.SEND_CARD_SINGLE_TIME;
        var copyPuke = this.gameUICB.getPukePool().get();
        copyPuke.setPosition(0, 0);
        this.gameUICB.getChildNode().getChildByName("puke").addChild(copyPuke);
        var px = this.faPaiPukes[index].x, py = this.faPaiPukes[index].y;
        var moveto = cc.moveTo(time, cc.p(px, py));
        moveto.easing(cc.easeSineInOut());
        copyPuke.runAction(cc.sequence(moveto, cc.callFunc(function() {
          _self.gameUICB.getPukePool().put(copyPuke);
          var count = index % 3 + 1;
          var seat = _self.faPaiSeats[Math.floor(index / 3)];
          var seatPuke = seat.getChildByName("puke" + count);
          if (_self.checkIsMineUserId(seat.UserId) && 3 != count) {
            var puke = _self.faPaiSeats.myCards[count - 1];
            seatPuke.getComponent(cc.Sprite).spriteFrame = _self.getPukeSpriteById(puke);
          } else seatPuke.getComponent(cc.Sprite).spriteFrame = _self.getPukeSpriteById("pai");
          seatPuke.active = true;
          index += 1;
          _self.faPaiAnimation(index);
        })));
      }
    };
    SanGongManager.cuoPaiAnimation = function(type, showType) {
      this.gameUICB.setBtnCuoPaiActive(false);
      this.isCuoPaiComplete = false;
      this.copyCuoPai && this.gameUICB.getCuoPaiPool().put(this.copyCuoPai);
      var self = this;
      var seat = this.getSeatByNumber(1);
      var pukeCuo = seat.getChildByName("puke3");
      pukeCuo.active = false;
      this.copyCuoPai = this.gameUICB.getCuoPaiPool().get();
      this.copyCuoPai.setPosition(0, 0);
      this.gameUICB.getChildNode().getChildByName("cuopai").addChild(this.copyCuoPai);
      var data = {};
      data.from = type;
      data.GameType = "SANGONG";
      data.num = this.CuoPaiNumber;
      data.cb = function() {
        "showCard" != type && fun.net.send("ShowCard", "");
        void 0 !== showType && self.showTypeFunc(seat, showType);
        self.isCuoPaiComplete = true;
        pukeCuo.active = true;
        pukeCuo.getComponent(cc.Sprite).spriteFrame = self.getPukeSpriteById(data.num);
        self.gameUICB.getCuoPaiPool().put(self.copyCuoPai);
      };
      this.copyCuoPai.getComponent("CuoPai").initPuke(data);
    };
    SanGongManager.initQZhuangFunction = function() {
      if (void 0 != this.data && 3 === this.data.DZhuang) {
        this.IsFreeQiangZhuang = true;
        this.QiangZhuangSeat = new Array();
        this.ZeroZhuangSeat = new Array();
        this.TurnZhuang = false;
      }
    };
    SanGongManager.reconnectReadyFunc = function() {
      this.FirstEnterRoom = false;
      if (void 0 != this.data.Players) for (var i in this.data.Players) {
        var player = this.data.Players[i];
        var seat = this.getSeatByUserId(player.UserId);
        player.Ready && (seat.Readying.active = true);
        this.checkIsMineUserId(player.UserId) && !player.Ready && this.gameUICB.setBtnReadyActive(true);
      }
    };
    SanGongManager.getRoomMasterByRoomInfo = function() {
      if (void 0 !== this.data.RoomIdx) return 0 === this.data.RoomIdx;
      var players = this.data.Players;
      for (var key in players) if (this.checkIsMineUserId(players[key].UserId)) return 0 === players[key].RoomIdx;
    };
    SanGongManager.setZhuangFalse = function() {
      for (var i = 0; i < 6; ++i) {
        var seat = this.getSeatByNumber(i + 1);
        seat.Zhuang.active = false;
      }
    };
    SanGongManager.checkIsMineUserId = function(id) {
      return parseInt(id) === this.MineUserId;
    };
    SanGongManager.setState = function(content) {
      for (var i = 0; i < 6; ++i) {
        var seat = this.getSeatByNumber(i + 1);
        if (seat.active) if (content) {
          var seatNumber = this.getSeatNumberByRoomIdx(this.CurrentZhuang);
          "下注中" === content && seatNumber === i + 1 ? console.log("庄家不下注") : this.gameUICB.setState({
            state: seat.State,
            content: content,
            color: 0
          });
        } else {
          seat.State.active = false;
          this.gameUICB.jumpTextAnim(false);
        }
      }
    };
    SanGongManager.initRoomInfo = function() {
      this.gameUICB.setGameStatus(this.data.Status);
      this.RoundJuShu = this.data.Round;
      this.TotalJuShu = this.data.Total;
      this.DiFen = PukeDefine.ROOM_INFO.DI_FEN[this.data.DFeng - 1];
      this.ZhuangWei = PukeDefine.ROOM_INFO.ZHUANG_WEI[this.data.DZhuang - 1];
      this.Charge = PukeDefine.ROOM_INFO.COST[this.data.Charge - 1];
      this.IsMaster = PukeDefine.ROOM_INFO.ISMASTER[this.getRoomMasterByRoomInfo() ? 0 : 1];
      var msg = {
        RoomId: this.data.RoomId,
        Round: this.RoundJuShu,
        Total: this.TotalJuShu,
        ZhuangWei: this.ZhuangWei,
        DiFen: this.DiFen[0],
        IsMaster: this.IsMaster
      };
      this.gameUICB.initRoomInfo(msg);
    };
    SanGongManager.initSeatInfo = function() {
      if ("create" === this.data.EnterRoom) {
        this.updateSeatNumber();
        this.gameUICB.setCreateSeat();
      } else if ("enter" === this.data.EnterRoom) {
        this.CardsMap = {};
        this.updateSeatNumber(this.data.Players);
        for (var i = 0; i < this.data.Players.length; i++) {
          var value = this.data.Players[i];
          var roomIdx = value.RoomIdx;
          var seatNumber = this.getSeatNumberByRoomIdx(roomIdx);
          var seat = this.getSeatByNumber(seatNumber);
          value.OnLine || (seat.Mask.active = true);
          this.gameUICB.setEnterSeat(seatNumber, value);
          if (value.Cards && 0 != value.Cards[0]) {
            this.CardsMap[value.UserId] = {};
            this.CardsMap[value.UserId].Cards = value.Cards;
            if (2 === value.Cards.length) for (var _i5 = 1; _i5 <= 3; _i5++) {
              var puke = this.getPukeSpriteById("pai");
              seat["Puke" + _i5].active = true;
              seat["Puke" + _i5].getComponent(cc.Sprite).spriteFrame = puke;
            } else if (3 === value.Cards.length) for (var _i6 = 1; _i6 <= 3; _i6++) {
              var _puke = this.getPukeSpriteById(value.Cards[_i6 - 1]);
              seat["Puke" + _i6].active = true;
              seat["Puke" + _i6].getComponent(cc.Sprite).spriteFrame = _puke;
            }
          }
          this.checkIsMineUserId(value.UserId) && (this.RecentYaZhu = 0 === value.Zhu ? 1 : value.Zhu);
        }
        if (this.data.Zhuang > -1) {
          this.CurrentZhuang = this.data.Zhuang;
          for (var _i7 = 1; _i7 <= 6; _i7++) {
            var _seat2 = this.getSeatByNumber(_i7);
            if (_seat2.RoomIdx === this.data.Zhuang) {
              _seat2.Zhuang.active = true;
              _seat2.ZhuangSp.setAnimation(0, "Zhong", false);
            }
          }
        }
      }
    };
    SanGongManager.startGameReady = function() {
      this.gameUICB.setGameStatus(6);
      this.gameUICB.setBtnInviteActive(false);
      for (var i = 1; i <= 6; i++) {
        var seat = this.getSeatByNumber(i);
        seat.Readying.active = false;
        seat.YaBox.active = false;
      }
    };
    SanGongManager.initListener = function() {
      this.ListenCBList = [];
      this.pListenCBList = [];
      var self = this;
      var listen = function listen(cmd, cb, isPingTai) {
        if (isPingTai) {
          fun.net.pListen(cmd, cb);
          self.pListenCBList.push(cmd);
        } else {
          fun.net.listen(cmd, cb);
          self.ListenCBList.push(cmd);
        }
      };
      listen("EnterRoom", this.onEnterRoomAck.bind(this), true);
      listen("OnLine", this.onOnLineAck.bind(this), true);
      listen("OffLine", this.onOffLineAck.bind(this), true);
      listen("ReadyNext", this.onReadyNextAck.bind(this));
      listen("Qzhuang", this.onQZhuangAck.bind(this));
      listen("Zhuang", this.onZhuangAck.bind(this));
      listen("YaZhu", this.onYaZhuAck.bind(this));
      listen("SomeOneYaZhu", this.onSomeOneYaZhuAck.bind(this));
      listen("StartGame", this.onStartGameAck.bind(this));
      listen("ShowCard", this.onShowCardAck.bind(this));
      listen("AccountOne", this.onSingleAccountAck.bind(this));
      listen("AccountAll", this.onTotalAccountAck.bind(this));
      listen("LeaveRoom", this.onLeaveRoomAck.bind(this));
      listen("DisbandRoomResult", this.onDisbandRoomResultAck.bind(this));
      listen("DisbandRoomVote", this.onDisbandRoomVoteAck.bind(this));
    };
    SanGongManager.cleanListener = function() {
      for (var i in this.ListenCBList) fun.net.rmListen(this.ListenCBList[i]);
      for (var _i8 in this.pListenCBList) fun.net.rmPListen(this.pListenCBList[_i8]);
      this.ListenCBList = [];
      this.pListenCBList = [];
    };
    SanGongManager.onEnterRoomAck = function(msg) {
      if (this.checkIsMineUserId(msg.Player.UserId)) return;
      if (void 0 === this.SeatArray) return;
      var roomIdx = msg.Player.RoomIdx;
      var cha = Math.abs(this.SeatArray[0] - roomIdx);
      this.SeatArray[0] > roomIdx ? this.SeatArray[6 - cha] = roomIdx : this.SeatArray[cha] = roomIdx;
      this.gameUICB.setEnterSeat(this.getSeatNumberByRoomIdx(roomIdx), msg.Player);
    };
    SanGongManager.onReadyNextAck = function(msg) {
      if (!msg) return;
      if (this.checkIsMineUserId(msg.UserId)) {
        this.gameUICB.setBtnReadyActive(false);
        this.MineSeat.Readying.active = true;
      } else if (0 === msg.UserId) this.FirstEnterRoom ? this.reconnectReadyFunc() : this.gameUICB.setBtnReadyActive(true); else {
        var seat = this.getSeatByUserId(msg.UserId);
        seat.Readying.active = true;
        seat.Ying.active = false;
        seat.Shu.active = false;
      }
    };
    SanGongManager.onQZhuangAck = function(msg) {
      if (void 0 != msg.RetCode) {
        0 === msg.RetCode && this.gameUICB.setBtnQZhuangActive(false);
        return;
      }
      this.cleanSeatData();
      if (0 === msg.UserId) {
        Audio.playEffect("pork", "remind.mp3");
        this.setState("抢庄中");
        this.gameUICB.setBtnInviteActive(false);
        this.gameUICB.setBtnQZhuangActive(true);
        this.gameUICB.showHint(PukeDefine.HINT_TEXT.WAIT_QIANG_ZHUANG);
        for (var i = 1; i <= 6; i++) {
          var seat = this.getSeatByNumber(i);
          seat.active && (this.ZeroZhuangSeat[this.ZeroZhuangSeat.length] = i);
        }
        this.DingZhuangTime = 0;
        this.StartChooseZhuang = true;
      } else {
        var _seat3 = this.getSeatByUserId(msg.UserId);
        if (0 === msg.Op) {
          var seatNumber = _seat3.SeatNumber;
          this.QiangZhuangSeat[this.QiangZhuangSeat.length] = seatNumber;
          this.gameUICB.setState({
            state: _seat3.State,
            content: "已抢庄",
            color: 0
          });
        } else 1 === msg.Op && this.gameUICB.setState({
          state: _seat3.State,
          content: "不抢庄",
          color: 1
        });
      }
    };
    SanGongManager.onZhuangAck = function(msg) {
      var self = this;
      this.CurrentZhuang = msg.Zhuang;
      this.setState(false);
      this.gameUICB.showHint(PukeDefine.HINT_TEXT.WAIT_XIA_ZHU);
      this.cleanSeatData();
      var zhuangFunc = function zhuangFunc() {
        self.setState("下注中");
        var zhuangSeat = self.getSeatByNumber(self.getSeatNumberByRoomIdx(msg.Zhuang));
        self.gameUICB.setBtnXuYaActive(!self.checkIsMineUserId(zhuangSeat.UserId));
        self.startGameReady();
        self.gameUICB.setBtnQZhuangActive(false);
        self.setZhuangFalse();
        zhuangSeat.Zhuang.active = true;
        zhuangSeat.ZhuangSp.setAnimation(0, "Zhong", false);
      };
      var resetFunc = function resetFunc() {
        self.TurnZhuang = false;
        self.ZeroZhuangSeat = [];
        self.QiangZhuangSeat = [];
        self.DingZhuangTime = 0;
        self.StartChooseZhuang = false;
        self.qzDtTime = 0;
      };
      if (this.IsFreeQiangZhuang && 1 != this.QiangZhuangSeat.length) {
        this.DingZhuangTime = PukeDefine.QIANG_ZHUANG_WAIT_TIME;
        this.gameUICB.scheduleOnceFunc(function() {
          resetFunc();
          zhuangFunc();
        }, PukeDefine.QIANG_ZHUANG_TURN_TIME);
      } else if (this.IsFreeQiangZhuang && 1 === this.QiangZhuangSeat.length) {
        resetFunc();
        zhuangFunc();
      } else zhuangFunc();
    };
    SanGongManager.onYaZhuAck = function(msg) {
      if (void 0 === msg || null === msg.Zhus) return;
      if (void 0 != msg.RetCode) return;
      3 !== this.data.DZhuang && Audio.playEffect("pork", "remind.mp3");
      var self = this;
      this.gameUICB.setBtnXiaZhuActive(true);
      this.gameUICB.showHint(PukeDefine.HINT_TEXT.WAIT_XIA_ZHU);
      this.startGameReady();
      this.gameUICB.showXiaZhu(msg.Zhus);
      this.cleanSeatData();
      this.gameUICB.getIsXuYa() && this.RecentYaZhu && this.gameUICB.scheduleOnceFunc(function() {
        1 === self.RecentYaZhu ? self.gameUICB.onBtnXiaZhuClicked("", 1) : 2 === self.RecentYaZhu ? self.gameUICB.onBtnXiaZhuClicked("", 2) : 3 === self.RecentYaZhu && self.gameUICB.onBtnXiaZhuClicked("", 3);
      }, PukeDefine.ZI_DONG_XU_YA_TIME);
    };
    SanGongManager.onSomeOneYaZhuAck = function(msg) {
      this.checkIsMineUserId(msg.UserId) && this.gameUICB.setBtnXiaZhuActive(false);
      var seat = this.getSeatByUserId(msg.UserId);
      seat.YaBox.active = true;
      seat.YaZhu.string = msg.Zhu;
      this.gameUICB.setState({
        state: seat.State,
        content: "已下注",
        color: 0
      });
      this.pushGold(seat.SeatNumber, msg.Zhu);
    };
    SanGongManager.onStartGameAck = function(msg) {
      var self = this;
      this.gameUICB.showHint(false);
      this.setState(false);
      this.isCuoPaiComplete = false;
      this.gameUICB.scheduleOnceFunc(function() {
        self.CardsMap = msg.CardsMap;
        var sortCardsMap = new Array();
        var seatNumber = self.getSeatNumberByRoomIdx(self.CurrentZhuang);
        for (var userid in msg.CardsMap) for (var i = 1; i <= 6; i++) {
          var seat = self.getSeatByNumber(i);
          if (seat.UserId === parseInt(userid)) {
            var cha = seatNumber - seat.SeatNumber;
            var _idx = cha >= 0 ? cha : 6 - Math.abs(cha);
            sortCardsMap[_idx] = {};
            sortCardsMap[_idx].UserId = userid;
            sortCardsMap[_idx].Cards = msg.CardsMap[userid].Cards;
          }
        }
        var pukes = [], idx = -1, seats = [];
        for (var k in sortCardsMap) {
          var value = sortCardsMap[k];
          for (var _i9 = 1; _i9 <= 6; _i9++) {
            var _seat4 = self.getSeatByNumber(_i9);
            _seat4.Readying.active = false;
            if (_seat4.UserId === parseInt(value.UserId)) {
              seats.push(_seat4);
              var pos = _seat4.getPosition();
              if (1 === _i9) {
                seats.myCards = value.Cards;
                self.CuoPaiNumber = value.Cards[2];
              }
              for (var j = 1; j <= 3; j++) {
                idx += 1;
                var fuhao = 1 === j ? -1 : 3 === j ? 1 : 0;
                pukes[idx] = {};
                pukes[idx].x = 1 === _i9 ? 30 * fuhao : pos.x + 30 * fuhao;
                pukes[idx].y = 1 === _i9 ? .8 * pos.y : pos.y - _seat4.getContentSize().width / 1.58;
              }
            }
          }
        }
        self.faPaiPukes = pukes;
        self.faPaiSeats = seats;
        self.faPaiAnimation(0);
      }, PukeDefine.SEND_CARD_DELAY);
    };
    SanGongManager.onShowCardAck = function(msg) {
      var seat = this.getSeatByUserId(msg.UserId);
      this.gameUICB.setState({
        state: seat.State,
        content: "已亮牌",
        color: 0
      });
      var showType = {
        Dian: msg.Dian,
        Bei: msg.Bei
      };
      if (msg.UserId === seat.UserId) if (this.checkIsMineUserId(msg.UserId)) {
        this.CuoPaiNumber = msg.Card;
        this.isCuoPaiComplete ? this.showTypeFunc(seat, showType) : this.cuoPaiAnimation("showCard", showType);
      } else {
        for (var id in this.CardsMap) if (parseInt(id) === msg.UserId) for (var i = 1; i <= 2; i++) {
          var _puke2 = this.getPukeSpriteById(this.CardsMap[id].Cards[i - 1]);
          seat["Puke" + i].getComponent(cc.Sprite).spriteFrame = _puke2;
        }
        var puke = this.getPukeSpriteById(msg.Card);
        seat["Puke3"].getComponent(cc.Sprite).spriteFrame = puke;
        this.showTypeFunc(seat, showType);
      }
    };
    SanGongManager.showTypeFunc = function(seat, value) {
      var anim = value.Dian;
      var effectName = void 0;
      if (1 === value.Bei || 2 === value.Bei || 3 === value.Bei) {
        anim = value.Dian + "dian";
        effectName = value.Dian;
      } else if (4 === value.Bei) {
        anim = "Hun";
        effectName = 10;
      } else if (5 === value.Bei) {
        anim = "Fei";
        effectName = 11;
      } else if (6 === value.Bei) {
        anim = "Da";
        effectName = 12;
      } else if (9 === value.Bei) {
        anim = "Tian";
        effectName = 13;
      }
      seat.ShuZi.active = true;
      seat.ShuZiSp.setAnimation(0, anim, false);
      if (this.checkIsMineUserId(seat.UserId)) {
        var type = PukeDefine.NIUNIU_ROOM_INFO.PAI_JU_SCORE["SAN_GONG"][effectName];
        var sex = 1 === this.UserInfo.Sex ? "male" : "female";
        Audio.playEffect("pork", type + ".mp3", sex);
      }
    };
    SanGongManager.onSingleAccountAck = function(msg) {
      this.setState(false);
      var accountMap = msg.AccountMap;
      var userArr = {};
      var winSeats = new Array();
      for (var id in accountMap) {
        var value = accountMap[id];
        var winSeat = this.getSeatByUserId(id);
        winSeat.Slice = value.Slice;
        winSeats[winSeats.length] = winSeat;
        var loseSeatArr = new Array();
        for (var i in value.Slice) {
          var slice = value.Slice[i];
          var loseId = slice.UserId;
          var score = slice.Score;
          loseSeatArr[i] = this.getSeatByUserId(loseId);
          winSeat.Fen.string = parseInt(winSeat.Fen.string) + score;
          loseSeatArr[i].Fen.string = parseInt(loseSeatArr[i].Fen.string) - score;
          userArr[id] = userArr[id] ? userArr[id] + score : score;
          userArr[loseId] = userArr[loseId] ? userArr[loseId] - score : -score;
        }
      }
      this.callInGold(winSeats);
      for (var _id in userArr) {
        var _value2 = userArr[_id];
        var seat = this.getSeatByUserId(_id);
        if (_value2 > 0) {
          seat.Ying.active = true;
          seat.Shu.active = false;
          seat.YingLabel.string = "+" + _value2;
        } else {
          seat.Ying.active = false;
          seat.Shu.active = true;
          seat.ShuLabel.string = _value2;
        }
      }
      for (var _id2 in msg.BeiDianMap) {
        var _value3 = msg.BeiDianMap[_id2];
        var _seat5 = this.getSeatByUserId(_id2);
        _seat5.ShuZi || this.showTypeFunc(_seat5, _value3);
      }
      this.RoundJuShu += 1;
      if (this.RoundJuShu <= this.TotalJuShu) {
        this.gameUICB.showHint(PukeDefine.HINT_TEXT.WAIT_READY);
        this.gameUICB.setBtnReadyActive(true);
        this.gameUICB.setJuShuText(this.RoundJuShu + "/" + this.TotalJuShu);
      }
    };
    SanGongManager.onTotalAccountAck = function(msg) {
      msg.RoomId = this.data.RoomId;
      msg.JuShu = this.TotalJuShu;
      msg.DiFen = this.DiFen[0];
      msg.ZhuangWei = this.ZhuangWei;
      msg.highestScore = 0;
      var self = this;
      var count = -1;
      var newData = new Array();
      for (var id in msg.Accounts) {
        var value = msg.Accounts[id];
        var seat = this.getSeatByUserId(id);
        msg.highestScore = Math.max(value, msg.highestScore);
        count++;
        newData[count] = {};
        newData[count].id = id;
        newData[count].score = value;
        newData[count].name = seat._Name;
        newData[count].head = seat.HeadUrl;
        newData[count].left = msg.RoomCards[id].Left;
        newData[count].lost = msg.RoomCards[id].Lost;
      }
      newData.sort(function(a, b) {
        return a.score < b.score;
      });
      msg.sortAccounts = newData;
      this.gameUICB.showHint(PukeDefine.HINT_TEXT.WAIT_TOTAL_ACCOUNT);
      var time = PukeDefine.TOTAL_ACCOUNT_SHOW_TIME;
      if (this.copyDisbandPrefab) {
        this.copyDisbandPrefab.removeFromParent();
        time = .1;
      }
      this.copyTotalAccount = this.gameUICB.onTotalAccountAck();
      this.copyTotalAccount.setPosition(0, 0);
      this.gameUICB.setCountDownTime(true, time);
      this.gameUICB.scheduleOnceFunc(function() {
        self.gameUICB.setCountDownTime(false);
        self.gameUICB.showHint(false);
        self.gameUICB.getChildNode().getChildByName("totalaccount").addChild(self.copyTotalAccount);
        self.copyTotalAccount.getComponent("PukeAccount").initTotalAccount(msg);
      }, time);
    };
    SanGongManager.onLeaveRoomAck = function(msg) {
      if (msg.UserId && msg.UserId >= 0) {
        var seat = this.getSeatByUserId(msg.UserId);
        var pukeNumber = PukeDefine.GAME_TYPE[this.data.GameType].PUKE_NUMBER;
        this.gameUICB.resetSeat(seat.SeatNumber, pukeNumber);
      }
    };
    SanGongManager.onDisbandRoomResultAck = function(msg) {
      var self = this;
      this.gameUICB.setMenuBgActive(false);
      msg.Disbanded ? this.gameUICB.scheduleOnceFunc(function() {
        self.copyTotalAccount || cc.director.loadScene("hall");
      }, PukeDefine.DISBAND_ROOM_DELAY_TIME) : this.gameUICB.scheduleOnceFunc(function() {
        self.copyDisbandPrefab && (self.copyDisbandPrefab.active = false);
      }, PukeDefine.DISBAND_ROOM_DELAY_TIME);
    };
    SanGongManager.onDisbandRoomVoteAck = function(msg) {
      if (!msg) return;
      if (void 0 !== msg.RetCode) {
        0 === msg.RetCode && cc.director.loadScene("hall");
        return;
      }
      this.copyDisbandPrefab || (this.copyDisbandPrefab = this.gameUICB.getDisband());
      this.gameUICB.setMenuBgActive(false);
      this.copyDisbandPrefab.active = true;
      msg.GameType = "sangong";
      for (var i = 1; i <= 6; i++) {
        var seat = this.getSeatByNumber(i);
        for (var id in msg.VoteInfo) if (id == seat.UserId) {
          var state = msg.VoteInfo[id];
          msg.VoteInfo[id] = {};
          msg.VoteInfo[id].state = state;
          msg.VoteInfo[id].name = seat.Name.string;
          msg.VoteInfo[id].headUrl = seat.HeadUrl;
        }
      }
      this.copyDisbandPrefab.getComponent("PukeDisband").disbandRoomInit(msg);
    };
    SanGongManager.onOnLineAck = function(msg) {
      var seat = this.getSeatByUserId(msg.UserId);
      seat.Mask.active = false;
    };
    SanGongManager.onOffLineAck = function(msg) {
      var seat = this.getSeatByUserId(msg.UserId);
      seat.Mask.active = true;
    };
    SanGongManager.YaZhuFunction = function(yanum) {
      this.RecentYaZhu = parseInt(yanum);
      fun.net.send("YaZhu", {
        Zhu: this.DiFen[yanum - 1]
      }, function(rsp) {
        void 0 !== rsp.RetCode && 0 != rsp.RetCode && this.gameUICB.setBtnXiaZhuActive(false);
      }.bind(this));
    };
    SanGongManager.LeaveRoomFunction = function() {
      1 === this.gameUICB.getGameStatus() ? this.MineIsMaster ? fun.net.send("DisbandRoomVote", {
        OP: 1
      }, function(rsp) {
        void 0 !== rsp.RetCode && 0 === rsp.RetCode && cc.director.loadScene("hall");
      }.bind(this)) : fun.net.send("LeaveRoom", {
        OP: 1
      }, function(rsp) {
        rsp.Leave && cc.director.loadScene("hall");
      }.bind(this)) : fun.net.send("DisbandRoomVote", {
        OP: 1
      });
    };
    SanGongManager.ReadyFunction = function() {
      fun.net.send("ReadyNext", "", function(rsp) {
        if (void 0 !== rsp.RetCode && 0 === rsp.RetCode) {
          this.gameUICB.setBtnReadyActive(false);
          this.MineSeat.Readying.active = true;
        }
      }.bind(this));
    };
    SanGongManager.QZhuangFunction = function(type) {
      fun.net.send("Qzhuang", {
        OP: type
      }, function(rsp) {
        void 0 !== rsp.RetCode && 0 === rsp.RetCode && this.gameUICB.setBtnQZhuangActive(false);
      }.bind(this));
    };
    SanGongManager.wxShare = function() {
      var jushu = this.TotalJuShu + "局";
      var difen = "底分" + this.DiFen[0];
      var info = {};
      info.title = "三公-房间号：" + this.data.RoomId;
      info.content = jushu + ", " + this.Charge + ", " + this.ZhuangWei + ", " + difen;
      require("JSPhoneWeChat").WxShareFriend(info);
    };
    module.exports = SanGongManager;
    cc._RF.pop();
  }, {
    Audio: "Audio",
    JSPhoneWeChat: "JSPhoneWeChat",
    PukeData: "PukeData",
    PukeDefine: "PukeDefine",
    PukeUtils: "PukeUtils",
    funUtils: "funUtils"
  } ],
  TestLog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3efab4ScxhA9LGxdT237iZk", "TestLog");
    "use strict";
    function _defineProperty(obj, key, value) {
      key in obj ? Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      }) : obj[key] = value;
      return obj;
    }
    var TestLog = cc.Class({});
    TestLog.getDateString = function() {
      var d = new Date();
      var str = d.getHours() + "";
      var timeStr = "";
      timeStr += (1 == str.length ? "0" + str : str) + ":";
      str = d.getMinutes() + "";
      timeStr += (1 == str.length ? "0" + str : str) + ":";
      str = d.getSeconds() + "";
      timeStr += (1 == str.length ? "0" + str : str) + ".";
      str = d.getMilliseconds() + "";
      1 == str.length && (str = "00" + str);
      2 == str.length && (str = "0" + str);
      timeStr += str;
      var spter = "-";
      timeStr = "[" + d.getFullYear() + spter + (d.getMonth() + 1) + spter + d.getDate() + "  " + timeStr + "]";
      return timeStr;
    };
    TestLog.log = function() {
      if (!cc.YL._isTestServer) return;
      var backLog = cc.log || console.log || log;
      backLog.call(this, "%s" + cc.js.formatStr.apply(cc, arguments), TestLog.getDateString(), this.stack(2));
    };
    TestLog.info = function() {
      if (!cc.YL._isTestServer) return;
      var backLog = cc.log || console.log || log;
      backLog.call(this, "%c%s:" + cc.js.formatStr.apply(cc, arguments), "color:#00CD00;", TestLog.getDateString(), this.stack(2));
    };
    TestLog.log2 = function() {
      if (!cc.YL._isTestServer) return;
      var backLog = cc.log || console.log || log;
      backLog.call(this, "%c%s:" + cc.js.formatStr.apply(cc, arguments), "color:#A600F5;", TestLog.getDateString(), this.stack(2));
    };
    TestLog.warn = function() {
      if (!cc.YL._isTestServer) return;
      var backLog = cc.log || console.log || log;
      backLog.call(this, "%c%s:" + cc.js.formatStr.apply(cc, arguments), "color:#ee7700;", TestLog.getDateString(), this.stack(2));
    };
    TestLog.err = function() {
      if (!cc.YL._isTestServer) return;
      var backLog = cc.log || console.log || log;
      backLog.call(this, "%c%s:" + cc.js.formatStr.apply(cc, arguments), "color:red", TestLog.getDateString(), this.stack(2));
    };
    TestLog.network = function() {
      if (!cc.YL._isTestServer) return;
      var backLog = cc.log || console.log || log;
      backLog.call(this, "%c%s:" + cc.js.formatStr.apply(cc, arguments), "color:#5100FD", TestLog.getDateString(), this.stack(2));
    };
    TestLog.stack = function(index) {
      var e = new Error();
      var lines = e.stack.split("\n");
      lines.shift();
      var result = [];
      for (var i = 0; i < lines.length; i++) {
        lines[i] = lines[i].substring(7);
        var lineBreak = lines[i].split(" ");
        lineBreak.length < 2 ? result.push(lineBreak[0]) : result.push(_defineProperty({}, lineBreak[0], lineBreak[1]));
      }
      var list = [];
      if (index <= result.length - 1) for (var a in result[index]) list.push(a);
      if (list.length > 0) {
        var splitList = list[0].split(".");
        if (splitList.length >= 2) return "[" + splitList[0] + ".js        function:" + splitList[1] + "]";
      }
      return "";
    };
    cc.YL = TestLog;
    module.exports = TestLog;
    cc._RF.pop();
  }, {} ],
  WahuaCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f9261gNCoJOhoFp4p22g+Ro", "WahuaCfg");
    "use strict";
    var WahuaCfg = {
      DisbandRoom: {
        id: "DisbandRoom",
        desc: "解散房间（牌局未开始）",
        req: 403,
        rsp: 503,
        notify: 603
      },
      Ready: {
        id: "Ready",
        desc: "准备",
        req: 404,
        rsp: 504,
        notify: 604
      },
      NextReady: {
        id: "NextReady",
        desc: "下一局准备",
        req: 405,
        rsp: 505,
        notify: 605
      },
      DisbandRoomVote: {
        id: "DisbandRoomVote",
        desc: "申请解散房间",
        req: 406,
        rsp: 506,
        notify: 606
      },
      DisbandRoomResult: {
        id: "DisbandRoomResult",
        desc: "解散房间结果",
        req: 407,
        rsp: 507,
        notify: 607
      },
      Banker: {
        id: "Banker",
        desc: "发庄",
        req: 410,
        rsp: 510,
        notify: 610
      },
      RockCard: {
        id: "RockCard",
        desc: "摇张",
        req: 411,
        rsp: 511,
        notify: 611
      },
      UserRefresh: {
        id: "UserRefresh",
        desc: "用户刷新",
        req: 413,
        rsp: 513,
        notify: 613
      },
      NoneOps: {
        id: "NoneOps",
        desc: "不做任何操作",
        req: 414,
        rsp: 514,
        notify: 614
      },
      StartGame: {
        id: "StartGame",
        desc: "开始游戏",
        req: 415,
        rsp: 515,
        notify: 615
      },
      PlayCard: {
        id: "PlayCard",
        desc: "打牌",
        req: 416,
        rsp: 516,
        notify: 616
      },
      DrawCard: {
        id: "DrawCard",
        desc: "摸牌",
        req: 417,
        rsp: 517,
        notify: 617
      },
      OpsAccept: {
        id: "OpsAccept",
        desc: {
          "1": "杠牌",
          "2": "吃牌，换牌，胡牌，补花接受返回"
        },
        req: 418,
        rsp: 518,
        notify: 618
      },
      RepairCard: {
        id: "RepairCard",
        desc: "补花返回的牌",
        req: 419,
        rsp: 519,
        notify: 619
      },
      OneAccount: {
        id: "OneAccount",
        desc: "结束游戏(单局)",
        req: 421,
        rsp: 521,
        notify: 621
      },
      QuitRoom: {
        id: "QuitRoom",
        desc: "退出房间（牌局未开始)",
        req: 423,
        rsp: 523,
        notify: 623
      },
      AllAccount: {
        id: "AllAccount",
        desc: "总结算",
        req: 424,
        rsp: 524,
        notify: 624
      },
      EscapeFlower: {
        id: "EscapeFlower",
        desc: "桃花或者过",
        req: 425,
        rsp: 525,
        notify: 625
      }
    };
    module.exports = WahuaCfg;
    cc._RF.pop();
  }, {} ],
  allAccountWahua: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "79ba0zdxIpFQrtrOdxbOIq9", "allAccountWahua");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        otherItemTitleColor: {
          default: cc.Color.WHITE,
          displayName: "他人明细颜色"
        },
        otherItemNumColor: {
          default: cc.Color.WHITE,
          displayName: "他人明细数字颜色"
        },
        ownItemTitleColor: {
          default: cc.Color.WHITE,
          displayName: "自己明细颜色"
        },
        ownItemNumColor: {
          default: cc.Color.WHITE,
          displayName: "自己明细数字颜色"
        }
      },
      onLoad: function onLoad() {}
    });
    cc._RF.pop();
  }, {} ],
  chat: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "073ddWOjhdE3ZVXx5WMJe35", "chat");
    "use strict";
    var Audio = require("Audio");
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {
        this.userId = fun.db.getData("UserInfo").UserId;
        var bg = this.node.getChildByName("back");
        var emojiList = bg.getChildByName("emojiList");
        for (var i = 0; i < emojiList.childrenCount; i++) emojiList.getChildByName("emoji" + i).on("click", this.onEmojiClick.bind(this, i));
        var textScroll = bg.getChildByName("textList");
        var textList = textScroll.getChildByName("view").getChildByName("content");
        var gameType = fun.db.getData("RoomInfo").GameType;
        var exporText = require("ChatCfg").exporText[gameType];
        exporText.length > 8 ? textScroll.getComponent(cc.ScrollView).vertical = true : textScroll.getComponent(cc.ScrollView).vertical = false;
        for (var _i = 0; _i < exporText.length; _i++) {
          var text = textList.getChildByName("text" + _i);
          text.active = true;
          var content = text.getChildByName("content").getComponent(cc.Label);
          content.string = exporText[_i];
          text.on("click", this.onTextClick.bind(this, _i));
        }
        bg.getChildByName("btnClose").on("click", this.onBtnCloseClick, this);
        this.node.getChildByName("hitzone").on("click", this.onBtnCloseClick, this);
        this.animation = this.node.getComponent(cc.Animation);
        this.clips = this.animation.getClips();
      },
      onEnable: function onEnable() {
        this.animation.play(this.clips[0].name);
      },
      onEmojiClick: function onEmojiClick(index) {
        this.sendChat({
          chatType: "emoji",
          index: index,
          from: this.userId
        });
      },
      onTextClick: function onTextClick(index) {
        this.sendChat({
          chatType: "text",
          index: index,
          from: this.userId
        });
      },
      sendChat: function sendChat(sData) {
        Audio.playEffect("hall", "button_nomal.mp3");
        fun.net.pSend("Chat", sData);
        this.onBtnCloseClick(true);
      },
      onBtnCloseClick: function onBtnCloseClick(msg) {
        msg || Audio.playEffect("hall", "button_close.mp3");
        this.animation.play(this.clips[1].name).once("finished", function() {
          this.node.destroy();
        }, this);
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio",
    ChatCfg: "ChatCfg"
  } ],
  commonWahua: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a45a9dKT8hPqLCnK3X1RSyY", "commonWahua");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        saiziPerfab: {
          type: cc.Prefab,
          default: null
        },
        disbandRoomPerfab: {
          type: cc.Prefab,
          default: null
        }
      },
      onLoad: function onLoad() {
        fun.event.add("commonWahuaSaiziEnd", "wahuaSaiziEnd", this.initSaizi.bind(this));
        fun.event.add("commonWahuaDisbandRoom", "wahuaDisbandRoom", this.initDisbandRoom.bind(this));
      },
      onDestroy: function onDestroy() {
        fun.event.remove("commonWahuaSaiziEnd");
        fun.event.remove("commonWahuaDisbandRoom");
      },
      initSaizi: function initSaizi(data) {
        var saizi = cc.instantiate(this.saiziPerfab);
        saizi.parent = this.node;
        saizi.getComponent("mjSaiziUI").wahuaPlay(data.point, function() {
          data.callback();
          saizi.destroy();
        }, this);
      },
      initDisbandRoom: function initDisbandRoom(data) {
        if (!data) {
          this.disbandRoom.active = false;
          return;
        }
        if (!this.disbandRoom) {
          this.disbandRoom = cc.instantiate(this.disbandRoomPerfab);
          this.disbandRoom.parent = this.node;
        }
        this.disbandRoom.active = true;
        this.disbandRoom.getComponent("whVotingPop").setData(data);
      }
    });
    cc._RF.pop();
  }, {} ],
  createDDZRoom: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6cbe45nwJdCsryoVIPOHi5M", "createDDZRoom");
    "use strict";
    var Audio = require("Audio");
    cc.Class({
      extends: cc.Component,
      properties: {
        detailPrefab: {
          type: cc.Prefab,
          default: null
        },
        storePre: {
          type: cc.Prefab,
          default: null
        }
      },
      onLoad: function onLoad() {
        this.bindNode();
        this.initUI();
      },
      onEnable: function onEnable() {
        this.animation.play("popScaleAnim");
      },
      Destroy: function Destroy() {
        fun.event.dispatch("Zhuanquan", false);
      },
      bindNode: function bindNode() {
        this.downNode = this.node.getChildByName("back").getChildByName("down");
        this.fangFeiNode = this.downNode.getChildByName("fangfeiBox");
        this.diZhuFenNode = this.downNode.getChildByName("dizhuBox");
        this.renShuNode = this.downNode.getChildByName("renshuBox");
        this.fengDingNode = this.downNode.getChildByName("fengdingBox");
        this.wanFaNode = this.downNode.getChildByName("wanfaBox");
        this.GPSNode = this.downNode.getChildByName("gpsBox");
        this.fangKaNode = this.downNode.getChildByName("fangKaBox");
        this.deadLineNode = this.downNode.getChildByName("time");
        this.jushuNode = this.downNode.getChildByName("jushuBox");
        this.animation = this.node.getComponent(cc.Animation);
      },
      initUI: function initUI() {
        this.DDZCreateInfo = JSON.parse(cc.sys.localStorage.getItem("DDZCreateRoomInfo"));
        if (this.DDZCreateInfo) {
          this.initFangFeiToggle(this.DDZCreateInfo.roomInfo.payMode);
          this.initDiZhuFenToggle(this.DDZCreateInfo.roomInfo.base);
          this.initRenShuToggle();
          this.initWanFaToggle(this.DDZCreateInfo.roomInfo.canDouble, this.DDZCreateInfo.roomInfo.canSanDaiDui, this.DDZCreateInfo.roomInfo.canSiDaiDui);
          this.initFengDingToggle(this.DDZCreateInfo.roomInfo.boomLimit);
          this.initGPSToggle(this.DDZCreateInfo.roomInfo.needGPS);
          this.initJuShu(this.DDZCreateInfo.roomInfo.RoundLimit);
        } else {
          this.initFangFeiToggle();
          this.initDiZhuFenToggle();
          this.initRenShuToggle();
          this.initWanFaToggle();
          this.initFengDingToggle();
          this.initGPSToggle();
          this.initJuShu();
        }
      },
      initJuShu: function initJuShu(jushu) {
        if (jushu) {
          this.jushu = jushu;
          this.jushuNode.getChildByName("box").getChildByName("num").getComponent(cc.Label).string = jushu + "";
        } else {
          this.jushu = 8;
          this.jushuNode.getChildByName("box").getChildByName("num").getComponent(cc.Label).string = "8";
        }
      },
      initGPSToggle: function initGPSToggle(isGPS) {
        if (true == isGPS) {
          this.isGPS = true;
          this.GPSNode.getChildByName("toggle1").getComponent(cc.Toggle).isChecked = true;
        } else {
          this.isGPS = false;
          this.GPSNode.getChildByName("toggle1").getComponent(cc.Toggle).isChecked = false;
        }
      },
      initDiZhuFenToggle: function initDiZhuFenToggle(base) {
        if (1 == base) {
          this.diZhuFen = 1;
          this.diZhuFenNode.getChildByName("toggle1").getComponent(cc.Toggle).isChecked = true;
          this.diZhuFenNode.getChildByName("toggle2").getComponent(cc.Toggle).isChecked = false;
        } else if (3 == base) {
          this.diZhuFen = 3;
          this.diZhuFenNode.getChildByName("toggle1").getComponent(cc.Toggle).isChecked = false;
          this.diZhuFenNode.getChildByName("toggle2").getComponent(cc.Toggle).isChecked = true;
        } else {
          this.diZhuFen = 1;
          this.diZhuFenNode.getChildByName("toggle1").getComponent(cc.Toggle).isChecked = true;
          this.diZhuFenNode.getChildByName("toggle2").getComponent(cc.Toggle).isChecked = false;
        }
      },
      initFangFeiToggle: function initFangFeiToggle(fangfei) {
        if (1 == fangfei) {
          this.fangfei = 1;
          this.fangFeiNode.getChildByName("toggle1").getComponent(cc.Toggle).isChecked = false;
          this.fangFeiNode.getChildByName("toggle2").getComponent(cc.Toggle).isChecked = true;
          this.fangFeiNode.getChildByName("toggle3").getComponent(cc.Toggle).isChecked = false;
        } else if (2 == fangfei) {
          this.fangfei = 2;
          this.fangFeiNode.getChildByName("toggle1").getComponent(cc.Toggle).isChecked = false;
          this.fangFeiNode.getChildByName("toggle2").getComponent(cc.Toggle).isChecked = false;
          this.fangFeiNode.getChildByName("toggle3").getComponent(cc.Toggle).isChecked = true;
        } else if (3 == fangfei) {
          this.fangfei = 3;
          this.fangFeiNode.getChildByName("toggle1").getComponent(cc.Toggle).isChecked = true;
          this.fangFeiNode.getChildByName("toggle2").getComponent(cc.Toggle).isChecked = false;
          this.fangFeiNode.getChildByName("toggle3").getComponent(cc.Toggle).isChecked = false;
        } else {
          this.fangfei = 3;
          this.fangFeiNode.getChildByName("toggle1").getComponent(cc.Toggle).isChecked = true;
          this.fangFeiNode.getChildByName("toggle2").getComponent(cc.Toggle).isChecked = false;
          this.fangFeiNode.getChildByName("toggle3").getComponent(cc.Toggle).isChecked = false;
        }
      },
      initRenShuToggle: function initRenShuToggle() {
        this.renshu = 3;
        this.renShuNode.getChildByName("toggle1").active = true;
        this.renShuNode.getChildByName("toggle2").active = false;
        this.renShuNode.getChildByName("toggle3").active = false;
      },
      initWanFaToggle: function initWanFaToggle(double, san, si) {
        if (true == double) {
          this.isDouble = true;
          this.wanFaNode.getChildByName("toggle3").getComponent(cc.Toggle).isChecked = true;
        } else {
          this.isDouble = false;
          this.wanFaNode.getChildByName("toggle3").getComponent(cc.Toggle).isChecked = false;
        }
        if (true == san) {
          this.isThreeAndOne = true;
          this.wanFaNode.getChildByName("toggle1").getComponent(cc.Toggle).isChecked = true;
        } else {
          this.isThreeAndOne = false;
          this.wanFaNode.getChildByName("toggle1").getComponent(cc.Toggle).isChecked = false;
        }
        if (true == si) {
          this.isFourAndTwo = true;
          this.wanFaNode.getChildByName("toggle2").getComponent(cc.Toggle).isChecked = true;
        } else {
          this.isFourAndTwo = false;
          this.wanFaNode.getChildByName("toggle2").getComponent(cc.Toggle).isChecked = false;
        }
      },
      initFengDingToggle: function initFengDingToggle(fengding) {
        if (4 == fengding) {
          this.fengDing = 4;
          this.fengDingNode.getChildByName("toggle1").getComponent(cc.Toggle).isChecked = true;
          this.fengDingNode.getChildByName("toggle2").getComponent(cc.Toggle).isChecked = false;
          this.fengDingNode.getChildByName("toggle3").getComponent(cc.Toggle).isChecked = false;
        } else if (5 == fengding) {
          this.fengDing = 5;
          this.fengDingNode.getChildByName("toggle1").getComponent(cc.Toggle).isChecked = false;
          this.fengDingNode.getChildByName("toggle2").getComponent(cc.Toggle).isChecked = true;
          this.fengDingNode.getChildByName("toggle3").getComponent(cc.Toggle).isChecked = false;
        } else if (6 == fengding) {
          this.fengDing = 6;
          this.fengDingNode.getChildByName("toggle1").getComponent(cc.Toggle).isChecked = false;
          this.fengDingNode.getChildByName("toggle2").getComponent(cc.Toggle).isChecked = false;
          this.fengDingNode.getChildByName("toggle3").getComponent(cc.Toggle).isChecked = true;
        } else {
          this.fengDing = 4;
          this.fengDingNode.getChildByName("toggle1").getComponent(cc.Toggle).isChecked = true;
          this.fengDingNode.getChildByName("toggle2").getComponent(cc.Toggle).isChecked = false;
          this.fengDingNode.getChildByName("toggle3").getComponent(cc.Toggle).isChecked = false;
        }
      },
      onClickDiZhuFenToggle: function onClickDiZhuFenToggle(event, custom) {
        if ("1" == custom) {
          this.diZhuFen = 1;
          this.diZhuFenNode.getChildByName("toggle1").getComponent(cc.Toggle).isChecked = true;
          this.diZhuFenNode.getChildByName("toggle2").getComponent(cc.Toggle).isChecked = false;
        } else if ("3" == custom) {
          this.diZhuFen = 3;
          this.diZhuFenNode.getChildByName("toggle1").getComponent(cc.Toggle).isChecked = false;
          this.diZhuFenNode.getChildByName("toggle2").getComponent(cc.Toggle).isChecked = true;
        }
      },
      onClickFangFeiToggle: function onClickFangFeiToggle(event, custom) {
        if ("1" == custom) {
          this.fangFeiNode.getChildByName("toggle1").getComponent(cc.Toggle).isChecked = true;
          this.fangFeiNode.getChildByName("toggle2").getComponent(cc.Toggle).isChecked = false;
          this.fangFeiNode.getChildByName("toggle3").getComponent(cc.Toggle).isChecked = false;
          this.fangfei = 3;
        } else if ("2" == custom) {
          this.fangFeiNode.getChildByName("toggle1").getComponent(cc.Toggle).isChecked = false;
          this.fangFeiNode.getChildByName("toggle2").getComponent(cc.Toggle).isChecked = true;
          this.fangFeiNode.getChildByName("toggle3").getComponent(cc.Toggle).isChecked = false;
          this.fangfei = 1;
        } else if ("3" == custom) {
          this.fangFeiNode.getChildByName("toggle1").getComponent(cc.Toggle).isChecked = false;
          this.fangFeiNode.getChildByName("toggle2").getComponent(cc.Toggle).isChecked = false;
          this.fangFeiNode.getChildByName("toggle3").getComponent(cc.Toggle).isChecked = true;
          this.fangfei = 2;
        }
      },
      onClickWanFaToggle: function onClickWanFaToggle(event, custom) {
        "1" == custom ? this.isThreeAndOne = this.wanFaNode.getChildByName("toggle1").getComponent(cc.Toggle).isChecked : "2" == custom ? this.isFourAndTwo = this.wanFaNode.getChildByName("toggle2").getComponent(cc.Toggle).isChecked : "3" == custom && (this.isDouble = this.wanFaNode.getChildByName("toggle3").getComponent(cc.Toggle).isChecked);
      },
      onClickFenDingToggle: function onClickFenDingToggle(event, custom) {
        if ("4" == custom) {
          this.fengDingNode.getChildByName("toggle1").getComponent(cc.Toggle).isChecked = true;
          this.fengDingNode.getChildByName("toggle2").getComponent(cc.Toggle).isChecked = false;
          this.fengDingNode.getChildByName("toggle3").getComponent(cc.Toggle).isChecked = false;
          this.fengDing = 4;
        } else if ("5" == custom) {
          this.fengDingNode.getChildByName("toggle1").getComponent(cc.Toggle).isChecked = false;
          this.fengDingNode.getChildByName("toggle2").getComponent(cc.Toggle).isChecked = true;
          this.fengDingNode.getChildByName("toggle3").getComponent(cc.Toggle).isChecked = false;
          this.fengDing = 5;
        } else if ("6" == custom) {
          this.fengDingNode.getChildByName("toggle1").getComponent(cc.Toggle).isChecked = false;
          this.fengDingNode.getChildByName("toggle2").getComponent(cc.Toggle).isChecked = false;
          this.fengDingNode.getChildByName("toggle3").getComponent(cc.Toggle).isChecked = true;
          this.fengDing = 6;
        }
      },
      onClickGPSToggle: function onClickGPSToggle(event, custom) {
        this.isGPS = this.GPSNode.getChildByName("toggle1").getComponent(cc.Toggle).isChecked;
      },
      onClickJuShu: function onClickJuShu(event, custom) {
        if ("1" == custom) {
          this.jushu = 24 == this.jushu ? 24 : this.jushu + 8;
          this.jushuNode.getChildByName("box").getChildByName("num").getComponent(cc.Label).string = this.jushu + "";
        } else if ("2" == custom) {
          this.jushu = 8 == this.jushu ? 8 : this.jushu - 8;
          this.jushuNode.getChildByName("box").getChildByName("num").getComponent(cc.Label).string = this.jushu + "";
        }
      },
      onBtnCloseClick: function onBtnCloseClick() {
        Audio.playEffect("hall", "button_close.mp3");
        this.animation.play("popScaleOut").once("finished", function() {
          this.node.active = false;
          this.node.destroy();
        }, this);
      },
      onBtnRechargeClick: function onBtnRechargeClick() {
        cc.instantiate(this.storePre).parent = this.node;
      },
      onClickDetails: function onClickDetails() {
        var detail = cc.instantiate(this.detailPrefab);
        detail.parent = this.node;
        detail.getComponent("freeCardDetail").setDetail(this.showData.FreeCardList, this._gameType);
      },
      showRoomCard: function showRoomCard(data, gameType) {
        this.showData = data;
        this._gameType = gameType;
        this.node.getChildByName("back").getChildByName("down").getChildByName("fangKaBox").getChildByName("card").getComponent(cc.Label).string = data.TollCardCnt || 0;
        var freeTimeBox = this.node.getChildByName("back").getChildByName("down").getChildByName("time");
        var freeCardL = this.node.getChildByName("back").getChildByName("down").getChildByName("fangKaBox").getChildByName("cardlimited");
        if (data.FreeCardList && 0 !== data.FreeCardList.length) {
          freeTimeBox.active = true;
          var minTime = data.FreeCardList[0].ExpiredAt, freeCard = data.FreeCardList[0].Cnt;
          for (var i in data.FreeCardList) {
            var time = data.FreeCardList[i].ExpiredAt;
            if (minTime > time) {
              minTime = time;
              freeCard = data.FreeCardList[i].Cnt;
            }
          }
          var t = new Date(1e3 * minTime);
          var date = t.getFullYear().toString().substr(2, 2) + "年" + (t.getMonth() + 1) + "月" + t.getDate() + "日";
          freeTimeBox.getChildByName("time").getComponent(cc.Label).string = date + "过期";
          freeCardL.getComponent(cc.Label).string = freeCard;
        } else {
          freeCardL.getComponent(cc.Label).string = 0;
          freeTimeBox.active = false;
        }
      },
      onBtnCreateRoomClick: function onBtnCreateRoomClick() {
        var DDZRoomInfo = {
          gameType: 6,
          payMode: this.fangfei,
          playerNum: this.renshu,
          base: this.diZhuFen,
          boomLimit: this.fengDing,
          playMode: null,
          canSanDaiDui: this.isThreeAndOne,
          canSiDaiDui: this.isFourAndTwo,
          canDouble: this.isDouble,
          RoundLimit: this.jushu,
          needGPS: this.isGPS
        };
        if (this.isGPS) var gpsInfo = fun.db.getData("UserInfo").location; else var gpsInfo = {};
        var createInfo = {
          GameType: 6,
          roomInfo: DDZRoomInfo,
          userId: fun.db.getData("UserInfo").UserId,
          gpsInfo: gpsInfo
        };
        cc.sys.localStorage.setItem("DDZCreateRoomInfo", JSON.stringify(createInfo));
        fun.event.dispatch("Zhuanquan", {
          flag: true,
          text: "创建房间中，请稍后..."
        });
        fun.net.pSend("CreateRoom", createInfo, function(msg) {
          msg.RetCode > 0 && msg.RetCode <= 15 ? fun.event.dispatch("Zhuanquan", false) : cc.director.loadScene("DDZ_GameScene");
        });
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio"
  } ],
  createMajiangRoom: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "38afa52xPxKqYb25UI49jK/", "createMajiangRoom");
    "use strict";
    var Audio = require("Audio");
    var majiangType = cc.Enum({
      maJiangWenLing: 1,
      maJiangHuangYan: 2
    });
    var wenlingMj = function wenlingMj() {
      this.init = function(node, context) {
        this.context = context;
        this.updataParentN(node, gameConst.gameType.maJiangWenLing);
        this.initQuanAndJu();
        var ZhiFuN = this.createN.getChildByName("fangfeiBox").getChildByName("shuoming");
        this.initExplainItem(ZhiFuN, "ZhiFu", require("mjGameDefine").CREATROOMWL.explain);
        this.initSwitchItem("fangfeiBox", [ 1, 2, 3 ], 0, "ZhiFu");
        this.initSwitchItem("shengpaiBox", [ 1 ], 0, "ShengPaiTime");
        this.initSwitchItem("renshuBox", [ 1 ], 0, "RenShu");
        this.initSwitchItem("moshiBox", [ 1, 2, 3 ], 0, "MoShi");
        this.initSwitchItem("wanfaBox", [ 1, 2, 3 ], 0, "WanFa");
        this.initSingleItem("teshuBox", false, "DingWei");
        this.initSingleItem("baopaiBox", true, "BaoPai");
      };
      this.initQuanAndJu = function() {
        var GameDefine = require("mjGameDefine");
        var defineData = GameDefine.CREATROOMWL.JuShu.data;
        var quanList = [ 11, 12, 14 ];
        var juList = [ 21, 22, 24 ];
        var jushuN = this.createN.getChildByName("jushuBox");
        var descL = jushuN.getChildByName("desc").getComponent(cc.Label);
        var self = this;
        var boxN = jushuN.getChildByName("box");
        var quanN = jushuN.getChildByName("quan").getChildByName("checkmark");
        var juN = jushuN.getChildByName("ju").getChildByName("checkmark");
        jushuN.getChildByName("quan").on("touchend", function() {
          self.setRoomInfo("JuShu", quanList[0]);
        });
        jushuN.getChildByName("ju").on("touchend", function() {
          self.setRoomInfo("JuShu", juList[0]);
        });
        jushuN.itemList = [ {
          n: quanN,
          l: quanList,
          desc: "选择游戏总圈数"
        }, {
          n: juN,
          l: juList,
          desc: "选择游戏总局数"
        } ];
        jushuN.update = function() {
          var curJuShu = self.getRoomInfo()["JuShu"];
          jushuN.itemList.forEach(function(item) {
            item.n.active = false;
            item.l.forEach(function(lItem, nIndex) {
              if (lItem == curJuShu) {
                item.n.active = true;
                self.curCountList = item.l;
                self.curCountIndex = nIndex;
              }
            });
            item.n.active && (descL.string = item.desc);
          });
          var disL = boxN.getChildByName("num").getComponent(cc.Label);
          var typeL = boxN.getChildByName("content").getComponent(cc.Label);
          disL.string = defineData[curJuShu].slice(0, -1);
          typeL.string = defineData[curJuShu].slice(-1);
        };
        this.jushuN = jushuN;
        var defaultV = this.oldCreate.JuShu || quanList[0];
        this.setRoomInfo("JuShu", defaultV);
        var btnIncrease = boxN.getChildByName("increase");
        var btnReduce = boxN.getChildByName("reduce");
        var onCountChange = function onCountChange(changeNum) {
          var newIndex = self.curCountIndex + changeNum;
          if (newIndex < 0 || newIndex > self.curCountList.length - 1) return;
          self.setRoomInfo("JuShu", self.curCountList[newIndex]);
        };
        btnIncrease.on("touchend", function() {
          onCountChange(1);
        });
        btnReduce.on("touchend", function() {
          onCountChange(-1);
        });
      };
      this.onInfoChange = function() {
        this.jushuN.update();
        var roomInfo = this.getRoomInfo();
        var per = 2 == roomInfo.ZhiFu ? 4 : 16;
        var cost = 0;
        cost = roomInfo.JuShu > 20 ? (roomInfo.JuShu - 20) * per : (roomInfo.JuShu - 10) * per;
        this.context.needCardL.string = cost;
      };
      this.onCreateClicked = function() {
        var roomInfo = this.getRoomInfo();
        roomInfo.GameType = this.gameType;
        roomInfo.Address = fun.db.getData("UserInfo").location;
        fun.utils.saveCreateRoomData(roomInfo);
        fun.event.dispatch("Zhuanquan", {
          flag: true,
          text: "创建房间中，请稍后..."
        });
        fun.net.pSend("CreateRoom", roomInfo, function(rsp) {
          if (rsp.RetCode) {
            var mjGameDefine = require("mjGameDefine");
            fun.event.dispatch("Zhuanquan", false);
            var str = mjGameDefine.WLRETCODE[rsp.RetCode] || "失败 :" + rsp.RetCode;
            19 == rsp.RetCode ? fun.event.dispatch("MinSingleButtonPop", {
              contentStr: str,
              okBtnStr: "前往充值",
              okCb: this.onRechargeClicked.bind(this)
            }) : fun.event.dispatch("MinSingleButtonPop", {
              contentStr: str
            });
          } else {
            rsp.EnterRoom = "create";
            fun.db.setData("RoomInfo", rsp);
            cc.director.preloadScene("majiang", function() {
              cc.director.loadScene("majiang");
            });
          }
        }.bind(this));
      };
    };
    var huangyanMj = function huangyanMj() {
      this.init = function(node, context) {
        this.context = context;
        this.updataParentN(node, gameConst.gameType.maJiangHuangYan);
        this.initQuanAndJu();
        var ZhiFuN = this.createN.getChildByName("shouxufeiBox").getChildByName("shuoming");
        this.initExplainItem(ZhiFuN, "PaymentMethod", require("mjGameDefine").CREATROOMHY.explain);
        this.initSwitchItem("shouxufeiBox", [ 1, 2, 3 ], 0, "PaymentMethod");
        this.initSwitchItem("wanfaBox", [ 1, 2 ], 0, "GshOp");
        this.initSingleItem("teshuBox", false, "DingWei");
      };
      this.initQuanAndJu = function() {
        var GameDefine = require("mjGameDefine");
        var defineData = GameDefine.CREATROOMHY;
        var quanList = [ 1, 2, 4 ];
        var juList = [ 4, 8, 16 ];
        var jushuN = this.createN.getChildByName("jushuBox");
        var self = this;
        var boxN = jushuN.getChildByName("box");
        var quanN = jushuN.getChildByName("quan").getChildByName("checkmark");
        var juN = jushuN.getChildByName("ju").getChildByName("checkmark");
        var descL = jushuN.getChildByName("desc").getComponent(cc.Label);
        jushuN.getChildByName("quan").on("touchend", function() {
          self.setRoomInfo("SpendMethod", 1);
          self.setRoomInfo("GameNum", quanList[0]);
        });
        jushuN.getChildByName("ju").on("touchend", function() {
          self.setRoomInfo("SpendMethod", 2);
          self.setRoomInfo("GameNum", juList[0]);
        });
        jushuN.itemList = [ {
          n: quanN,
          l: quanList
        }, {
          n: juN,
          l: juList
        } ];
        jushuN.update = function() {
          var curJuShu = self.getRoomInfo()["GameNum"];
          quanN.active = 1 == self.getRoomInfo()["SpendMethod"];
          juN.active = 2 == self.getRoomInfo()["SpendMethod"];
          var disL = boxN.getChildByName("num").getComponent(cc.Label);
          var typeL = boxN.getChildByName("content").getComponent(cc.Label);
          disL.string = void 0 === curJuShu ? 1 : curJuShu;
          typeL.string = 1 == self.getRoomInfo()["SpendMethod"] ? "圈" : "局";
          self.curCountList = 1 == self.getRoomInfo()["SpendMethod"] ? quanList : juList;
          self.curCountList.forEach(function(item, index) {
            curJuShu == item && (self.curCountIndex = index);
          });
          descL.string = quanN.active ? "选择游戏总圈数" : "选择游戏总局数";
        };
        this.jushuN = jushuN;
        var defaultV = this.oldCreate.GameNum || quanList[0];
        var defMethod = this.oldCreate.SpendMethod || 1;
        this.setRoomInfo("SpendMethod", defMethod);
        this.setRoomInfo("GameNum", defaultV);
        var btnIncrease = boxN.getChildByName("increase");
        var btnReduce = boxN.getChildByName("reduce");
        var onCountChange = function onCountChange(changeNum) {
          var newIndex = self.curCountIndex + changeNum;
          if (newIndex < 0 || newIndex > self.curCountList.length - 1) return;
          self.setRoomInfo("GameNum", self.curCountList[newIndex]);
        };
        btnIncrease.on("touchend", function() {
          onCountChange(1);
        });
        btnReduce.on("touchend", function() {
          onCountChange(-1);
        });
      };
      this.onCreateClicked = function() {
        var roomInfo = this.getRoomInfo();
        var sendData = {
          PlayerID: fun.db.getData("UserInfo").UserId,
          RoomInformation: roomInfo,
          GameType: this.gameType,
          Address: fun.db.getData("UserInfo").location
        };
        fun.event.dispatch("Zhuanquan", {
          flag: true,
          text: "创建房间中，请稍后..."
        });
        fun.net.pSend("CreateRoom", sendData, function(rsp) {
          if (rsp.RetCode) {
            fun.event.dispatch("Zhuanquan", false);
            var mjGameDefine = require("mjGameDefine");
            var str = mjGameDefine.HYRETCODE[rsp.RetCode] || "失败 :" + rsp.RetCode;
            19 == rsp.RetCode ? fun.event.dispatch("MinSingleButtonPop", {
              contentStr: str,
              okBtnStr: "前往充值",
              okCb: this.onRechargeClicked.bind(this)
            }) : fun.event.dispatch("MinSingleButtonPop", {
              contentStr: str
            });
          } else {
            sendData.RoomId = rsp.RoomID;
            fun.db.setData("hymajiang", rsp);
            fun.db.setData("RoomInfo", sendData);
            cc.director.preloadScene("majiang", function() {
              cc.director.loadScene("majiang");
            });
            roomInfo.GameType = this.gameType;
            fun.utils.saveCreateRoomData(roomInfo);
          }
        }.bind(this));
      };
      this.onInfoChange = function() {
        this.jushuN.update();
        var roomInfo = this.getRoomInfo();
        var per = 2 == roomInfo.PaymentMethod ? 4 : 16;
        var gameCount = roomInfo.GameNum;
        2 == roomInfo.SpendMethod && (gameCount /= 4);
        this.context.needCardL.string = gameCount * per;
      };
    };
    wenlingMj.prototype = require("createRoomSys").new();
    huangyanMj.prototype = require("createRoomSys").new();
    cc.Class({
      extends: cc.Component,
      properties: {
        gameName: {
          type: majiangType,
          default: majiangType.maJiangWenLing
        },
        store: cc.Prefab,
        roomCard: cc.Label,
        needCardL: cc.Label,
        freeCardL: cc.Label,
        freeTimeBox: cc.Node,
        freeBtn: cc.Node,
        freeTimeL: cc.Label,
        detailPrefab: cc.Prefab
      },
      onLoad: function onLoad() {
        var downNode = this.node.getChildByName("back").getChildByName("down");
        downNode.getChildByName("btnClose").on("click", this.onBtnCloseClick, this);
        this.initMjList();
        this.updateMj();
        this.animation = this.node.getComponent(cc.Animation);
        this.clips = this.animation.getClips();
        fun.event.add("CreateHYAddRoomCard", "HuangYanAddRoomCard", function(addCard) {
          this._currentRoomCards = parseInt(this.roomCard.string) + parseInt(addCard);
          this._wxPaySuccess = true;
        }.bind(this));
      },
      onDestroy: function onDestroy() {
        fun.event.remove("CreateHYAddRoomCard");
      },
      onEnable: function onEnable() {
        this.animation.play(this.clips[0].name);
      },
      initMjList: function initMjList() {
        this.mjSysList = {};
        this.mjSysList[majiangType.maJiangWenLing] = new wenlingMj();
        this.mjSysList[majiangType.maJiangHuangYan] = new huangyanMj();
      },
      updateMj: function updateMj() {
        this.curMj = this.mjSysList[this.gameName];
        this.curMj.init(this.node, this);
      },
      update: function update(dt) {
        if (this._wxPaySuccess) {
          this.roomCard.string = this._currentRoomCards;
          this._wxPaySuccess = false;
        }
      },
      showStore: function showStore(gameType) {
        fun.event.dispatch("MinSingleButtonPop", {
          contentStr: "公测期间，免费畅玩！"
        });
        return;
        var store;
      },
      showRoomCard: function showRoomCard(data, gameType) {
        var isFisher = fun.gameCfg.releaseType === gameConst.releaseType.fisher;
        if (isFisher) {
          var cardShowN = this.node.getChildByName("back").getChildByName("down").getChildByName("cardShow");
          cardShowN.getChildByName("xskback").active = false;
          cardShowN.getChildByName("fkback").active = true;
          cardShowN.getChildByName("xianshika").active = false;
          return;
        }
        this.roomCard.string = data.TollCardCnt || data.Total || 0;
        this.freeBtn.on("click", function() {
          var detail = cc.instantiate(this.detailPrefab);
          detail.parent = this.node;
          detail.getComponent("freeCardDetail").setDetail(data.FreeCardList || void 0, gameType);
        }.bind(this));
        if (!data.FreeCardList || 0 === data.FreeCardList.length) {
          this.freeCardL.string = 0;
          this.freeTimeBox.active = false;
          return;
        }
        this.freeTimeBox.active = true;
        var minTime = data.FreeCardList[0].ExpiredAt, totalFreeCard = 0;
        for (var i in data.FreeCardList) {
          var time = data.FreeCardList[i].ExpiredAt;
          totalFreeCard += data.FreeCardList[i].Cnt;
          minTime > time && (minTime = time);
        }
        var t = new Date(1e3 * minTime);
        var date = t.getFullYear().toString().substr(2, 2) + "年" + (t.getMonth() + 1) + "月" + t.getDate() + "日";
        this.freeTimeL.string = date + "过期";
        this.freeCardL.string = totalFreeCard;
      },
      onBtnCloseClick: function onBtnCloseClick() {
        Audio.playEffect("hall", "button_close.mp3");
        this.animation.play(this.clips[1].name).once("finished", function() {
          this.node.destroy();
        }, this);
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio",
    createRoomSys: "createRoomSys",
    mjGameDefine: "mjGameDefine"
  } ],
  createNiuNiuRoom: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5c2c986lEhMi7NzGu9qs5H1", "createNiuNiuRoom");
    "use strict";
    var PukeDefine = require("PukeDefine");
    var PukeUtils = require("PukeUtils");
    var Audio = require("Audio");
    var WanFaEnum = cc.Enum({
      kanDou: 1,
      wuHua: 2,
      zhaDan: 3,
      wuXiao: 4
    });
    var SpecialEnum = cc.Enum({
      xianJia: 1,
      joinLimit: 2,
      zhangSuo: 3,
      shunDou: 4
    });
    cc.Class({
      extends: cc.Component,
      properties: {
        FangFei: cc.Node,
        JuShu: cc.Label,
        CurrentCard: cc.Label,
        RoomCard: cc.Label,
        DingZhuang: cc.Node,
        DiFen: cc.Node,
        ShiXian: cc.Node,
        TeShu: cc.Node,
        WanFa: cc.Node,
        BeiShu: cc.Node,
        btnHitzone: cc.Node
      },
      onLoad: function onLoad() {
        if (fun.gameCfg.releaseType === gameConst.releaseType.apple) {
          var down = this.node.getChildByName("back").getChildByName("down");
          down.getChildByName("btnRecharge").active = false;
          var createN = down.getChildByName("btnCreateRoom");
          createN.getChildByName("text").active = false;
          createN.getChildByName("num").active = false;
        }
        this.ListBack = this.BeiShu.getChildByName("list").getChildByName("listback");
        this.BeiShuText = this.BeiShu.getChildByName("initLabel").getComponent(cc.Label);
        this.BeiShuText.string = PukeDefine.NIUNIU_ROOM_INFO.TYPE_SCORE[0];
        for (var i = 0; i < this.ListBack.children.length; ++i) {
          var content = this.ListBack.getChildByName("content");
          for (var j in content.children) {
            var contentL = content.children[j].getComponent(cc.Label);
            contentL.string = PukeDefine.NIUNIU_ROOM_INFO.TYPE_SCORE[j];
          }
        }
        this.setBeiShuBackActive(1);
        var createInfo = fun.utils.getCreateRoomData(gameConst.gameType.niuNiu);
        if (createInfo) {
          this.setToggleChecked("FangFei", createInfo.reduceCard);
          this.setToggleChecked("DingZhuang", createInfo.makersType);
          this.setToggleChecked("DiFen", createInfo.bottomScore);
          this.setToggleChecked("ShiXian", createInfo.timeLimit + 1);
          this.BeiShuText.string = PukeDefine.NIUNIU_ROOM_INFO.TYPE_SCORE[createInfo.typeScore - 1];
          this.setBeiShuBackActive(createInfo.typeScore);
          this.JuShu.string = 5 * (createInfo.roomNum + 1);
          this.setMuToggleNotChecked();
          for (var key in createInfo.Special) {
            for (var k in WanFaEnum) key === k && (this.WanFa.getChildByName("toggle" + WanFaEnum[k]).getComponent(cc.Toggle).isChecked = true);
            for (var _k in SpecialEnum) key === _k && (this.TeShu.getChildByName("toggle" + SpecialEnum[_k]).getComponent(cc.Toggle).isChecked = true);
          }
        }
        this.RoomCard.string = this.JuShu.string;
        this.KanDou = this.WanFa.getChildByName("toggle1").getComponent(cc.Toggle);
        this.ShunDou = this.TeShu.getChildByName("toggle4");
        this.isShunDouShow(this.KanDou.isChecked);
        this.downAction = false;
        this.animation = this.node.getComponent(cc.Animation);
        this.clips = this.animation.getClips();
      },
      onEnable: function onEnable() {
        this.animation.play(this.clips[0].name);
      },
      setToggleChecked: function setToggleChecked(name, value) {
        for (var i = 0; i < this[name].children.length; ++i) this[name].getChildByName("toggle" + (i + 1)).getComponent(cc.Toggle).isChecked = false;
        this[name].getChildByName("toggle" + value).getComponent(cc.Toggle).isChecked = true;
      },
      setMuToggleNotChecked: function setMuToggleNotChecked() {
        for (var i = 0; i < this.WanFa.children.length; ++i) this.WanFa.getChildByName("toggle" + (i + 1)).getComponent(cc.Toggle).isChecked = false;
        for (var _i = 0; _i < this.TeShu.children.length; ++_i) this.TeShu.getChildByName("toggle" + (_i + 1)).getComponent(cc.Toggle).isChecked = false;
      },
      setBeiShuBackActive: function setBeiShuBackActive(num) {
        var back = this.ListBack.getChildByName("back");
        for (var i in back.children) back.children[i].active = false;
        back.getChildByName("back" + parseInt(num)).active = true;
      },
      niuBtnBeiShuList: function niuBtnBeiShuList() {
        this.listAction(this.downAction);
      },
      listAction: function listAction(isDown) {
        this.downAction = !this.downAction;
        this.btnHitzone.active = !isDown;
        var position = {
          x: 0,
          y: 220
        };
        isDown || (position.y = 0);
        var moveto = cc.moveTo(.3, position);
        moveto.easing(cc.easeSineInOut());
        this.ListBack.stopAllActions();
        this.ListBack.runAction(moveto);
      },
      onBtnHitzoneClicked: function onBtnHitzoneClicked() {
        this.btnHitzone.active = false;
        this.listAction(true);
      },
      niuChooseBeiShu: function niuChooseBeiShu(sender, num) {
        this.BeiShuText.string = PukeDefine.NIUNIU_ROOM_INFO.TYPE_SCORE[parseInt(num) - 1];
        this.setBeiShuBackActive(num);
        this.listAction(true);
      },
      onBtnLessClicked: function onBtnLessClicked() {
        Audio.playEffect("hall", "button_nomal.mp3");
        var juShu = parseInt(this.JuShu.string);
        if (juShu > PukeDefine.CREATE_JUSHU_MIN) {
          this.JuShu.string = juShu - PukeDefine.CREATE_JUSHU_SPACE;
          this.RoomCard.string = this.JuShu.string;
        }
      },
      onBtnAddClicked: function onBtnAddClicked() {
        Audio.playEffect("hall", "button_nomal.mp3");
        var juShu = parseInt(this.JuShu.string);
        if (juShu < PukeDefine.CREATE_JUSHU_MAX) {
          this.JuShu.string = juShu + PukeDefine.CREATE_JUSHU_SPACE;
          this.RoomCard.string = this.JuShu.string;
        }
      },
      onBtnCreateClicked: function onBtnCreateClicked() {
        Audio.playEffect("hall", "button_nomal.mp3");
        var data = {};
        data.Special = {};
        for (var i = 1; i <= 2; i++) {
          var togFF = this.FangFei.getChildByName("toggle" + i).getComponent(cc.Toggle);
          togFF.isChecked && (data.reduceCard = i);
        }
        for (var _i2 = 1; _i2 <= 4; _i2++) {
          var togDF = this.DiFen.getChildByName("toggle" + _i2).getComponent(cc.Toggle);
          togDF.isChecked && (data.bottomScore = _i2);
          var togSX = this.ShiXian.getChildByName("toggle" + _i2).getComponent(cc.Toggle);
          togSX.isChecked && (data.timeLimit = _i2 - 1);
          var togTS = this.TeShu.getChildByName("toggle" + _i2).getComponent(cc.Toggle);
          if (togTS.isChecked) {
            var name = PukeDefine.NIUNIU_ROOM_INFO.NIU_SPECIAL[_i2 - 1 + 4];
            data.Special[name] = 1;
          }
          var togWF = this.WanFa.getChildByName("toggle" + _i2).getComponent(cc.Toggle);
          if (togWF.isChecked) {
            var _name = PukeDefine.NIUNIU_ROOM_INFO.NIU_SPECIAL[_i2 - 1];
            data.Special[_name] = 1;
          }
        }
        for (var _i3 = 1; _i3 <= 5; _i3++) {
          var togDZ = this.DingZhuang.getChildByName("toggle" + _i3).getComponent(cc.Toggle);
          togDZ.isChecked && (data.makersType = _i3);
        }
        var typeScore = PukeDefine.NIUNIU_ROOM_INFO.TYPE_SCORE;
        var typeScoreText = this.BeiShuText.string;
        for (var _i4 in typeScore) typeScoreText === typeScore[parseInt(_i4)] && (data.typeScore = parseInt(_i4) + 1);
        data.Address = fun.db.getData("UserInfo").location;
        data.GameType = gameConst.gameType.niuNiu;
        data.Zone = 0;
        data.roomNum = parseInt(this.JuShu.string) / 5 - 1;
        fun.event.dispatch("Zhuanquan", true);
        fun.net.pSend("CreateRoom", data, function(rsp) {
          fun.event.dispatch("Zhuanquan", false);
          if (void 0 !== rsp.returnStatu && 1 === rsp.returnStatu) {
            rsp.EnterRoom = "create";
            fun.db.setData("RoomInfo", rsp);
            fun.utils.saveCreateRoomData(data);
            cc.director.preloadScene("puke", function() {
              fun.event.dispatch("Zhuanquan", false);
              cc.director.loadScene("puke");
            });
          } else {
            fun.event.dispatch("Zhuanquan", false);
            if (void 0 !== rsp.RetCode && 10 === rsp.RetCode) {
              fun.event.dispatch("MinSingleButtonPop", {
                contentStr: "服务未开启"
              });
              fun.log("createNiuNiuRoom", "CreateRoom RetCode = " + rsp.RetCode);
              return;
            }
            void 0 === rsp.returnStatu || 2 === rsp.returnStatu ? fun.event.dispatch("MinSingleButtonPop", {
              contentStr: "用户参数异常"
            }) : 3 === rsp.returnStatu ? fun.event.dispatch("MinSingleButtonPop", {
              contentStr: "房卡不足"
            }) : fun.event.dispatch("MinSingleButtonPop", {
              contentStr: "创建房间失败"
            });
            fun.log("createNiuNiuRoom", "CreateRoom returnStatu = " + rsp.returnStatu);
          }
        }.bind(this));
      },
      isShunDouShow: function isShunDouShow(isChecked) {
        this.ShunDou.getComponent(cc.Toggle).isChecked = isChecked;
        this.ShunDou.getChildByName("mask").active = !isChecked;
      },
      onBtnKanDouClicked: function onBtnKanDouClicked() {
        this.isShunDouShow(this.KanDou.isChecked);
      },
      onBtnRechargeClicked: function onBtnRechargeClicked() {
        Audio.playEffect("hall", "button_nomal.mp3");
        cc.log("房卡充值");
      },
      onBtnCloseClick: function onBtnCloseClick() {
        Audio.playEffect("hall", "button_close.mp3");
        this.animation.play(this.clips[1].name).once("finished", function() {
          this.node.destroy();
        }, this);
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio",
    PukeDefine: "PukeDefine",
    PukeUtils: "PukeUtils"
  } ],
  createRoomSys: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b71e9sPAzlHhY4qkWkNEf5A", "createRoomSys");
    "use strict";
    var createSys = function createSys() {
      this.updataParentN = function(node, gameType) {
        this.gameType = gameType;
        this.allHideList = {};
        this.createN = node.getChildByName("back").getChildByName("down");
        this.btnCreateN = this.createN.getChildByName("btnCreateRoom");
        this.btnRechargeN = this.createN.getChildByName("cardShow").getChildByName("fangka").getChildByName("btnRecharge");
        this.btnCreateN.on("touchend", this.onCreateClicked, this);
        this.btnRechargeN.on("touchend", this.onRechargeClicked, this);
        this.oldCreate = fun.utils.getCreateRoomData(gameType) || {};
      };
      this.onCreateClicked = function() {};
      this.onInfoChange = function() {};
      this.onRechargeClicked = function() {
        this.context.showStore(this.gameType);
      };
      this._setClickScale = function() {
        var clickScale = 1.04;
        return function(btnNode) {
          btnNode.on("touchstart", function() {
            this.scale = clickScale;
          }, btnNode);
          btnNode.on("touchend", function() {
            this.scale = 1;
          }, btnNode);
          btnNode.on("touchcancel", function() {
            this.scale = 1;
          }, btnNode);
        };
      }();
      this._setClickHide = function(childN) {
        childN.hideList = [];
        childN._hideSome = function() {
          childN.hideList.forEach(function(item) {
            item.active = false;
          });
        };
        childN._showSome = function() {
          childN.hideList.forEach(function(item) {
            item.active = true;
          });
        };
      };
      this.initSwitchItem = function(nodeName, clickData, defaultIndex, infoKey) {
        var _this = this;
        var itemNode = this.createN.getChildByName(nodeName);
        itemNode.cilckList = [];
        itemNode.chooseItem = function(chooseIndex) {
          itemNode.cilckList.forEach(function(item) {
            item.getChildByName("checkmark").active = false;
          });
          this.lastItem && this.lastItem._showSome();
          var curItem = itemNode.cilckList[chooseIndex];
          curItem.getChildByName("checkmark").active = true;
          this.lastItem = curItem;
          this.setRoomInfo(infoKey, curItem.clickData);
        }.bind(this);
        var _loop = function _loop(i) {
          nIndex = i + 1;
          var childN = itemNode.getChildByName("toggle" + nIndex);
          _this._setClickScale(childN);
          _this._setClickHide(childN);
          childN.clickData = clickData[i];
          childN.on("touchend", function(event) {
            itemNode.chooseItem(i);
          });
          itemNode.cilckList.push(childN);
        };
        for (var i = 0; i < clickData.length; i++) {
          var nIndex;
          _loop(i);
        }
        if (this.oldCreate[infoKey]) {
          var self = this;
          defaultIndex = clickData.findIndex(function(x) {
            return x == self.oldCreate[infoKey];
          });
        }
        defaultIndex >= 0 && itemNode.chooseItem(defaultIndex);
      };
      this.initSingleItem = function(nodeName, defaultVale, infoKey) {
        var itemNode = this.createN.getChildByName(nodeName);
        var chilckItem = itemNode.getChildByName("toggle1");
        this._setClickHide(chilckItem);
        this._setClickScale(chilckItem);
        itemNode.setValue = void 0 != this.oldCreate[infoKey] ? this.oldCreate[infoKey] : defaultVale;
        itemNode.refresh = function() {
          chilckItem.getChildByName("checkmark").active = itemNode.setValue;
          this.setRoomInfo(infoKey, itemNode.setValue);
        }.bind(this);
        chilckItem.on("touchend", function() {
          itemNode.setValue = !itemNode.setValue;
          itemNode.refresh();
        });
        itemNode.refresh();
      };
      this.initExplainItem = function(exNode, key, localData) {
        this.listenList = this.listenList || {};
        this.listenList[key] = function(value) {
          exNode.getComponent(cc.Label).string = localData[key + value];
        }.bind(this);
      };
      this.initItemHideList = function(nodeName, nodeIndex, valueK, hideList) {
        var childN = this.createN.getChildByName(nodeName).getChildByName("toggle" + nodeIndex);
        hideList.forEach(function(item) {
          var hideN = this.createN.getChildByName(item.name).getChildByName("toggle" + item.index);
          childN.hideList.push(hideN);
        }.bind(this));
        this.allHideList[valueK] = childN;
        this.checkHideUpdate();
      };
      this.checkHideUpdate = function() {
        for (var k in this.allHideList) this.allHideList[k]._showSome();
        for (var _k in this.roomInfo) {
          var valueK = _k + this.roomInfo[_k];
          this.allHideList[valueK] && this.allHideList[valueK]._hideSome();
        }
      };
      this.getRoomInfo = function() {
        return this.roomInfo;
      };
      this.setRoomInfo = function(key, value) {
        this.roomInfo = this.roomInfo || {};
        this.roomInfo[key] = value;
        this.onInfoChange();
        this.listenList = this.listenList || {};
        this.listenList[key] && this.listenList[key](value);
        this.checkHideUpdate();
      };
      this.gotoStore = function() {};
    };
    module.exports = {
      new: function _new() {
        return new createSys();
      }
    };
    cc._RF.pop();
  }, {} ],
  createSanGongRoom: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3d0dfQpKk1Fm5OrMKd77+PC", "createSanGongRoom");
    "use strict";
    var PukeDefine = require("PukeDefine");
    var Audio = require("Audio");
    cc.Class({
      extends: cc.Component,
      properties: {
        FangFei: cc.Node,
        JuShu: cc.Label,
        CurrentCard: cc.Label,
        RoomCard: cc.Label,
        DingZhuang: cc.Node,
        DiFen: cc.Node,
        ShiXian: cc.Node,
        TeShu: cc.Node
      },
      onLoad: function onLoad() {
        if (fun.gameCfg.releaseType === gameConst.releaseType.apple) {
          var down = this.node.getChildByName("back").getChildByName("down");
          down.getChildByName("btnRecharge").active = false;
          var createN = down.getChildByName("btnCreateRoom");
          createN.getChildByName("text").active = false;
          createN.getChildByName("num").active = false;
        }
        var createInfo = fun.utils.getCreateRoomData(gameConst.gameType.sanGong);
        if (createInfo) {
          this.setToggleChecked("FangFei", createInfo.Charge);
          this.setToggleChecked("DingZhuang", createInfo.DZhuang);
          this.setToggleChecked("DiFen", createInfo.DFeng);
          this.setToggleChecked("ShiXian", createInfo.TimeLimit + 1);
          this.JuShu.string = 5 * (createInfo.Total + 1);
          this.setMuToggleNotChecked();
          for (var i = 0; i < createInfo.Special.length; ++i) this.TeShu.getChildByName("toggle" + createInfo.Special[i]).getComponent(cc.Toggle).isChecked = true;
        }
        this.RoomCard.string = this.JuShu.string;
        this.animation = this.node.getComponent(cc.Animation);
        this.clips = this.animation.getClips();
      },
      onEnable: function onEnable() {
        this.animation.play(this.clips[0].name);
      },
      setToggleChecked: function setToggleChecked(name, value) {
        for (var i = 0; i < this[name].children.length; ++i) this[name].getChildByName("toggle" + (i + 1)).getComponent(cc.Toggle).isChecked = false;
        this[name].getChildByName("toggle" + value).getComponent(cc.Toggle).isChecked = true;
      },
      setMuToggleNotChecked: function setMuToggleNotChecked() {
        for (var i = 0; i < this.TeShu.children.length; ++i) this.TeShu.getChildByName("toggle" + (i + 1)).getComponent(cc.Toggle).isChecked = false;
      },
      onBtnLessClicked: function onBtnLessClicked() {
        Audio.playEffect("hall", "button_nomal.mp3");
        var juShu = parseInt(this.JuShu.string);
        if (juShu > PukeDefine.CREATE_JUSHU_MIN) {
          this.JuShu.string = juShu - PukeDefine.CREATE_JUSHU_SPACE;
          this.RoomCard.string = this.JuShu.string;
        }
      },
      onBtnAddClicked: function onBtnAddClicked() {
        Audio.playEffect("hall", "button_nomal.mp3");
        var juShu = parseInt(this.JuShu.string);
        if (juShu < PukeDefine.CREATE_JUSHU_MAX) {
          this.JuShu.string = juShu + PukeDefine.CREATE_JUSHU_SPACE;
          this.RoomCard.string = this.JuShu.string;
        }
      },
      onBtnCreateClicked: function onBtnCreateClicked() {
        Audio.playEffect("hall", "button_nomal.mp3");
        var data = {};
        data.Special = [];
        for (var i = 1; i <= 2; i++) {
          var togFF = this.FangFei.getChildByName("toggle" + i).getComponent(cc.Toggle);
          togFF.isChecked && (data.Charge = i);
          var togTS = this.TeShu.getChildByName("toggle" + i).getComponent(cc.Toggle);
          togTS.isChecked && (data.Special[data.Special.length] = i);
        }
        for (var _i = 1; _i <= 3; _i++) {
          var toggle = this.DiFen.getChildByName("toggle" + _i).getComponent(cc.Toggle);
          if (toggle.isChecked) {
            data.DFeng = _i;
            break;
          }
        }
        for (var _i2 = 1; _i2 <= 4; _i2++) {
          var togDZ = this.DingZhuang.getChildByName("toggle" + _i2).getComponent(cc.Toggle);
          togDZ.isChecked && (data.DZhuang = _i2);
          var togSX = this.ShiXian.getChildByName("toggle" + _i2).getComponent(cc.Toggle);
          togSX.isChecked && (data.TimeLimit = _i2 - 1);
        }
        data.GameType = gameConst.gameType.sanGong;
        data.Address = fun.db.getData("UserInfo").location;
        data.Zone = 0;
        data.Total = parseInt(this.JuShu.string) / 5 - 1;
        fun.net.pSend("CreateRoom", data, function(rsp) {
          if (void 0 !== rsp.RetCode && 0 !== rsp.RetCode) {
            fun.event.dispatch("Zhuanquan", false);
            10 === rsp.RetCode ? fun.event.dispatch("MinSingleButtonPop", {
              contentStr: "服务未开启"
            }) : 16 === rsp.RetCode ? fun.event.dispatch("MinSingleButtonPop", {
              contentStr: "房间配置错误"
            }) : 17 === rsp.RetCode ? fun.event.dispatch("MinSingleButtonPop", {
              contentStr: "房卡不足"
            }) : fun.event.dispatch("MinSingleButtonPop", {
              contentStr: "创建房间失败"
            });
          } else {
            rsp.EnterRoom = "create";
            fun.db.setData("RoomInfo", rsp);
            fun.utils.saveCreateRoomData(data);
            cc.director.preloadScene("puke", function() {
              fun.event.dispatch("Zhuanquan", false);
              cc.director.loadScene("puke");
            });
          }
        }.bind(this));
      },
      onBtnRechargeClicked: function onBtnRechargeClicked() {
        Audio.playEffect("hall", "button_nomal.mp3");
        cc.log("房卡");
      },
      onBtnCloseClick: function onBtnCloseClick() {
        Audio.playEffect("hall", "button_close.mp3");
        this.animation.play(this.clips[1].name).once("finished", function() {
          this.node.destroy();
        }, this);
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio",
    PukeDefine: "PukeDefine"
  } ],
  createScMahjongRoom: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4538fFfZoZC7rX0O12MzNc4", "createScMahjongRoom");
    "use strict";
    var Audio = require("Audio");
    var PerJuCard = 0;
    var MinJuShu = 4;
    var MaxJuShu = 32;
    var FengDingArr = [ 3, 4, 5, 0 ];
    var DiFenArr = [ 1, 2, 5, 10 ];
    var GuiZeArr = [ 64, 32, 16, 8, 4, 2, 1 ];
    var MoShiArr = [ [ 10, 20, 30 ], [ 1, 2 ], [ 100, 200, 300 ] ];
    cc.Class({
      extends: cc.Component,
      properties: {
        btnAdd: cc.Node,
        btnMinus: cc.Node,
        btnRecharge: cc.Node,
        btnCreateRoom: cc.Node,
        btnClose: cc.Node,
        fangFeiShuomingL: cc.Label,
        JuNumL: cc.Label,
        needCardL: cc.Label,
        currentCardL: cc.Label,
        waFa: cc.Node,
        moShi: cc.Node,
        fengDing: cc.Node,
        diFen: cc.Node,
        fangFei: cc.Node,
        guiZe: cc.Node,
        dingWei: cc.Node,
        storePre: cc.Prefab,
        freeCardL: cc.Label,
        freeTimeBox: cc.Node,
        freeTimeL: cc.Label,
        freeBtn: cc.Node,
        detailPrefab: cc.Prefab
      },
      onLoad: function onLoad() {
        this._needCard = 4;
        this._juShu = MinJuShu;
        this.needCardL.string = 0;
        this.btnAdd.on("click", this.onBtnAddClick, this);
        this.btnMinus.on("click", this.onBtnMinusClick, this);
        this.btnRecharge.on("click", this.onBtnRechargeClick, this);
        this.btnCreateRoom.on("click", this.onBtnCreateRoomClick, this);
        this.btnClose.on("click", this.onBtnCloseClick, this);
        var createInfo = fun.utils.getCreateRoomData(gameConst.gameType.scMahjong);
        if (createInfo) {
          this.setToggleChecked(this.waFa, createInfo.WanFa);
          var msArr = [ 2, 1, 3 ];
          for (var i = 0; i < 3; ++i) {
            var msN = this.moShi.getChildByName("tog" + msArr[i]);
            var weishu = createInfo.MoShi.toString().substr(2 - i, 1);
            this.setToggleChecked(msN, weishu);
          }
          var fengding = {
            3: 1,
            4: 2,
            5: 3,
            0: 4
          };
          this.setToggleChecked(this.fengDing, fengding[createInfo.FengDing]);
          var difen = {
            1: 1,
            2: 2,
            5: 3,
            10: 4
          };
          this.setToggleChecked(this.diFen, difen[createInfo.DiFen]);
          this.setToggleChecked(this.fangFei, createInfo.FangFei);
          var gzBinary = createInfo.GuiZe.toString(2);
          gzBinary = gzBinary.length < 8 ? "0000000".substr(gzBinary.length) + gzBinary : gzBinary;
          for (var _i = 0; _i < 7; ++_i) 1 === parseInt(gzBinary.substr(_i, 1)) && (this.guiZe.getChildByName("toggle" + (_i + 1)).getComponent(cc.Toggle).isChecked = true);
          this.dingWei.getChildByName("toggle1").getComponent(cc.Toggle).isChecked = createInfo.DingWei;
        }
        this.animation = this.node.getComponent(cc.Animation);
        this.clips = this.animation.getClips();
      },
      onEnable: function onEnable() {
        this.animation.play(this.clips[0].name);
      },
      setToggleChecked: function setToggleChecked(node, value) {
        for (var i = 0; i < node.children.length; ++i) node.getChildByName("toggle" + (i + 1)).getComponent(cc.Toggle).isChecked = false;
        node.getChildByName("toggle" + value).getComponent(cc.Toggle).isChecked = true;
      },
      onBtnAddClick: function onBtnAddClick() {
        var needCard = this._needCard;
        if (this._juShu >= MaxJuShu) return;
        this._juShu *= 2;
        this.JuNumL.string = this._juShu;
        needCard = this._juShu * PerJuCard;
        this.needCardL.string = needCard;
      },
      onBtnMinusClick: function onBtnMinusClick() {
        var needCard = this._needCard;
        if (this._juShu <= MinJuShu) return;
        this._juShu /= 2;
        this.JuNumL.string = this._juShu;
        needCard = this._juShu * PerJuCard;
        this.needCardL.string = needCard;
      },
      showRoomCard: function showRoomCard(data, gameType) {
        this.currentCardL.string = data.TollCardCnt || 0;
        this.freeBtn.on("click", function() {
          var detail = cc.instantiate(this.detailPrefab);
          detail.parent = this.node;
          if (!data.FreeCardList) return;
          detail.getComponent("freeCardDetail").setDetail(data.FreeCardList, gameType);
        }.bind(this));
        if (data.FreeCardList && 0 !== data.FreeCardList.length) {
          this.freeTimeBox.active = true;
          var minTime = data.FreeCardList[0].ExpiredAt, freeCard = data.FreeCardList[0].Cnt;
          for (var i in data.FreeCardList) {
            var time = data.FreeCardList[i].ExpiredAt;
            if (minTime > time) {
              minTime = time;
              freeCard = data.FreeCardList[i].Cnt;
            }
          }
          var t = new Date(1e3 * minTime);
          var date = t.getFullYear().toString().substr(2, 2) + "年" + (t.getMonth() + 1) + "月" + t.getDate() + "日";
          this.freeTimeL.string = date + "过期";
          this.freeCardL.string = freeCard;
        } else {
          this.freeCardL.string = 0;
          this.freeTimeBox.active = false;
        }
      },
      onBtnCreateRoomClick: function onBtnCreateRoomClick() {
        var _this = this;
        var req = {
          GameType: gameConst.gameType.scMahjong,
          Address: fun.db.getData("UserInfo").location,
          DingWei: this.dingWei.getChildByName("toggle1").getComponent(cc.Toggle).isChecked
        };
        this.waFa.children.forEach(function(value) {
          value.getComponent(cc.Toggle).isChecked && (req.WanFa = parseInt(value.name.substring(value.name.length - 1)));
        });
        var ms = 0;
        var _loop = function _loop(i) {
          _this.moShi.getChildByName("tog" + (i + 1)).children.forEach(function(value) {
            value.getComponent(cc.Toggle).isChecked && (ms += MoShiArr[i][parseInt(value.name.substring(value.name.length - 1)) - 1]);
          });
        };
        for (var i = 0; i < 3; ++i) _loop(i);
        req.MoShi = ms;
        this.fengDing.children.forEach(function(value) {
          value.getComponent(cc.Toggle).isChecked && (req.FengDing = FengDingArr[parseInt(value.name.substring(value.name.length - 1)) - 1]);
        });
        this.diFen.children.forEach(function(value) {
          value.getComponent(cc.Toggle).isChecked && (req.DiFen = DiFenArr[parseInt(value.name.substring(value.name.length - 1)) - 1]);
        });
        this.fangFei.children.forEach(function(value) {
          value.getComponent(cc.Toggle).isChecked && (req.FangFei = parseInt(value.name.substring(value.name.length - 1)));
        });
        var gz = 0;
        this.guiZe.children.forEach(function(value) {
          value.getComponent(cc.Toggle).isChecked && (gz += GuiZeArr[parseInt(value.name.substring(value.name.length - 1)) - 1]);
        });
        req.GuiZe = gz;
        req.JuShu = this._juShu;
        fun.utils.saveCreateRoomData(req);
        fun.event.dispatch("Zhuanquan", {
          flag: true,
          text: "创建房间中，请稍后..."
        });
        fun.net.pSend("CreateRoom", req, function(rsp) {
          if (rsp.RetCode && 0 !== rsp.RetCode) {
            fun.event.dispatch("Zhuanquan", {
              flag: false
            });
            var mjGameDefine = require("mjGameDefine");
            var str = mjGameDefine.SCRETCODE[rsp.RetCode] || "失败 :" + rsp.RetCode;
            19 == rsp.RetCode ? fun.event.dispatch("MinSingleButtonPop", {
              contentStr: str,
              okBtnStr: "前往充值",
              okCb: this.onRechargeClicked.bind(this)
            }) : fun.event.dispatch("MinSingleButtonPop", {
              contentStr: str
            });
            return;
          }
          fun.db.setData("RoomInfo", rsp);
          fun.db.setData("scmahjong", rsp);
          cc.director.preloadScene("majiang", function() {
            cc.director.loadScene("majiang");
          });
        });
      },
      onBtnRechargeClick: function onBtnRechargeClick() {
        cc.instantiate(this.storePre).parent = this.node;
      },
      onBtnCloseClick: function onBtnCloseClick() {
        Audio.playEffect("hall", "button_close.mp3");
        this.animation.play(this.clips[1].name).once("finished", function() {
          this.node.destroy();
        }, this);
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio",
    mjGameDefine: "mjGameDefine"
  } ],
  createWahuaRoom: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "69e7dHboXhOsJeKtRko4Y24", "createWahuaRoom");
    "use strict";
    var _properties;
    function _defineProperty(obj, key, value) {
      key in obj ? Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      }) : obj[key] = value;
      return obj;
    }
    var Audio = require("Audio");
    var ModelEnum = cc.Enum({
      None: 0,
      Quan: 1,
      Ju: 2
    });
    var MinJuShu = 4;
    var MaxJuShu = 32;
    var MinQuanShu = 1;
    var MaxQuanShu = 4;
    var PerJuCard = 0;
    var PerQuanCard = 0;
    cc.Class({
      extends: cc.Component,
      properties: (_properties = {
        btnAdd: {
          type: cc.Node,
          default: null
        },
        btnMinus: {
          type: cc.Node,
          default: null
        },
        btnQuan: {
          type: cc.Node,
          default: null
        },
        btnJu: {
          type: cc.Node,
          default: null
        },
        btnRecharge: {
          type: cc.Node,
          default: null
        },
        btnCreateRoom: {
          type: cc.Node,
          default: null
        },
        noChose: {
          type: cc.Node,
          default: null
        },
        btnClose: {
          type: cc.Node,
          default: null
        },
        fangFeiShuoming: {
          type: cc.Label,
          default: null
        },
        numLabel: {
          type: cc.Label,
          default: null
        },
        numTitleLabel: {
          type: cc.Label,
          default: null
        },
        labelModel: {
          type: cc.Label,
          default: null
        },
        needCard: {
          type: cc.Label,
          default: null
        },
        currentCardLabel: {
          type: cc.Label,
          default: null
        }
      }, _defineProperty(_properties, "needCard", {
        type: cc.Label,
        default: null
      }), _defineProperty(_properties, "fangFei", {
        type: cc.Node,
        default: null
      }), _defineProperty(_properties, "renShu", {
        type: cc.Node,
        default: null
      }), _defineProperty(_properties, "moShi", {
        type: cc.Node,
        default: null
      }), _defineProperty(_properties, "teShu", {
        type: cc.Node,
        default: null
      }), _defineProperty(_properties, "storePre", {
        type: cc.Prefab,
        default: null
      }), _defineProperty(_properties, "freeCardL", {
        type: cc.Label,
        default: null
      }), _defineProperty(_properties, "freeTimeBox", {
        type: cc.Node,
        default: null
      }), _defineProperty(_properties, "freeBtn", {
        type: cc.Node,
        default: null
      }), _defineProperty(_properties, "freeTimeL", {
        type: cc.Label,
        default: null
      }), _defineProperty(_properties, "detailPrefab", {
        type: cc.Prefab,
        default: null
      }), _properties),
      onLoad: function onLoad() {
        this._juShu = MinJuShu;
        this._quanShu = MinQuanShu;
        this._model = ModelEnum.Ju;
        this._hasCard = 0;
        this._needCard = 0;
        this.btnAdd.on("click", this.onBtnAddClick, this);
        this.btnMinus.on("click", this.onBtnMinusClick, this);
        this.btnQuan.on("click", this.onBtnQuanClick, this);
        this.btnJu.on("click", this.onBtnJuClick, this);
        this.btnRecharge.on("click", this.onBtnRechargeClick, this);
        this.btnCreateRoom.on("click", this.onBtnCreateRoomClick, this);
        this.btnClose.on("click", this.onBtnCloseClick, this);
        var createInfo = fun.utils.getCreateRoomData(gameConst.gameType.digFlower);
        if (createInfo) {
          this.setToggleChecked("fangFei", createInfo.reduceCard);
          this.setToggleChecked("renShu", createInfo.playerNum - 1);
          this.setToggleChecked("moShi", createInfo.patterns);
          this.teShu.getChildByName("toggle1").getComponent(cc.Toggle).isChecked = createInfo.needLocation;
          if (createInfo.makersType === ModelEnum.Quan) {
            this._quanShu = createInfo.ring;
            this.btnQuan.getComponent(cc.Toggle).isChecked = true;
            this.btnJu.getComponent(cc.Toggle).isChecked = false;
            this.onBtnQuanClick();
          } else {
            this._juShu = createInfo.roomNum;
            this.btnQuan.getComponent(cc.Toggle).isChecked = false;
            this.btnJu.getComponent(cc.Toggle).isChecked = true;
            this.onBtnJuClick();
          }
        }
        this.animation = this.node.getComponent(cc.Animation);
        this.clips = this.animation.getClips();
        this.needCard.string = this._needCard;
      },
      onEnable: function onEnable() {
        this.animation.play(this.clips[0].name);
      },
      setToggleChecked: function setToggleChecked(name, value) {
        for (var i = 0; i < this[name].children.length; ++i) this[name].getChildByName("toggle" + (i + 1)).getComponent(cc.Toggle).isChecked = false;
        this[name].getChildByName("toggle" + value).getComponent(cc.Toggle).isChecked = true;
      },
      onBtnCloseClick: function onBtnCloseClick() {
        Audio.playEffect("hall", "button_close.mp3");
        this.animation.play(this.clips[1].name).once("finished", function() {
          this.node.destroy();
        }, this);
      },
      onBtnAddClick: function onBtnAddClick() {
        var needCard = this._needCard;
        switch (this._model) {
         case ModelEnum.Quan:
          if (this._quanShu >= MaxQuanShu) return;
          this._quanShu += 1;
          this.numLabel.string = this._quanShu;
          needCard = this._quanShu * PerQuanCard;
          this.noChose.active = needCard > this._hasCard;
          this.needCard.string = needCard;
          break;

         case ModelEnum.Ju:
          if (this._juShu >= MaxJuShu) return;
          this._juShu *= 2;
          this.numLabel.string = this._juShu;
          needCard = this._juShu * PerJuCard;
          this.noChose.active = needCard > this._hasCard;
          this.needCard.string = needCard;
        }
      },
      onBtnMinusClick: function onBtnMinusClick() {
        var needCard = this._needCard;
        switch (this._model) {
         case ModelEnum.Quan:
          if (this._quanShu <= MinQuanShu) return;
          this._quanShu -= 1;
          this.numLabel.string = this._quanShu;
          needCard = this._quanShu * PerQuanCard;
          this.noChose.active = needCard > this._hasCard;
          this.needCard.string = this._quanShu * PerQuanCard;
          break;

         case ModelEnum.Ju:
          if (this._juShu <= MinJuShu) return;
          this._juShu /= 2;
          this.numLabel.string = this._juShu;
          needCard = this._juShu * PerJuCard;
          this.noChose.active = needCard > this._hasCard;
          this.needCard.string = needCard;
        }
      },
      onBtnQuanClick: function onBtnQuanClick() {
        this._model = ModelEnum.Quan;
        this.numTitleLabel.string = "圈";
        this.labelModel.string = "选择游戏总圈数";
        this.numLabel.string = this._quanShu;
        var needCard = this._quanShu * PerQuanCard;
        this.noChose.active = needCard > this._hasCard;
        this.needCard.string = needCard;
      },
      onBtnJuClick: function onBtnJuClick() {
        this._model = ModelEnum.Ju;
        this.numTitleLabel.string = "局";
        this.labelModel.string = "选择游戏总局数";
        this.numLabel.string = this._juShu;
        var needCard = this._juShu * PerJuCard;
        this.noChose.active = needCard > this._hasCard;
        this.needCard.string = needCard;
      },
      onBtnRechargeClick: function onBtnRechargeClick() {
        cc.instantiate(this.storePre).parent = this.node;
      },
      showRoomCard: function showRoomCard(data, gameType) {
        this.currentCardLabel.string = data.TollCardCnt || 0;
        this.freeBtn.on("click", function() {
          var detail = cc.instantiate(this.detailPrefab);
          detail.parent = this.node;
          detail.getComponent("freeCardDetail").setDetail(data.FreeCardList, gameType);
        }.bind(this));
        if (data.FreeCardList && 0 !== data.FreeCardList.length) {
          this.freeTimeBox.active = true;
          var minTime = data.FreeCardList[0].ExpiredAt, freeCard = data.FreeCardList[0].Cnt;
          for (var i in data.FreeCardList) {
            var time = data.FreeCardList[i].ExpiredAt;
            if (minTime > time) {
              minTime = time;
              freeCard = data.FreeCardList[i].Cnt;
            }
          }
          var t = new Date(1e3 * minTime);
          var date = t.getFullYear().toString().substr(2, 2) + "年" + (t.getMonth() + 1) + "月" + t.getDate() + "日";
          this.freeTimeL.string = date + "过期";
          this.freeCardL.string = freeCard;
        } else {
          this.freeCardL.string = 0;
          this.freeTimeBox.active = false;
        }
      },
      onBtnCreateRoomClick: function onBtnCreateRoomClick() {
        var req = {
          GameType: gameConst.gameType.digFlower,
          Address: fun.db.getData("UserInfo").location,
          makersType: this._model,
          playerNum: 4,
          reduceCard: 1,
          patterns: 1,
          needLocation: this.teShu.getChildByName("toggle1").getComponent(cc.Toggle).isChecked
        };
        this.fangFei.children.forEach(function(value) {
          value.getComponent(cc.Toggle).isChecked && (req.reduceCard = parseInt(value.name.substring(value.name.length - 1)));
        });
        this.renShu.children.forEach(function(value) {
          value.getComponent(cc.Toggle).isChecked && (req.playerNum = parseInt(value.name.substring(value.name.length - 1)) + 1);
        });
        this.moShi.children.forEach(function(value) {
          value.getComponent(cc.Toggle).isChecked && (req.patterns = parseInt(value.name.substring(value.name.length - 1)));
        });
        this._model === ModelEnum.Quan ? req.ring = this._quanShu : req.roomNum = this._juShu;
        fun.utils.saveCreateRoomData(req);
        fun.event.dispatch("Zhuanquan", {
          flag: true,
          text: "创建房间中，请稍后..."
        });
        fun.net.pSend("CreateRoom", req, function(rsp) {
          if (rsp.RetCode && 0 !== rsp.RetCode) {
            fun.event.dispatch("Zhuanquan", {
              flag: false
            });
            return;
          }
          if (rsp.returnStatu && 1 !== rsp.returnStatu) {
            fun.event.dispatch("Zhuanquan", {
              flag: false
            });
            return;
          }
          fun.db.setData("RoomInfo", rsp);
          cc.director.loadScene("wahua");
        });
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio"
  } ],
  freeCardDetail: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e7ebdCmaM5Nh7lE/ZMmwbeF", "freeCardDetail");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        itemPrefab: {
          type: cc.Prefab,
          default: null
        },
        scrollView: {
          type: cc.Node,
          default: null
        },
        noCard: {
          type: cc.Node,
          default: null
        },
        btnClose: {
          type: cc.Node,
          default: null
        }
      },
      onLoad: function onLoad() {
        this.view = this.scrollView.getChildByName("view");
        this.content = this.view.getChildByName("content");
        this.btnClose.on("click", this.onBtnCloseClick, this);
      },
      setDetail: function setDetail(data, gameType) {
        if (!data) return;
        if (0 !== data.length) {
          this.noCard.active = false;
          for (var i in data) {
            var item = cc.instantiate(this.itemPrefab);
            item.setPosition(cc.p(18, -item.getContentSize().height * (parseInt(i) + .5)));
            item.parent = this.content;
            item.getComponent("freeCardItem").setData(data[i], gameType);
          }
        }
        var itemsHight = 68 * data.length;
        var conSize = this.content.getContentSize();
        itemsHight > conSize.height && this.content.setContentSize(conSize.width, itemsHight);
      },
      onBtnCloseClick: function onBtnCloseClick() {
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {} ],
  freeCardItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "accf1X25vtNx4PvPM+hAmbT", "freeCardItem");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        cardNumberL: {
          type: cc.Label,
          default: null
        },
        content: {
          type: cc.Label,
          default: null
        }
      },
      setData: function setData(data, gameType) {
        this.cardNumberL.string = "x" + data.Cnt;
        var t = new Date(1e3 * data.ExpiredAt);
        var date = t.getFullYear() + "年" + (t.getMonth() + 1) + "月" + t.getDate() + "日" + t.getHours() + "时" + t.getMinutes() + "分";
        this.content.string = "将在" + date + "过期";
        var ka = this.node.getChildByName("ka");
        for (var i = 0; i < ka.children.length; ++i) ka.children[i].active = false;
        ka.getChildByName("ka" + gameType).active = true;
      }
    });
    cc._RF.pop();
  }, {} ],
  funBase64: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ef7356gqc1G2Zxo2239p+Wy", "funBase64");
    "use strict";
    exports.byteLength = byteLength;
    exports.toByteArray = toByteArray;
    exports.fromByteArray = fromByteArray;
    exports.decode = decode;
    var base64EncodeChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var base64DecodeChars = new Array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);
    function base64decode(str) {
      var c1, c2, c3, c4;
      var i, len, out;
      len = str.length;
      i = 0;
      out = "";
      while (i < len) {
        do {
          c1 = base64DecodeChars[255 & str.charCodeAt(i++)];
        } while (i < len && -1 == c1);
        if (-1 == c1) break;
        do {
          c2 = base64DecodeChars[255 & str.charCodeAt(i++)];
        } while (i < len && -1 == c2);
        if (-1 == c2) break;
        out += String.fromCharCode(c1 << 2 | (48 & c2) >> 4);
        do {
          c3 = 255 & str.charCodeAt(i++);
          if (61 == c3) return out;
          c3 = base64DecodeChars[c3];
        } while (i < len && -1 == c3);
        if (-1 == c3) break;
        out += String.fromCharCode((15 & c2) << 4 | (60 & c3) >> 2);
        do {
          c4 = 255 & str.charCodeAt(i++);
          if (61 == c4) return out;
          c4 = base64DecodeChars[c4];
        } while (i < len && -1 == c4);
        if (-1 == c4) break;
        out += String.fromCharCode((3 & c3) << 6 | c4);
      }
      return out;
    }
    function utf8to16(str) {
      var out, i, len, c;
      var char2, char3;
      out = "";
      len = str.length;
      i = 0;
      while (i < len) {
        c = str.charCodeAt(i++);
        switch (c >> 4) {
         case 0:
         case 1:
         case 2:
         case 3:
         case 4:
         case 5:
         case 6:
         case 7:
          out += str.charAt(i - 1);
          break;

         case 12:
         case 13:
          char2 = str.charCodeAt(i++);
          out += String.fromCharCode((31 & c) << 6 | 63 & char2);
          break;

         case 14:
          char2 = str.charCodeAt(i++);
          char3 = str.charCodeAt(i++);
          out += String.fromCharCode((15 & c) << 12 | (63 & char2) << 6 | (63 & char3) << 0);
        }
      }
      return out;
    }
    function decode(str) {
      return utf8to16(base64decode(str));
    }
    var lookup = [];
    var revLookup = [];
    var Arr = "undefined" !== typeof Uint8Array ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function placeHoldersCount(b64) {
      var len = b64.length;
      if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
      return "=" === b64[len - 2] ? 2 : "=" === b64[len - 1] ? 1 : 0;
    }
    function byteLength(b64) {
      return 3 * b64.length / 4 - placeHoldersCount(b64);
    }
    function toByteArray(b64) {
      var i, l, tmp, placeHolders, arr;
      var len = b64.length;
      placeHolders = placeHoldersCount(b64);
      arr = new Arr(3 * len / 4 - placeHolders);
      l = placeHolders > 0 ? len - 4 : len;
      var L = 0;
      for (i = 0; i < l; i += 4) {
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[L++] = tmp >> 16 & 255;
        arr[L++] = tmp >> 8 & 255;
        arr[L++] = 255 & tmp;
      }
      if (2 === placeHolders) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[L++] = 255 & tmp;
      } else if (1 === placeHolders) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[L++] = tmp >> 8 & 255;
        arr[L++] = 255 & tmp;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[63 & num];
    }
    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3;
      var output = "";
      var parts = [];
      var maxChunkLength = 16383;
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
      if (1 === extraBytes) {
        tmp = uint8[len - 1];
        output += lookup[tmp >> 2];
        output += lookup[tmp << 4 & 63];
        output += "==";
      } else if (2 === extraBytes) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        output += lookup[tmp >> 10];
        output += lookup[tmp >> 4 & 63];
        output += lookup[tmp << 2 & 63];
        output += "=";
      }
      parts.push(output);
      return parts.join("");
    }
    cc._RF.pop();
  }, {} ],
  funCsv: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "11039km1IVCort92eATlgfJ", "funCsv");
    "use strict";
    var papaparse = require("papaparse.min");
    var csv = {
      turnCsvToJson: function turnCsvToJson(csvname, callback) {
        var toJson = function toJson(csvData) {
          var csvJson = {};
          for (var i = 1; i < csvData.length; ++i) {
            var rowJson = {};
            for (var j = 0; j < csvData[0].length; ++j) {
              rowJson[csvData[0][j].trim()] = csvData[i][j];
              csvJson[i] = rowJson;
            }
          }
          return csvJson;
        };
        cc.loader.loadRes(csvname, function(err, csvData) {
          if (err) {
            cc.error(err.message || err);
            return;
          }
          var jsData = papaparse.parse(csvData, {
            complete: function complete(parsedCsv) {
              callback(toJson(parsedCsv.data));
            }
          });
        });
      },
      getHuoDong: function getHuoDong(type, callback) {
        this.turnCsvToJson("csv/huodong.csv", function(csvJson) {
          for (var i = 0; i < fun.utils.getLength(csvJson); ++i) csvJson[i + 1].STR_HuoDong === type && callback(csvJson[i + 1]);
        });
      },
      getItem: function getItem(itemId, callback) {
        this.turnCsvToJson("csv/item.csv", function(csvJson) {
          for (var i = 0; i < fun.utils.getLength(csvJson); ++i) parseInt(csvJson[i + 1].INT_ItemID) === itemId && callback(csvJson[i + 1]);
        });
      }
    };
    module.exports = csv;
    cc._RF.pop();
  }, {
    "papaparse.min": "papaparse.min"
  } ],
  funDB: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8e687trYm9KOpQF/UHArA3+", "funDB");
    "use strict";
    var _data = {};
    var _pdb = {};
    var db = {
      setData: function setData(key, value) {
        var logFlag = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
        logFlag && fun.log("funDB", "set db " + key + value);
        _data[key] = value;
        fun.event.dispatch(key, value, logFlag);
      },
      getData: function getData(key) {
        var logFlag = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        logFlag && fun.log("funDB", "get db " + key, _data[key]);
        return _data[key] || {};
      },
      clearUp: function clearUp() {
        _data = {};
      },
      setNeedNotice: function setNeedNotice(flag) {
        _pdb.needNotice = flag;
      },
      getNeedNotice: function getNeedNotice(flag) {
        return _pdb.needNotice;
      }
    };
    module.exports = db;
    cc._RF.pop();
  }, {} ],
  funEvent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "07632RDh6xGWIFO3zvl2YYX", "funEvent");
    "use strict";
    var handlers = {};
    var funEvent = {
      add: function add(tag, event, handler) {
        var logFlag = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
        if (handlers[tag]) {
          fun.log("funEvent", "error: this tag has added " + tag);
          return;
        }
        handlers[tag] = {
          event: event,
          handler: handler
        };
        logFlag && fun.log("funEvent", "add new event " + tag + event);
      },
      getSum: function getSum() {
        var count = 0;
        for (var key in handlers) count++;
        return count;
      },
      remove: function remove(tag) {
        var logFlag = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        delete handlers[tag];
        logFlag && fun.log("funEvent", "remove event success " + tag);
      },
      dispatch: function dispatch(event, data) {
        var logFlag = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
        for (var k in handlers) if (handlers[k].event === event) {
          logFlag && fun.log("funEvent", "dispatch event " + k + event, data);
          handlers[k].handler(data);
        }
      },
      clearUp: function clearUp() {
        handlers = {};
      }
    };
    module.exports = funEvent;
    cc._RF.pop();
  }, {} ],
  funLog: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5958aG6Bx5MAJSDU406VfVu", "funLog");
    "use strict";
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          "value" in descriptor && (descriptor.writable = true);
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        protoProps && defineProperties(Constructor.prototype, protoProps);
        staticProps && defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    var logger = function() {
      function logger() {
        _classCallCheck(this, logger);
        if (cc.sys.isBrowser) return;
        var logPath = cc.path.join(jsb.fileUtils.getWritablePath(), "cuocuolog");
        jsb.fileUtils.isDirectoryExist(logPath) || jsb.fileUtils.createDirectory(logPath);
        var saveTime = 24 * fun.gameCfg.logSaveDay * 60 * 60 * 1e3;
        var now = Date.now();
        var files = jsb.fileUtils.listFiles(logPath);
        for (var i = 0; i < files.length; i++) {
          if (".log" !== cc.path.extname(files[i])) continue;
          var time = parseInt(cc.path.basename(files[i], ".log"), 10);
          now - time >= saveTime && jsb.fileUtils.removeFile(files[i]);
        }
        this.fileName = cc.path.join(logPath, now + ".log");
        jsb.fileUtils.isFileExist(this.fileName) || jsb.fileUtils.writeStringToFile("init log " + now + "\n", this.fileName);
      }
      _createClass(logger, [ {
        key: "log",
        value: function log(tag) {
          if (!gameConst.logTags[tag] || gameConst.logTags[tag] > fun.gameCfg.logLevel) return;
          for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) values[_key - 1] = arguments[_key];
          if (cc.sys.isBrowser) {
            console.log("[" + tag + "]", values);
            return;
          }
          var valueStr = "";
          valueStr = 1 === values.length && "string" === typeof values[0] ? values[0] : JSON.stringify(values);
          var str = "[" + tag + "] " + valueStr + " \ttime:" + Date.now() + "\n";
          jsb.fileUtils.appendStringToFile(str, this.fileName);
          cc.log(str);
        }
      }, {
        key: "upLoadLog",
        value: function upLoadLog(desc) {
          var logPath = cc.path.join(jsb.fileUtils.getWritablePath(), "cuocuolog");
          var files = jsb.fileUtils.listFiles(logPath);
          var logurl = fun.gameCfg.logUrl;
          var socket = new WebSocket(logurl);
          socket.binaryType = "arraybuffer";
          socket.onopen = function(event) {
            var userInfo = fun.db.getData("UserInfo");
            for (var i = 0; files.length; i++) {
              if (".log" !== cc.path.extname(files[i])) continue;
              var req = {
                UserId: userInfo.UserId || 1e5,
                UserName: userInfo.name || "unknown",
                FileName: cc.path.basename(files[i], ".log"),
                FileConcent: jsb.fileUtils.getStringFromFile(files[i])
              };
              socket.send(JSON.stringify(req));
            }
            socket.close();
          };
          socket.onclose = function(event) {
            console.log("onclose");
          };
          socket.onerror = function(event) {
            console.log("onerror");
          };
          socket.onmessage = function(event) {
            console.log("onmessage");
          };
        }
      } ]);
      return logger;
    }();
    module.exports = logger;
    cc._RF.pop();
  }, {} ],
  funNetMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fc6d8ycZ1lFybztgkOPI+TN", "funNetMgr");
    "use strict";
    var CmdLength = 3;
    var MaxPlatformCmd = 400;
    var MsgTimeout = 3e3;
    var MaxHeartBeatTimes = 5;
    var HeartBeatInterval = 3e4;
    var ConnectTimeOut = 4e3;
    var MaxUnLoginTime = 3e4;
    var MaxConnectTimes = 3;
    var NormalCloseCode = 1e3;
    var PlatformMsgCfg = require("MessageCfg");
    var GameMsgCfg = {};
    var MgrState = cc.Enum({
      Init: 0,
      Connecting: 1,
      ConnectTimeOut: 2,
      ConnectError: 3,
      Connected: 4,
      Logined: 5,
      MsgTimeOut: 6,
      BeKicked: 7,
      Closed: 8,
      reConnect: 9
    });
    var len = function len(m) {
      var c = 0;
      for (var k in m) c++;
      return c;
    };
    cc.Class({
      connect: function connect(url, handler) {
        fun.log("net", "connect url = " + url + ", this.url = " + this.url);
        this.url = url || this.url;
        handler && this.openHandler.push(handler);
        this.connectTimes++;
        this.lastConnectTime = this.currTime;
        this.socket = new WebSocket(this.url);
        this.socket.onopen = this._onOpen.bind(this);
        this.socket.onclose = this._onClose.bind(this);
        this.socket.onerror = this._onError.bind(this);
        this.socket.onmessage = this._onMessage.bind(this);
        this.state !== MgrState.reConnect && (this.state = MgrState.Connecting);
      },
      addOpenCb: function addOpenCb(handler) {
        this.openHandler.push(handler);
      },
      setGameMsgCfg: function setGameMsgCfg() {
        var cfg = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        GameMsgCfg = cfg;
        0 === len(GameMsgCfg) && (this.listenMessageDelay = []);
      },
      setState: function setState(state) {
        switch (state) {
         case "Login":
          this.state = MgrState.Logined;
          break;

         case "KickOff":
          this.state = MgrState.BeKicked;
          this.socket.close(NormalCloseCode);
        }
      },
      send: function send(cmdStr) {
        var message = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        var handler = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
        if (!this._isConnected()) {
          fun.log("net", "send error: unconnected");
          return false;
        }
        if (handler) {
          if (this.sendHandler[cmdStr]) {
            fun.log("net", "send error: wait for response " + cmdStr);
            return false;
          }
          this.lastResponseFlag = false;
          this.sendHandler[cmdStr] = handler;
          this._netStartDelayTime = Date.now();
        }
        this.lastSendTime = this.currTime;
        var cmd = GameMsgCfg[cmdStr].req;
        message = JSON.stringify(message);
        fun.log("net", "send " + cmdStr + " " + cmd + " " + message);
        this.socket.send(cmd + message);
        return true;
      },
      listen: function listen(cmdStr, handler) {
        if (this.listenHandler[cmdStr]) {
          fun.log("net", "listener error, has added handler of " + cmdStr);
          return;
        }
        fun.log("net", "listen " + cmdStr);
        this.listenHandler[cmdStr] = handler;
      },
      rmListen: function rmListen(cmdStr) {
        delete this.listenHandler[cmdStr];
      },
      close: function close() {
        var code = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : NormalCloseCode;
        fun.log("net", "close xxxxx " + code);
        this.socket && this.socket.close(code);
      },
      pSend: function pSend(cmdStr, message) {
        var handler = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
        if (!this._isConnected()) {
          fun.log("net", "pSend error: unconnected");
          return false;
        }
        if (handler) {
          if ("Heartbeat" !== cmdStr && this.pSendHandler[cmdStr]) {
            fun.log("net", "pSend error: wait for response " + cmdStr);
            return false;
          }
          this.lastResponseFlag = false;
          this.pSendHandler[cmdStr] = handler;
          this._netStartDelayTime = Date.now();
        }
        this.lastSendTime = this.currTime;
        var cmd = PlatformMsgCfg[cmdStr].req;
        message = JSON.stringify(message);
        fun.log("net", "pSend " + cmdStr + " " + cmd + " " + message);
        this.socket.send(cmd + message);
        return true;
      },
      pListen: function pListen(cmdStr, handler) {
        if (this.pListenHandler[cmdStr]) {
          fun.log("net", "pListen error, has added handler of " + cmdStr);
          return;
        }
        fun.log("net", "pListen " + cmdStr);
        this.pListenHandler[cmdStr] = handler;
        var needDel = [];
        this.pListenMessageDelay.forEach(function(value, index) {
          if (value.cmdStr === cmdStr) {
            needDel.push(index);
            handler(value.message);
          }
        });
        for (var i = needDel.length - 1; i >= 0; i--) this.pListenMessageDelay.splice(needDel[i], 1);
      },
      rmPListen: function rmPListen(cmdStr) {
        delete this.pListenHandler[cmdStr];
      },
      ctor: function ctor() {
        this.state = MgrState.Init;
        this.dtsum = 0;
        this.currTime = Date.now();
        this.connectTimes = 0;
        this.lastConnectTime = null;
        this.url = fun.gameCfg.loginUrl;
        this.socket = null;
        this.openHandler = [];
        this.lastSendTime = null;
        this.lastResponseFlag = true;
        this.sendHeartbeatTimes = 0;
        this.sendHandler = {};
        this.listenHandler = {};
        this.pSendHandler = {};
        this.pListenHandler = {};
        this.listenMessageDelay = [];
        this.pListenMessageDelay = [];
      },
      destroy: function destroy() {
        this.socket && this.socket.close(NormalCloseCode);
      },
      update: function update(dt) {
        this.dtsum += dt;
        if (this.dtsum < 1) return;
        this.currTime += 1e3;
        this.dtsum -= 1;
        switch (this.state) {
         case MgrState.Connecting:
          if (this.currTime - this.lastConnectTime > ConnectTimeOut) {
            this._showConnectTimeOut(true);
            this.socket.close(NormalCloseCode);
          }
          break;

         case MgrState.reConnect:
          if (this.currTime - this.lastConnectTime > ConnectTimeOut) {
            this._showDisConnect(true);
            this.socket.close(NormalCloseCode);
          }
          break;

         case MgrState.Connected:
          this.currTime - this.onOpenTime > MaxUnLoginTime && this.socket.close(NormalCloseCode);
          break;

         case MgrState.Logined:
          this.lastResponseFlag ? this.currTime - this.lastSendTime > HeartBeatInterval && this.sendHeartBeat() : this.currTime - this.lastSendTime > MsgTimeout && this.sendHeartBeat();
          if (len(GameMsgCfg) > 0 && this.listenMessageDelay.length > 0) {
            var findFlag = false;
            for (var i = 0; i < this.listenMessageDelay.length; i++) {
              var data = this._getMsgCfgData(this.listenMessageDelay[i].cmd, GameMsgCfg);
              if (data.cmdStr && "notify" === data.netType && this.listenHandler[data.cmdStr]) {
                findFlag = true;
                break;
              }
            }
            if (findFlag) {
              this.listenMessageDelay.forEach(function(item) {
                this._gonMessage(item.cmd, item.message, false);
              }, this);
              this.listenMessageDelay = [];
            }
          }
        }
      },
      _onClose: function _onClose(event) {
        fun.log("net", "_onClose state = " + this.state + " ", event);
        switch (this.state) {
         case MgrState.Connecting:
         case MgrState.reConnect:
          if (this.connectTimes < MaxConnectTimes) this.connect(); else {
            this.state = MgrState.ConnectTimeOut;
            this._showConnectError(true);
          }
          break;

         case MgrState.Connected:
          this._showConnectError(false);
          break;

         case MgrState.Logined:
          this._reConnect();
        }
      },
      _reConnect: function _reConnect() {
        this.state = MgrState.reConnect;
        this.connect();
      },
      _onOpen: function _onOpen() {
        fun.log("net", "_onOpen");
        this.onOpenTime = this.currTime;
        this.lastConnectTime = null;
        this.connectTimes = 0;
        this._showMsgTimeOut(false);
        this._showConnectTimeOut(false);
        if (this.state === MgrState.reConnect) {
          var token = cc.sys.localStorage.getItem("Token");
          if (!token) return;
          fun.net.pSend("TokenLogin", {
            Token: token,
            Platform: cc.sys.os
          }, function(data) {
            fun.net.setState("Login");
            var userInfo = fun.db.getData("UserInfo");
            if (!data.RoomId || 0 === data.RoomId) return;
            fun.net.pSend("EnterRoom", {
              RoomId: data.RoomId,
              Address: userInfo.location
            }, function(rsp) {
              fun.db.setData("RoomInfo", rsp);
              fun.db.setData("EnterRoomId", data.RoomId);
              fun.event.dispatch("ReconnectInGame", true);
            });
          });
        } else {
          this.state = MgrState.Connected;
          this.openHandler.forEach(function(handler) {
            handler();
          });
        }
      },
      _onError: function _onError(event) {
        fun.log("net", "onError", event);
      },
      _onMessage: function _onMessage(event) {
        this.lastResponseFlag = true;
        var data = event.changeData || event.data;
        var cmd = parseInt(data.substr(0, CmdLength));
        var message = null;
        var str = data.substr(CmdLength, data.length);
        if (str && str.length > 0) try {
          message = JSON.parse(str);
          if (message.Error) return;
        } catch (err) {
          fun.log("net", "_onMessage json error ", err);
        }
        cmd < MaxPlatformCmd ? this._ponMessage(cmd, message) : len(GameMsgCfg) > 0 ? this._gonMessage(cmd, message, true) : this.listenMessageDelay.push({
          cmd: cmd,
          message: message
        });
      },
      _gonMessage: function _gonMessage(cmd, message) {
        var save = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
        var data = this._getMsgCfgData(cmd, GameMsgCfg);
        if (!data.cmdStr) {
          fun.log("net", "_gonMessage error no cmdStr " + cmd);
          return;
        }
        if ("rsp" === data.netType && this.sendHandler[data.cmdStr]) {
          var timeCha = Date.now() - this._netStartDelayTime;
          fun.event.dispatch("NetDelayTime", timeCha);
          fun.log("net", "_gonMessage callback", cmd, data.cmdStr, message);
          var cb = this.sendHandler[data.cmdStr];
          delete this.sendHandler[data.cmdStr];
          cb(message);
          return;
        }
        if ("notify" === data.netType && this.listenHandler[data.cmdStr]) {
          fun.log("net", "_gonMessage handler ", cmd, data.cmdStr, message);
          this.listenHandler[data.cmdStr](message);
          return;
        }
        save ? this.listenMessageDelay.push({
          cmd: cmd,
          message: message
        }) : fun.log("net", "_gonMessage error no handler", cmd, data.cmdStr, message);
      },
      _ponMessage: function _ponMessage(cmd, message) {
        var data = this._getMsgCfgData(cmd, PlatformMsgCfg);
        if (!data.cmdStr) {
          fun.log("net", "_ponMessage error no cmdStr " + cmd);
          return;
        }
        if ("rsp" === data.netType && this.pSendHandler[data.cmdStr]) {
          var timeCha = Date.now() - this._netStartDelayTime;
          fun.event.dispatch("NetDelayTime", timeCha);
          "CreateRoom" !== data.cmdStr && "EnterRoom" !== data.cmdStr || fun.db.setData("NetDelayTime", timeCha);
          fun.log("net", "_ponMessage callback", cmd, data.cmdStr, message);
          var cb = this.pSendHandler[data.cmdStr];
          delete this.pSendHandler[data.cmdStr];
          cb(message);
          return;
        }
        if ("notify" === data.netType) {
          if (this.pListenHandler[data.cmdStr]) {
            fun.log("net", "_ponMessage listen", cmd, data.cmdStr, message);
            this.pListenHandler[data.cmdStr](message);
          } else this.pListenMessageDelay.push({
            cmdStr: data.cmdStr,
            message: message
          });
          return;
        }
        fun.log("net", "_ponMessage listen", cmd, data.cmdStr, message);
      },
      sendHeartBeat: function sendHeartBeat() {
        if (this.sendHeartbeatTimes >= MaxHeartBeatTimes) {
          this.socket.close(NormalCloseCode);
          return;
        }
        var flag = this.pSend("Heartbeat", "", function() {
          this._showMsgTimeOut(false);
          this.sendHeartbeatTimes = 0;
        }.bind(this));
        this.sendHeartbeatTimes > 0 && flag && this._showMsgTimeOut(true);
        this.sendHeartbeatTimes++;
      },
      _getMsgCfgData: function _getMsgCfgData(cmd, cfg) {
        for (var cmdStr in cfg) {
          if (cfg[cmdStr].rsp === cmd) return {
            cmdStr: cmdStr,
            netType: "rsp"
          };
          if (cfg[cmdStr].notify === cmd) return {
            cmdStr: cmdStr,
            netType: "notify"
          };
        }
        return {
          cmdStr: false,
          netType: false
        };
      },
      _showConnectError: function _showConnectError(flag) {
        fun.log("net", "showConnectError " + flag);
        if (!flag) return;
        fun.event.dispatch("Zhuanquan", {
          flag: false
        });
        var data = {
          contentStr: "连接失败，确认无误后重试",
          okBtnStr: "重试",
          closeBtnStr: "退出",
          okCb: function okCb() {
            fun.utils.restart();
          },
          closeCb: function closeCb() {
            fun.utils.endGame();
          }
        };
        fun.event.dispatch("MinDoubleButtonPop", data);
      },
      _showDisConnect: function _showDisConnect() {
        fun.event.dispatch("Zhuanquan", {
          flag: false
        });
        var data = {
          contentStr: "与服务器断开连接！",
          okBtnStr: "重试",
          closeBtnStr: "退出",
          okCb: function okCb() {
            fun.utils.restart();
          },
          closeCb: function closeCb() {
            fun.utils.endGame();
          }
        };
        fun.event.dispatch("MinDoubleButtonPop", data);
      },
      _showConnectTimeOut: function _showConnectTimeOut(flag) {
        fun.event.dispatch("Zhuanquan", {
          flag: flag,
          text: "网络连接中，请稍等...",
          from: "net"
        });
      },
      _showMsgTimeOut: function _showMsgTimeOut(flag) {
        fun.event.dispatch("Zhuanquan", {
          flag: flag,
          text: "网络连接中，请稍等...",
          from: "net"
        });
      },
      _isConnected: function _isConnected() {
        return null !== this.socket && this.socket.readyState === WebSocket.OPEN;
      }
    });
    cc._RF.pop();
  }, {
    MessageCfg: "MessageCfg"
  } ],
  funUtils: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "294c06WN8BI36K11JO/Ubio", "funUtils");
    "use strict";
    var _typeof = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function(obj) {
      return typeof obj;
    } : function(obj) {
      return obj && "function" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    var loadedRes = {};
    var loadEnd = function loadEnd(filepath, callback) {
      cc.loader.load(filepath, function(err, tex) {
        if (err) cc.error(err); else {
          var spriteFrame = new cc.SpriteFrame(tex);
          if (spriteFrame) {
            spriteFrame.retain();
            callback(spriteFrame);
          }
        }
      });
    };
    var saveFile = function saveFile(filepath, callback, data) {
      if ("undefined" !== typeof data) {
        jsb.fileUtils.isDirectoryExist(dirpath) || jsb.fileUtils.createDirectory(dirpath);
        if (jsb.fileUtils.writeDataToFile(new Uint8Array(data), filepath)) {
          fun.log("funUtils", "Remote write file succeed.");
          loadEnd(filepath, callback);
        } else fun.log("funUtils", "Remote write file failed.");
      } else fun.log("funUtils", "Remote download file failed.");
    };
    var utils = {
      random: function random(min, max) {
        min = parseFloat(min);
        max = parseFloat(max);
        return Math.floor(Math.random() * (max - min + 1) + min);
      },
      deepClone: function deepClone(data) {
        var dataCopy = void 0;
        dataCopy = data.constructor === Object ? new data.constructor() : data.constructor === Array ? [] : new data.constructor(data.valueOf());
        for (var key in data) dataCopy[key] !== data[key] && ("object" === _typeof(data[key]) ? dataCopy[key] = this.deepClone(data[key]) : dataCopy[key] = data[key]);
        return dataCopy;
      },
      restart: function restart() {
        cc.game.removePersistRootNode(fun.rootNode);
        fun.event.clearUp();
        fun.db.clearUp();
        fun.net.destroy();
        cc.audioEngine.stopAll();
        cc.game.restart();
      },
      endGame: function endGame() {
        cc.game.end();
      },
      screenShoot: function screenShoot(callback) {
        if (!cc.sys.isNative) return;
        var name = "ScreenShoot.jpg";
        var rt = cc.RenderTexture.create(cc.winSize.width, cc.winSize.height, cc.Texture2D.PIXEL_FORMAT_RGBA8888, gl.DEPTH24_STENCIL8_OES);
        cc.director.getScene()._sgNode.addChild(rt);
        rt.setVisible(false);
        rt.begin();
        cc.director.getScene()._sgNode.visit();
        rt.end();
        rt.saveToFile("/" + name, cc.ImageFormat.PNG, true, function() {
          fun.log("funUtils", "save success " + name);
          rt.removeFromParent();
          callback && callback(cc.path.join(jsb.fileUtils.getWritablePath(), name));
        });
      },
      loadNative: function loadNative(id, url, callback) {
        if (cc.sys.isBrowser) {
          callback(null);
          return;
        }
        var dirpath = cc.path.join(jsb.fileUtils.getWritablePath(), "img/");
        jsb.fileUtils.isDirectoryExist(dirpath) || jsb.fileUtils.createDirectory(dirpath);
        var filepath = cc.path.join(dirpath, id + ".png");
        if (jsb.fileUtils.isFileExist(filepath)) {
          fun.log("funUtils", "Remote is find " + filepath);
          loadEnd(filepath, callback);
          return;
        }
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function() {
          fun.log("funUtils", "xhr.readyState " + xhr.readyState + " xhr.status " + xhr.status);
          if (4 === xhr.readyState) if (200 === xhr.status) {
            xhr.responseType = "arraybuffer";
            saveFile(filepath, callback, xhr.response);
          } else saveFile(filepath, callback, null);
        }.bind(this);
        xhr.open("GET", url, true);
        xhr.send();
      },
      getCreateRoomData: function getCreateRoomData(gameType) {
        var dataStr = cc.sys.localStorage.getItem("createRoomData" + gameType);
        return dataStr && dataStr.length > 0 ? JSON.parse(dataStr) : null;
      },
      saveCreateRoomData: function saveCreateRoomData(data) {
        cc.sys.localStorage.setItem("createRoomData" + data.GameType, JSON.stringify(data));
      },
      loadUrlRes: function loadUrlRes(url, imgNode) {
        if (!url || null === url || void 0 === url || url.length < 4) {
          this.setDefaultIcon(imgNode);
          return;
        }
        if (loadedRes[url]) {
          var sf = new cc.SpriteFrame(loadedRes[url]);
          this.setIconRes(sf, imgNode);
          return;
        }
        var self = this;
        cc.loader.load({
          url: url,
          type: "png"
        }, function(err, texture) {
          if (err) {
            cc.error("--- load img err : ", err, url);
            return;
          }
          loadedRes[url] = texture;
          var sf = new cc.SpriteFrame(texture);
          self.setIconRes(sf, imgNode);
        });
      },
      setIconRes: function setIconRes(sf, imgNode) {
        var ow = imgNode.width;
        var oh = imgNode.height;
        imgNode.getComponent(cc.Sprite).spriteFrame = sf;
        imgNode.width = ow;
        imgNode.height = oh;
      },
      setDefaultIcon: function setDefaultIcon(imgNode) {
        if (this.DefaultIconSprite) {
          this.setIconRes(this.DefaultIconSprite, imgNode);
          return;
        }
        var path = "hall/texture/icon_default";
        cc.loader.loadRes(path, cc.SpriteFrame, function(err, sf) {
          if (!err) {
            this.DefaultIconSprite = sf;
            this.setIconRes(sf, imgNode);
          }
        }.bind(this));
      },
      forEach: function forEach(mList, cb) {
        if (!mList) return;
        for (var i = 0; i < mList.length; i++) try {
          cb(mList[i], i);
        } catch (e) {
          fun.log("funUtils", "funUtils forEach : error", mList, cb, e, "end");
          break;
        }
      },
      getBinaryOpts: function getBinaryOpts(Opts) {
        Opts = parseInt(Opts);
        var str = Opts.toString(2) + "";
        var optsList = [];
        var optIndex = 0;
        for (var i = str.length - 1; i > -1; i--) {
          var chatData = str.charAt(i);
          1 == chatData && optsList.push({
            Op: optIndex
          });
          optIndex += 1;
        }
        return optsList;
      },
      getCurTime: function getCurTime() {
        var curDate = new Date();
        var minutes = curDate.getMinutes();
        minutes = minutes < 10 ? "0" + minutes : minutes;
        return curDate.getFullYear() + "/" + (curDate.getMonth() + 1) + "/" + curDate.getDate() + "/ " + curDate.getHours() + ":" + minutes;
      },
      getNetDelayTime: function getNetDelayTime(time) {
        return time <= 300 ? {
          idx: 3,
          rgb: {
            r: 81,
            g: 255,
            b: 37,
            a: 255
          }
        } : time > 300 && time <= 400 ? {
          idx: 2,
          rgb: {
            r: 242,
            g: 176,
            b: 36,
            a: 255
          }
        } : {
          idx: 1,
          rgb: {
            r: 209,
            g: 0,
            b: 11,
            a: 255
          }
        };
      },
      getLength: function getLength(obj) {
        var count = 0;
        for (var value in obj) obj.hasOwnProperty(value) && count++;
        return count;
      },
      setBtnEnabled: function setBtnEnabled(btnNode, isEnabled) {
        btnNode.color = isEnabled ? cc.Color.WHITE : cc.Color.GRAY;
        btnNode.scale = isEnabled ? 1 : .94;
        btnNode.getComponent(cc.Button) && (btnNode.getComponent(cc.Button).enabled = isEnabled);
      }
    };
    module.exports = utils;
    cc._RF.pop();
  }, {} ],
  gameMgrWahua: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "62981jDNQZBwpvR7LlpEfYs", "gameMgrWahua");
    "use strict";
    var WhUtils = require("whUtils");
    var WhDefine = require("whDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        btnExit: {
          type: cc.Node,
          default: null
        },
        btnReady: {
          type: cc.Node,
          default: null
        },
        btnInvite: {
          type: cc.Node,
          default: null
        },
        paiMianAltas: {
          type: cc.SpriteAtlas,
          default: null
        }
      },
      onLoad: function onLoad() {
        fun.event.dispatch("Zhuanquan", {
          flag: false
        });
        fun.net.setGameMsgCfg(require("WahuaCfg"));
        this._userId = fun.db.getData("UserInfo").UserId.toString();
        var roomInfo = fun.db.getData("RoomInfo");
        this._gameStatu = roomInfo.roomRule.gameStatu;
        this._isRoomOwner = this._userId === roomInfo.roomRule.roomOwner;
        this._playerNum = roomInfo.roomRule.playerNum;
        this._seat = new Array();
        this._seatDir = [ "xia", "you", "shang", "zuo" ];
        this.btnExit.on("click", this.onBtnExitClick, this);
        this.btnReady.on("click", this.onBtnReadyClick, this);
        this.btnInvite.on("click", this.onBtnInviteClick, this);
        this.registerListener();
      },
      start: function start() {
        this.reconnet();
        this.escapeFlowerN = this.node.getChildByName("guo");
        this.escapeFlowerN.getChildByName("taohua").on("click", this.onBtnTaohuaClick.bind(this, 1));
        this.escapeFlowerN.getChildByName("guo").on("click", this.onBtnTaohuaClick.bind(this, 2));
      },
      registerListener: function registerListener() {
        fun.net.pListen("EnterRoom", this.onEnterRoomIn.bind(this));
        fun.net.pListen("OffLine", this.onOffLineIn.bind(this));
        fun.net.pListen("OnLine", this.onOnLineIn.bind(this));
        fun.net.listen("DisbandRoom", this.onDisbandRoomIn.bind(this));
        fun.net.listen("Ready", this.onReadyIn.bind(this));
        fun.net.listen("ReadyNext", this.onReadyNextIn.bind(this));
        fun.net.listen("DisbandRoomVote", this.onDisbandRoomVoteIn.bind(this));
        fun.net.listen("DisbandRoomResult", this.onDisbandRoomResultIn.bind(this));
        fun.net.listen("Banker", this.onBankerIn.bind(this));
        fun.net.listen("RockCard", this.onRockCardIn.bind(this));
        fun.net.listen("UserRefresh", this.onUserRefreshIn.bind(this));
        fun.net.listen("NoneOps", this.onNoneOpsIn.bind(this));
        fun.net.listen("StartGame", this.onStartGameIn.bind(this));
        fun.net.listen("PlayCard", this.onPlayCardIn.bind(this));
        fun.net.listen("DrawCard", this.onDrawCardIn.bind(this));
        fun.net.listen("OpsAccept", this.onOpsAcceptIn.bind(this));
        fun.net.listen("RepairCard", this.onRepairCardIn.bind(this));
        fun.net.listen("OneAccount", this.onOneAccountIn.bind(this));
        fun.net.listen("QuitRoom", this.onQuitRoomIn.bind(this));
        fun.net.listen("AllAccount", this.onAllAccountIn.bind(this));
        fun.net.listen("EscapeFlower", this.onEscapeFlowerIn.bind(this));
        fun.event.add("gameMgrWahuaNeedReSortCards", "whNeedReSortCards", function(data) {
          this.showCardById(this._userId, WhUtils.setSortByCards(data));
        }.bind(this));
        fun.event.add("gameMgrWahuaUpdatedCards", "whUpdatedCards", function(data) {
          this._xiaCards = data;
        }.bind(this));
        fun.event.add("gameMgrWahuaInitCompleted", "wahuaInitCompleted", this.updateSeats.bind(this));
        fun.event.add("gameMgrWahuaQuitFromSetting", "wahuaQuitFromSetting", this.onBtnExitClick.bind(this));
      },
      removeListener: function removeListener() {
        fun.net.rmPListen("EnterRoom");
        fun.net.rmPListen("OffLine");
        fun.net.rmPListen("OnLine");
        fun.net.rmListen("DisbandRoom");
        fun.net.rmListen("Ready");
        fun.net.rmListen("ReadyNext");
        fun.net.rmListen("DisbandRoomVote");
        fun.net.rmListen("DisbandRoomResult");
        fun.net.rmListen("Banker");
        fun.net.rmListen("RockCard");
        fun.net.rmListen("UserRefresh");
        fun.net.rmListen("NoneOps");
        fun.net.rmListen("StartGame");
        fun.net.rmListen("PlayCard");
        fun.net.rmListen("DrawCard");
        fun.net.rmListen("OpsAccept");
        fun.net.rmListen("RepairCard");
        fun.net.rmListen("OneAccount");
        fun.net.rmListen("QuitRoom");
        fun.net.rmListen("AllAccount");
        fun.net.rmListen("EscapeFlower");
        fun.event.remove("gameMgrWahuaNeedReSortCards");
        fun.event.remove("gameMgrWahuaUpdatedCards");
        fun.event.remove("gameMgrWahuaInitCompleted");
        fun.event.remove("gameMgrWahuaQuitFromSetting");
      },
      onDestroy: function onDestroy() {
        this.removeListener();
        this._seat = [];
        this._seatDir = [];
        this._xiaCards = [];
      },
      updateSeats: function updateSeats(p) {
        if (!p && 0 !== p) return;
        this._seat[p] = {};
        this._seat[p].ui = this.node.getChildByName(this._seatDir[p]).getComponent("playerUiWahua");
        this._seat[p].pos = p;
        this._seat[p].id = this._seat[p].ui.data ? this._seat[p].ui.data.userId : void 0;
      },
      getSeatByUserId: function getSeatByUserId(id) {
        for (var i = 0; i < this._seat.length; ++i) if (this._seat[i] && this._seat[i].id && this._seat[i].id === id) return this._seat[i];
      },
      reconnet: function reconnet() {
        var roomInfo = fun.db.getData("RoomInfo");
        if (!roomInfo.userMap) return;
        var roomRule = roomInfo.roomRule;
        var userMap = roomInfo.userMap;
        var selfReadyState = userMap[this._userId].currentState;
        this.setReadyState(0 === selfReadyState);
        roomRule.nowZhuangjia && this.setJiaWeiShow(roomRule.nowZhuangjia);
        roomRule.rollChessDice && this.showYaoZhang(roomRule.rollChessDice, true);
        for (var id in userMap) {
          var seat = this.getSeatByUserId(id);
          var chessCard = userMap[id].alreadyChess;
          var chessNum = userMap[id].alreadyChessNum;
          var overChess = userMap[id].overChess;
          chessCard ? this.showCardById(id, WhUtils.setSortByCards(chessCard)) : chessNum && 0 !== chessNum && this.showCardById(id, chessNum);
          if (overChess && 0 !== overChess.length) for (var i = 0; i < overChess.length; ++i) seat.ui.chuPai(overChess[i]);
          var buhuaChess = userMap[id].buhuaChess;
          buhuaChess && 0 !== buhuaChess.length && seat.ui.setBuhuaText(buhuaChess.length);
          var gangAndEatChess = userMap[id].gangAndEatChess;
          if (gangAndEatChess && 0 !== gangAndEatChess.length) for (var _i = 0; _i < gangAndEatChess.length; ++_i) seat.ui.setChiGang(gangAndEatChess[_i]);
        }
      },
      showYaoZhang: function showYaoZhang(yaozhang, isReconnet) {
        var yzNode = this.node.getChildByName("yaozhang");
        for (var i = 0; i < yaozhang.length; ++i) {
          var yz = WhUtils.getCardById(yaozhang[i]);
          var yzCard = yzNode.getChildByName("card" + (i + 1)).getComponent(cc.Sprite);
          yzCard.spriteFrame = this.paiMianAltas.getSpriteFrame(yz);
        }
        isReconnet && (yzNode.active = true);
      },
      showCardById: function showCardById(id, cards) {
        var seat = this.getSeatByUserId(id);
        if (!seat) return;
        seat.ui.setCardShow(cards);
      },
      setEscapeFlowerShow: function setEscapeFlowerShow(flag) {
        this.escapeFlowerN.active = flag;
      },
      onBtnTaohuaClick: function onBtnTaohuaClick(type) {
        fun.net.send("EscapeFlower", {
          isRunaway: type
        });
        this.setEscapeFlowerShow(false);
      },
      setReadyState: function setReadyState(flag) {
        this.btnReady.active = flag;
        if (1 === this._gameStatu) return;
        this.btnInvite.active = false;
        this.btnExit.active = false;
      },
      setJiaWeiShow: function setJiaWeiShow(id) {
        this.node.getChildByName("roomDescScrollView").active = false;
        var tSeat = this.getSeatByUserId(id);
        var tPos = tSeat.pos;
        var newSeat = new Array();
        for (var i = 0; i < this._seat.length; ++i) if (this._seat[i]) {
          var curPos = this._seat[i].pos;
          var dir = 0;
          var cha = curPos - tPos;
          dir = 1 === cha || -3 === cha ? 1 : 2 === cha || -2 === cha ? 2 : 3 === cha || -1 === cha ? 3 : 0;
          newSeat[dir] = this._seat[i];
        }
        for (var _dir = 0; _dir < newSeat.length; ++_dir) newSeat[_dir] && newSeat[_dir].ui.setDirect(_dir);
      },
      onBtnExitClick: function onBtnExitClick() {
        1 === this._gameStatu ? this._isRoomOwner ? fun.net.send("DisbandRoom", {}, function(rsp) {
          this.exitRoom();
        }.bind(this)) : fun.net.send("QuitRoom", {}, function(rsp) {
          this.exitRoom();
        }.bind(this)) : fun.net.send("DisbandRoomVote", {
          applyStatu: 0
        });
      },
      onBtnReadyClick: function onBtnReadyClick() {
        fun.net.send("Ready", {}, function(rsp) {
          if (rsp.returnStatu && 1 === rsp.returnStatu) {
            var seat = this.getSeatByUserId(rsp.ready);
            if (!seat) return;
            seat.ui.showReady(true);
            this.setReadyState(false);
          }
        }.bind(this));
      },
      onBtnInviteClick: function onBtnInviteClick() {
        cc.log("--- invite ---");
      },
      onEnterRoomIn: function onEnterRoomIn(data) {
        var roomInfo = fun.db.getData("RoomInfo");
        roomInfo.userMap || (roomInfo.userMap = {});
        for (var key in data.userOneMap) if ("userId" === key) {
          roomInfo.userMap[data.userOneMap.userId] = data.userOneMap;
          fun.db.setData("RoomInfo", roomInfo);
          return;
        }
      },
      onReadyIn: function onReadyIn(data) {
        if (!data.ready) return;
        var seat = this.getSeatByUserId(data.ready);
        if (!seat) return;
        seat.ui.showReady(true);
      },
      onReadyNextIn: function onReadyNextIn(data) {
        this.setReadyState(true);
      },
      onBankerIn: function onBankerIn(data) {
        this._gameStatu = 2;
        this.setJiaWeiShow(data.Zhuangjia);
        this.setReadyState(false);
        for (var i = 0; i < this._seat.length; ++i) this._seat[i] && this._seat[i].ui.showReady(false);
      },
      onRockCardIn: function onRockCardIn(data) {
        var yzNode = this.node.getChildByName("yaozhang");
        this.showYaoZhang(data.rollChessDice);
        var szCallback = function szCallback() {
          yzNode.active = true;
        };
        var szCard = WhUtils.getCardById(data.rollChessDice[0]);
        var szPoint = WhUtils.getSaiziPointByCard(szCard);
        fun.event.dispatch("wahuaSaiziEnd", {
          point: szPoint,
          callback: szCallback
        });
      },
      onUserRefreshIn: function onUserRefreshIn(data) {
        cc.log("onUserRefreshIn--------");
      },
      onNoneOpsIn: function onNoneOpsIn(data) {
        cc.log("onNoneOpsIn--------");
      },
      onStartGameIn: function onStartGameIn(data) {
        this.setEscapeFlowerShow(true);
        this.showCardById(this._userId, WhUtils.setSortByCards(data.alreadyChess));
        for (var i = 0; i < this._seat.length; ++i) this._seat[i] && this._seat[i].id && this._seat[i].id !== this._userId && this._seat[i].ui.setCardShow(WhDefine.InitCardsNumber);
      },
      onEscapeFlowerIn: function onEscapeFlowerIn(data) {
        this.setEscapeFlowerShow(true);
      },
      onPlayCardIn: function onPlayCardIn(data) {
        if (data.playChessUser) {
          var seat = this.getSeatByUserId(data.playChessUser);
          data.hint && data.playChessUser !== this._userId ? seat.ui.showQuan() : seat.ui.chuPai(data.playChess, true);
        }
      },
      onDrawCardIn: function onDrawCardIn(data) {
        if (data.fetchChess && data.playGetChessUser === this._userId) {
          cc.log("--- xia 摸牌 ---");
          this._xiaCards.cardArr.push(data.fetchChess);
        }
        var seat = this.getSeatByUserId(data.playGetChessUser);
        seat.ui.moPai(data.fetchChess);
      },
      onOpsAcceptIn: function onOpsAcceptIn(data) {
        if (data.hint && 1 === data.hint) fun.event.dispatch("wahuaOpsEvent", data); else {
          if (data.isHu) {
            for (var id in data.other_chess) {
              cc.log("--- id, card: ", id, data.other_chess[id]);
              var _seat = this.getSeatByUserId(id);
              cc.log("--- seat: ", _seat);
              _seat.ui.setHu(data.other_chess[id]);
            }
            return;
          }
          var seat = this.getSeatByUserId(data.playChessUser);
          data.isReplaceWhite ? seat.ui.setHuan(data.playChess) : seat.ui.setChiGang(data.playChess, true);
        }
      },
      onRepairCardIn: function onRepairCardIn(data) {
        if (!data.buhuaChess || !data.buhua_player) return;
        var seat = this.getSeatByUserId(data.buhua_player);
        seat.ui.setBuhuaText(data.buhuaChess.length);
        if (!data.buhuaReplaceWhiteChess) return;
        for (var i = 0; i < data.buhuaChess.length; ++i) for (var j = 0; j < this._xiaCards.cardArr.length; ++j) data.buhuaChess[i] === this._xiaCards.cardArr[j] && (this._xiaCards.cardArr[j] = data.buhuaReplaceWhiteChess[i]);
        this.showCardById(data.buhua_player, WhUtils.setSortByCards(this._xiaCards.cardArr));
      },
      onOneAccountIn: function onOneAccountIn(data) {
        cc.log("onOneAccountIn--------");
      },
      onAllAccountIn: function onAllAccountIn(data) {
        cc.log("onAllAccountIn--------");
      },
      onDisbandRoomIn: function onDisbandRoomIn(data) {
        this.exitRoom();
      },
      onQuitRoomIn: function onQuitRoomIn(data) {
        var roomInfo = fun.db.getData("RoomInfo");
        delete roomInfo.userMap[data.userId];
        fun.db.setData("RoomInfo", roomInfo);
      },
      onDisbandRoomVoteIn: function onDisbandRoomVoteIn(data) {
        if (this.applyStatu) for (var id1 in this.applyStatu) for (var id2 in data.applyStatu) id1 === id2 && (this.applyStatu[id1].state = data.applyStatu[id2]); else {
          this.applyStatu = {};
          for (var i = 0; i < this._seat.length; ++i) for (var id in data.applyStatu) {
            var seat = this._seat[i];
            if (seat && seat.id && seat.id === id) {
              this.applyStatu[id] = {};
              this.applyStatu[id].state = data.applyStatu[id];
              this.applyStatu[id].name = seat.ui.data.userName;
              this.applyStatu[id].headUrl = seat.ui.data.UserHeadUrl;
            }
          }
        }
        data.applyStatu = this.applyStatu;
        fun.event.dispatch("wahuaDisbandRoom", data);
      },
      onDisbandRoomResultIn: function onDisbandRoomResultIn(data) {
        data.breakStatu && 1 === data.breakStatu ? this.exitRoom() : data.breakStatu && 2 === data.breakStatu && fun.event.dispatch("wahuaDisbandRoom", false);
      },
      onOffLineIn: function onOffLineIn(data) {
        fun.event.dispatch("OffLineState", {
          flag: true,
          userId: parseInt(data.outLine)
        });
      },
      onOnLineIn: function onOnLineIn(data) {
        fun.event.dispatch("OffLineState", {
          flag: false,
          userId: parseInt(data.userId)
        });
      },
      exitRoom: function exitRoom() {
        var userInfo = fun.db.getData("UserInfo");
        userInfo.RoomId = 0;
        fun.db.setData("UserInfo", userInfo);
        cc.director.loadScene("hall");
      }
    });
    cc._RF.pop();
  }, {
    WahuaCfg: "WahuaCfg",
    whDefine: "whDefine",
    whUtils: "whUtils"
  } ],
  globalUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "37bdfj7iy9Brp6KX7ZHC2BL", "globalUI");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        zhuanquanPre: {
          type: cc.Prefab,
          default: null
        },
        minSingleButtonPre: {
          type: cc.Prefab,
          default: null
        },
        minDoubleButtonPre: {
          type: cc.Prefab,
          default: null
        }
      },
      onLoad: function onLoad() {
        this.hasZhuanquan = false;
        this._hasNetZhuanquan = false;
        fun.event.add("GlobalUIZhuanquan", "Zhuanquan", function(data) {
          var flag = false;
          var text = "";
          var from = "normal";
          if ("boolean" === typeof data) flag = data; else {
            flag = data.flag;
            text = data.text || text;
            from = data.from;
          }
          if ("net" === from) if (flag) {
            if (!this._hasNetZhuanquan) {
              this.netZhuanquan = cc.instantiate(this.zhuanquanPre);
              this.netZhuanquan.parent = cc.director.getScene().getChildByName("Canvas");
              this.netZhuanquan.setSiblingIndex(9998);
              this._hasNetZhuanquan = true;
            }
            this.netZhuanquan.getComponent("zhuanquan").setString(text);
          } else if (this._hasNetZhuanquan) {
            this.netZhuanquan.destroy();
            this._hasNetZhuanquan = false;
          }
          if (flag) {
            if (!this.hasZhuanquan) {
              this.zhuanquan = cc.instantiate(this.zhuanquanPre);
              this.zhuanquan.parent = cc.director.getScene().getChildByName("Canvas");
              this.zhuanquan.setSiblingIndex(9998);
              this.hasZhuanquan = true;
            }
            this.zhuanquan.getComponent("zhuanquan").setString(text);
          } else if (this.hasZhuanquan) {
            this.zhuanquan.destroy();
            this.hasZhuanquan = false;
          }
        }.bind(this));
        fun.event.add("GlobalUIMinSingleButtonPop", "MinSingleButtonPop", function(data) {
          var mnode = cc.instantiate(this.minSingleButtonPre);
          mnode.parent = cc.director.getScene().getChildByName("Canvas") || cc.director.getScene().getChildByName("DDZ_UIROOT") || cc.director.getScene().getChildByName("DDZ_Replay");
          mnode.setSiblingIndex(9999);
          mnode.getComponent("minSingleButtonPop").init(data);
        }.bind(this));
        fun.event.add("GlobalUIMinDoubleButtonPop", "MinDoubleButtonPop", function(data) {
          var mnode = cc.instantiate(this.minDoubleButtonPre);
          mnode.parent = cc.director.getScene().getChildByName("Canvas") || cc.director.getScene().getChildByName("DDZ_UIROOT") || cc.director.getScene().getChildByName("DDZ_Replay");
          mnode.setSiblingIndex(9999);
          mnode.getComponent("minDoubleButtonPop").init(data);
        }.bind(this));
      },
      onDestroy: function onDestroy() {
        fun.event.remove("GlobalUIZhuanquan");
        fun.event.remove("GlobalUIMinSingleButtonPop");
        fun.event.remove("GlobalUIMinDoubleButtonPop");
      }
    });
    cc._RF.pop();
  }, {} ],
  hallActivity: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3af18zJCWVGm621GklPs3ni", "hallActivity");
    "use strict";
    var GameTypeEnum = cc.Enum({
      wlmj: 1,
      hymj: 3,
      wlwh: 5,
      ddz: 6,
      scmj: 7
    });
    var LingQuError = cc.Enum({
      FAILED: 1,
      RECIVED: 2,
      NOT_EXIST: 3,
      NO_SELF: 4
    });
    cc.Class({
      extends: cc.Component,
      properties: {
        shareCardItem: cc.Prefab
      },
      onLoad: function onLoad() {
        var bg = this.node.getChildByName("back");
        bg.getChildByName("btnClose").on("click", this.onBtnCloseClick, this);
        this.leftBox = bg.getChildByName("leftBox");
        this.rightBox = bg.getChildByName("rightBox");
        this.shareCardBox = bg.getChildByName("shareCardBox");
        this.shareReceiveCode = bg.getChildByName("shareReceiveCode");
        this.shareRecording = bg.getChildByName("shareRecording");
        this.shareContent = bg.getChildByName("shareContent");
        this.lingCardBox = bg.getChildByName("lingCardBox");
        this._menuNum = this.rightBox.children.length;
        for (var i = 0; i < this._menuNum; ++i) this.leftBox.getChildByName("btnActivity" + (i + 1)).on("click", this.onActivityMenuShow.bind(this, i + 1));
        this.onActivityMenuShow(1);
        this.animation = this.node.getComponent(cc.Animation);
        this.clips = this.animation.getClips();
        var isApple = fun.gameCfg.releaseType === gameConst.releaseType.apple;
        isApple && (this.leftBox.getChildByName("btnActivity2").active = false);
        var isFisher = fun.gameCfg.releaseType === gameConst.releaseType.fisher;
        if (isFisher) {
          this.leftBox.getChildByName("btnActivity3").destroy();
          this.leftBox.getChildByName("btnDown3").destroy();
          this._menuNum--;
        }
      },
      onEnable: function onEnable() {
        this.animation.play(this.clips[0].name);
      },
      start: function start() {
        var hd3 = this.rightBox.getChildByName("huodong3");
        hd3.getChildByName("btnFx").on("click", function() {
          fun.net.pSend("TimeCardList", {
            Type: GameTypeEnum.wlmj
          }, function(rsp) {
            this._timeCardListFir = rsp;
            this.shareCardBox.active = true;
            this.initShareCardShow();
          }.bind(this));
        }.bind(this));
        hd3.getChildByName("btnLing").on("click", function() {
          this.shareReceiveCode.getChildByName("editBox").getComponent(cc.EditBox).string = "";
          this.shareReceiveCode.active = true;
        }.bind(this));
        this.initLingCardShow();
        fun.event.add("hallActivityItemNumber", "shareCardItemNumber", function(data) {
          this._shareContentList = data;
          this.shareContent.getChildByName("InputLabel").getComponent(cc.EditBox).string = "";
          this.shareContent.active = true;
          var item = this.shareContent.getChildByName("item");
          item.getChildByName("card").getComponent(cc.Label).string = "x" + data.Cnt;
          item.getChildByName("content").getComponent(cc.Label).string = "将在" + data.date + "过期";
          item.getChildByName("img").getChildByName("ka" + data.GameType).active = true;
        }.bind(this));
        fun.event.add("hallActivityItemAgain", "shareCardItemAgain", function(data) {
          this.wxShareFriendCard(data.Order, data.ExpireAt, data.Cnt, data.date);
        }.bind(this));
      },
      onDestroy: function onDestroy() {
        fun.event.remove("hallActivityItemNumber");
        fun.event.remove("hallActivityItemAgain");
      },
      onActivityMenuShow: function onActivityMenuShow(count) {
        for (var i = 0; i < this._menuNum; ++i) {
          this.leftBox.getChildByName("btnActivity" + (i + 1)).active = true;
          this.leftBox.getChildByName("btnDown" + (i + 1)).active = false;
          this.rightBox.getChildByName("huodong" + (i + 1)).active = false;
        }
        this.leftBox.getChildByName("btnActivity" + count).active = false;
        this.leftBox.getChildByName("btnDown" + count).active = true;
        this.rightBox.getChildByName("huodong" + count).active = true;
        this.shareCardBox.active = false;
      },
      initShareCardShow: function initShareCardShow() {
        this.shareScrollView = this.shareCardBox.getChildByName("scrollView").getChildByName("view");
        this.shareScrollViewSize = this.shareScrollView.getContentSize();
        this.shareScrollViewCont = this.shareScrollView.getChildByName("content");
        this._shareGameType = 0;
        if (this._timeCardListFir.List) {
          this._shareGameType = this._timeCardListFir.Type;
          this.shareCardListView(this._timeCardListFir);
        }
        this.shareCardBox.getChildByName("tog").children.forEach(function(value) {
          value.on("click", function() {
            var type = GameTypeEnum[value.name];
            if (this._shareGameType === type) return;
            this._shareGameType = type;
            fun.net.pSend("TimeCardList", {
              Type: type
            }, function(rsp) {
              !rsp || rsp.RetCode || rsp.Status ? fun.event.dispatch("MinSingleButtonPop", {
                contentStr: "查询分享限时卡失败！"
              }) : rsp.List ? this.shareCardListView(rsp) : this.shareScrollViewCont.removeAllChildren();
            }.bind(this));
          }.bind(this));
        }.bind(this));
        this.shareCardBox.getChildByName("btnBack").on("click", function() {
          this.shareCardBox.active = false;
        }.bind(this));
        this.shareCardBox.getChildByName("btnJl").on("click", function() {
          fun.net.pSend("SharedTimeCardList", {}, function(rsp) {
            if (!rsp || rsp.RetCode || rsp.Status) fun.event.dispatch("MinSingleButtonPop", {
              contentStr: "查询分享限时卡记录失败！"
            }); else {
              this.shareCardRecordView(rsp);
              this.shareRecording.active = true;
            }
          }.bind(this));
        }.bind(this));
        this.shareRecording.getChildByName("btnClose").on("click", function() {
          this.shareRecording.active = false;
        }.bind(this));
        this.shareContent.getChildByName("btnFx").on("click", function() {
          var inputL = parseInt(this.shareContent.getChildByName("InputLabel").getComponent(cc.EditBox).string);
          !inputL || inputL <= 0 ? fun.event.dispatch("MinSingleButtonPop", {
            contentStr: "请输入正确的数字！"
          }) : inputL > this._shareContentList.Cnt ? fun.event.dispatch("MinSingleButtonPop", {
            contentStr: "你所分享的限时卡数量超过你拥有的数量！"
          }) : fun.net.pSend("ShareTimeCard", {
            OrderId: this._shareContentList.OrderId,
            Cnt: inputL
          }, function(rsp) {
            if (!rsp || rsp.RetCode || rsp.Status) fun.event.dispatch("MinSingleButtonPop", {
              contentStr: "分享限时房卡失败！"
            }); else {
              for (var i = 0; i < this.shareScrollViewCont.children.length; ++i) {
                var item = this.shareScrollViewCont.children[i];
                if (item.orderId === this._shareContentList.OrderId) {
                  var itemL = item.getChildByName("card").getComponent(cc.Label);
                  var newCardNum = parseInt(itemL.string.substr(1, itemL.string.length - 1)) - inputL;
                  itemL.string = "x" + newCardNum;
                  this._shareContentList.Cnt = newCardNum;
                  item.getComponent("shareCardItem").setData(this._shareContentList);
                }
              }
              this.wxShareFriendCard(rsp.Order, this._shareContentList.ExpiredAt, inputL, this._shareContentList.date);
            }
            this.shareContent.active = false;
          }.bind(this));
        }.bind(this));
        this.shareContent.getChildByName("btnClose").on("click", function() {
          this.shareContent.active = false;
        }.bind(this));
        this.shareContent.getChildByName("btnCancel").on("click", function() {
          this.shareContent.active = false;
        }.bind(this));
      },
      shareCardListView: function shareCardListView(data) {
        this.shareScrollViewCont.removeAllChildren();
        this.shareScrollViewCont.setContentSize(this.shareScrollViewSize.width, this.shareScrollViewSize.height);
        var itemSize = 0;
        for (var i = 0; i < data.List.length; i++) {
          var item = cc.instantiate(this.shareCardItem);
          var _list = data.List[i];
          itemSize = item.getContentSize().height;
          item.orderId = _list.OrderId;
          item.setPositionY(.85 * -i * itemSize - 40);
          _list.GameType = data.Type;
          item.getComponent("shareCardItem").setData(_list);
          item.parent = this.shareScrollViewCont;
        }
        var contSize = this.shareScrollViewCont.getContentSize();
        var itemHeight = itemSize * data.List.length;
        itemHeight > contSize.height && this.shareScrollViewCont.setContentSize(contSize.width, itemHeight);
      },
      shareCardRecordView: function shareCardRecordView(data) {
        var noJiLu = this.shareRecording.getChildByName("noJiLu");
        if (!data.List) {
          noJiLu.active = true;
          return;
        }
        noJiLu.active = false;
        var scrollView = this.shareRecording.getChildByName("scrollView").getChildByName("view");
        var viewSize = scrollView.getContentSize();
        var contentN = scrollView.getChildByName("content");
        contentN.removeAllChildren();
        contentN.setContentSize(viewSize.width, viewSize.height);
        var itemSize = 0;
        for (var i = 0; i < data.List.length; ++i) {
          var item = cc.instantiate(this.shareCardItem);
          var _list = data.List[i];
          itemSize = item.getContentSize().height;
          item.setPositionY(.85 * -i * itemSize - 40);
          _list.isJiLu = true;
          item.getComponent("shareCardItem").setData(_list);
          item.parent = contentN;
        }
        var contSize = contentN.getContentSize();
        var itemHeight = itemSize * data.List.length;
        itemHeight > contSize.height && contentN.setContentSize(contSize.width, itemHeight);
      },
      initLingCardShow: function initLingCardShow() {
        var editBox = this.shareReceiveCode.getChildByName("editBox").getComponent(cc.EditBox);
        this.shareReceiveCode.getChildByName("btnLing").on("click", function() {
          var editLabel = editBox.string;
          var reg = /^[0-9a-zA-Z]+$/;
          editLabel.length < 16 || !reg.test(editLabel) ? fun.event.dispatch("MinSingleButtonPop", {
            contentStr: "请输入正确的领取码！"
          }) : fun.net.pSend("ReceiveTimeCard", {
            Order: editLabel
          }, function(rsp) {
            if (!rsp || rsp.RetCode) fun.event.dispatch("MinSingleButtonPop", {
              contentStr: "领取限时房卡失败！"
            }); else if (rsp.Status) switch (rsp.Status) {
             case LingQuError.NO_SELF:
              fun.event.dispatch("MinSingleButtonPop", {
                contentStr: "不能领取自己分享的限时卡！"
              });
              break;

             case LingQuError.RECIVED:
              fun.event.dispatch("MinSingleButtonPop", {
                contentStr: "领取码已被使用！"
              });
              break;

             case LingQuError.NOT_EXIST:
              fun.event.dispatch("MinSingleButtonPop", {
                contentStr: "领取码错误或限时卡过期！"
              });
              break;

             default:
              fun.event.dispatch("MinSingleButtonPop", {
                contentStr: "领取限时房卡失败！"
              });
            } else {
              this.lingCardBox.getChildByName("img").getChildByName("ka" + rsp.GameType).active = true;
              this.lingCardBox.getChildByName("num").getComponent(cc.Label).string = "x" + rsp.Cnt;
              var t = new Date(1e3 * rsp.ExpireAt);
              var date = t.getFullYear() + "年" + (t.getMonth() + 1) + "月" + t.getDate() + "日" + t.getHours() + "时" + t.getMinutes() + "分";
              this.lingCardBox.getChildByName("time").getComponent(cc.Label).string = "到期时间: " + date;
              this.shareReceiveCode.active = false;
              this.lingCardBox.active = true;
            }
          }.bind(this));
        }.bind(this));
        this.shareReceiveCode.getChildByName("btnClose").on("click", function() {
          this.shareReceiveCode.active = false;
        }.bind(this));
        this.shareReceiveCode.getChildByName("btnCancel").on("click", function() {
          this.shareReceiveCode.active = false;
        }.bind(this));
        this.lingCardBox.getChildByName("btnLing").on("click", function() {
          this.lingCardBox.active = false;
        }.bind(this));
      },
      wxShareFriendCard: function wxShareFriendCard(order, expireAt, num, date) {
        var url = gameConst.commonUrl.timeLimitCard;
        var name = encodeURI(fun.db.getData("UserInfo").UserName);
        var info = {};
        info.title = "收到新的限时卡";
        info.content = "请在" + date + "领取";
        info.url = url + "?fkid=" + order + "&fknumber=" + num + "&fkname=" + name + "&fkdate=" + expireAt;
        require("JSPhoneWeChat").WxShareFriend(info);
      },
      onBtnCloseClick: function onBtnCloseClick() {
        require("Audio").playEffect("hall", "button_close.mp3");
        this.animation.play(this.clips[1].name).once("finished", function() {
          this.node.destroy();
        }, this);
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio",
    JSPhoneWeChat: "JSPhoneWeChat"
  } ],
  hallEnterNum: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7a36eokTsxGx4A3hUSbXt9A", "hallEnterNum");
    "use strict";
    var GameCfg = require("GameCfg");
    var Audio = require("Audio");
    var PanelType = cc.Enum({
      enterRoom: 0,
      viewPlayback: 1
    });
    cc.Class({
      extends: cc.Component,
      properties: {
        panelType: {
          type: PanelType,
          default: PanelType.enterRoom
        }
      },
      onLoad: function onLoad() {
        var bg = this.node.getChildByName("back");
        this.targetNum = [];
        bg.getChildByName("btnClose").on("click", this.onBtnCloseClick, this);
        bg.getChildByName("btnClean").on("click", this.onBtnCleanClick, this);
        bg.getChildByName("btnReenter").on("click", this.onBtnReenterClick, this);
        var enterNumber = bg.getChildByName("enterNumber");
        this.maxNum = enterNumber.childrenCount;
        this.numberEnter = [];
        for (var i = 0; i < this.maxNum; i++) {
          this.numberEnter[i] = enterNumber.getChildByName("num_" + (i + 1)).getChildByName("content");
          this.numberEnter[i].active = false;
        }
        var numBtns = bg.getChildByName("numBtns");
        for (var _i = 0; _i < 10; _i++) numBtns.getChildByName("btnNum" + _i).on("click", this.onNumBtnClick.bind(this, _i));
        this.animation = this.node.getComponent(cc.Animation);
        this.clips = this.animation.getClips();
      },
      onEnable: function onEnable() {
        this.animation.play(this.clips[0].name);
      },
      onBtnCloseClick: function onBtnCloseClick() {
        Audio.playEffect("hall", "button_close.mp3");
        this.animation.play(this.clips[1].name).once("finished", this.onAnimationFinished, this);
      },
      onAnimationFinished: function onAnimationFinished() {
        if (this.panelType === PanelType.viewPlayback) this.node.destroy(); else {
          this.targetNum = [];
          this.numberEnter.forEach(function(v) {
            v.active = false;
          });
          this.node.active = false;
        }
      },
      onBtnCleanClick: function onBtnCleanClick() {
        Audio.playEffect("hall", "button_close.mp3");
        if (this.targetNum.length <= 0) return;
        this.targetNum.pop();
        this.numberEnter[this.targetNum.length].active = false;
      },
      onBtnReenterClick: function onBtnReenterClick() {
        Audio.playEffect("hall", "button_close.mp3");
        this.targetNum = [];
        this.numberEnter.forEach(function(v) {
          v.active = false;
        });
      },
      getRoomIdByArray: function getRoomIdByArray(arr) {
        var roomid = "";
        arr.forEach(function(num) {
          roomid += num;
        });
        return parseInt(roomid);
      },
      onNumBtnClick: function onNumBtnClick(num) {
        Audio.playEffect("hall", "button_nomal.mp3");
        if (this.targetNum.length >= this.maxNum) return;
        this.numberEnter[this.targetNum.length].getComponent(cc.Label).string = num;
        this.numberEnter[this.targetNum.length].active = true;
        this.targetNum.push(num);
        if (this.targetNum.length < this.maxNum) return;
        var rId = this.getRoomIdByArray(this.targetNum);
        if (this.panelType === PanelType.viewPlayback) {
          fun.event.dispatch("Zhuanquan", {
            flag: true,
            text: "回放加载中，请稍后..."
          });
          fun.net.pSend("ReplayRecordByCode", {
            Code: rId
          }, function(data) {
            if (data.RetCode && 0 !== data.RetCode) {
              fun.event.dispatch("Zhuanquan", {
                flag: false
              });
              return;
            }
            fun.db.setData("ReplayInfo", data);
          });
        } else this.panelType === PanelType.enterRoom && fun.db.setData("EnterRoomId", rId);
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio",
    GameCfg: "GameCfg"
  } ],
  hallGangGao: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c39f9zjUItBarW49ShTxPek", "hallGangGao");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        mask: {
          type: cc.Node,
          default: null
        },
        content: {
          type: cc.Node,
          default: null
        },
        contentLabel: {
          type: cc.Label,
          default: null
        },
        normalColor: {
          default: cc.Color.WHITE
        },
        superColor: {
          default: cc.Color.WHITE
        }
      },
      onLoad: function onLoad() {
        this.minx = this.mask.x - this.mask.width / 2 - 50;
        this.startx = this.content.x;
        this.sumdt = 0;
        this.currTime = Date.now();
        this.announceInfo = fun.db.getData("AnnounceInfo");
        0 === this.announceInfo.length && (this.announceInfo = [ {
          content: "搓搓麻将新版正式公测，所有游戏免费畅玩！",
          range: 10,
          type: 11
        }, {
          content: "文明游戏，严禁赌博！",
          range: 10,
          type: 11
        } ]);
        this.announceInfo.forEach(function(value, key) {
          11 === value.type ? this.announceInfo[key].nextShowTime = this.currTime + 1e3 * value.range : this.announceInfo[key].nextShowTime = this.currTime;
        }, this);
        this.sortAnnounceInfo();
        this.onAnnounceInfoEvent(this.announceInfo);
        fun.event.add("HallGangGao", "AnnounceInfo", this.onAnnounceInfoEvent.bind(this));
      },
      initGongGao: function initGongGao(content, color) {
        this.content.x = this.startx;
        this.contentLabel.string = content;
        this.content.color = color;
      },
      update: function update(dt) {
        this.sumdt += dt;
        if (this.sumdt >= 1) {
          this.currTime += 1e3;
          this.sumdt -= 1;
        }
        if (this._isSuperSchedule) {
          this.superDt = (this.superDt ? this.superDt : 0) + dt;
          if (this.superDt >= this._superValue.range) {
            this.superDt -= this._superValue.range;
            this.initGongGao(this._superValue.content, this.superColor);
            this._isSuperSchedule = false;
            this._isNormalPlaying = false;
            this._isNormalSchedule = false;
            this._isSuperPlaying = true;
          }
        }
        if (this._isSuperPlaying) {
          this.content.x -= 2;
          if (this.content.x + this.content.width <= this.minx) {
            this._isNormalPlaying = true;
            this.initGongGao(this.announceInfo[this.currPlayIdx].content, this.normalColor);
            this._isSuperPlaying = false;
            this._isSuperSchedule = true;
          }
        }
        if (this._isNormalSchedule) {
          this.normalDt = (this.normalDt ? this.normalDt : 0) + dt;
          if (this.normalDt >= this.announceInfo[this.currPlayIdx].range) {
            this.normalDt -= this.announceInfo[this.currPlayIdx].range;
            this.initGongGao(this.announceInfo[this.currPlayIdx].content, this.normalColor);
            this._isNormalSchedule = false;
            this._isNormalPlaying = true;
          }
        }
        if (this._isNormalPlaying) {
          this.content.x -= 2;
          if (this.content.x + this.content.width <= this.minx) {
            this.currPlayIdx = this.currPlayIdx < this.announceInfo.length - 1 ? this.currPlayIdx + 1 : 0;
            this._isNormalSchedule = true;
            this._isNormalPlaying = false;
          }
        }
      },
      onDestroy: function onDestroy() {
        fun.event.remove("HallGangGao");
      },
      sortAnnounceInfo: function sortAnnounceInfo() {
        this.announceInfo.sort(function(a, b) {
          return a.nextShowTime - b.nextShowTime;
        });
      },
      onAnnounceInfoEvent: function onAnnounceInfoEvent(data) {
        this._isNormalPlaying = false;
        this._isNormalSchedule = false;
        this._isSuperPlaying = false;
        this._isSuperSchedule = false;
        var superValue = void 0;
        data.forEach(function(value, key) {
          11 === value.type ? data[key].nextShowTime = this.currTime + 1e3 * value.range : superValue = value;
        }, this);
        this.announceInfo = data;
        this.sortAnnounceInfo();
        this.currPlayIdx = 0;
        if (superValue) {
          this.currPlayIdx = 1;
          this._superValue = superValue;
          this.initGongGao(superValue.content, this.superColor);
          this._isSuperPlaying = true;
        } else {
          this.initGongGao(this.announceInfo[this.currPlayIdx].content, this.normalColor);
          this._isNormalPlaying = true;
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  hallMoreGame: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a2429H8BIRKbKEWORRuoHyx", "hallMoreGame");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {
        var bg = this.node.getChildByName("back");
        bg.getChildByName("btnClose").on("click", this.onBtnCloseClick, this);
        this.animation = this.node.getComponent(cc.Animation);
        this.clips = this.animation.getClips();
      },
      onEnable: function onEnable() {
        this.animation.play(this.clips[0].name);
      },
      onBtnCloseClick: function onBtnCloseClick() {
        require("Audio").playEffect("hall", "button_close.mp3");
        this.animation.play(this.clips[1].name).once("finished", function() {
          this.node.destroy();
        }, this);
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio"
  } ],
  hallRenzheng: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8e5a6xVkFhBc7i8H6sAPw6Y", "hallRenzheng");
    "use strict";
    var Audio = require("Audio");
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {
        var bg = this.node.getChildByName("back");
        this.nameLayer = bg.getChildByName("name");
        this.nameLayer.active = false;
        this.nameLayer.getChildByName("btnPhone").on("click", this.onBtnPhoneClick, this);
        this.phoneLayer = bg.getChildByName("phone");
        this.phoneLayer.active = true;
        this.phoneLayer.getChildByName("btnName").on("click", this.onBtnNameClick, this);
        this.btnObtain = this.phoneLayer.getChildByName("btnObtain");
        this.btnObtain.on("click", this.onBtnObtainClick, this);
        this.phoneBox = this.phoneLayer.getChildByName("inputBoxPhone").getComponent(cc.EditBox);
        this.codeBox = this.phoneLayer.getChildByName("inputBoxCode").getComponent(cc.EditBox);
        bg.getChildByName("btnClose").on("click", this.onBtnCloseClick, this);
        this.animation = this.node.getComponent(cc.Animation);
        this.clips = this.animation.getClips();
      },
      onDestroy: function onDestroy() {
        this.unscheduleAllCallbacks();
      },
      onEnable: function onEnable() {
        this.animation.play(this.clips[0].name);
      },
      onBtnNameClick: function onBtnNameClick() {
        Audio.playEffect("hall", "button_nomal.mp3");
        this.nameLayer.active = true;
        this.phoneLayer.active = false;
      },
      onBtnPhoneClick: function onBtnPhoneClick() {
        Audio.playEffect("hall", "button_nomal.mp3");
        this.nameLayer.active = false;
        this.phoneLayer.active = true;
      },
      onBtnObtainClick: function onBtnObtainClick() {
        Audio.playEffect("hall", "button_nomal.mp3");
        if (11 !== this.phoneBox.length) return;
        this.btnObtain.interactable = false;
        this.scheduleOnce(this._BtnObtainCb.bind(this), 6e4);
      },
      _BtnObtainCb: function _BtnObtainCb() {
        this.btnObtain.interactable = true;
      },
      onBtnCloseClick: function onBtnCloseClick() {
        Audio.playEffect("hall", "button_close.mp3");
        this.animation.play(this.clips[1].name).once("finished", function() {
          this.node.destroy();
        }, this);
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio"
  } ],
  hallShare: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "860a3+dHu5BtYpvy7w8LVFg", "hallShare");
    "use strict";
    var Audio = require("Audio");
    var HuoDongResult = cc.Enum({
      FAILED: 0,
      SUCCESS: 1,
      EXPIRED: 2,
      WAITING: 3,
      MISS: 4,
      SUCCESSED: 5
    });
    var TransformGameType = [ 3, 1, 5 ];
    var ExchangeResult = cc.Enum({
      FAIL: 0,
      SUCCESS: 1,
      NOWAY: 2,
      LACKOFF: 3
    });
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {
        var bg = this.node.getChildByName("back");
        for (var i = 0; i < 3; ++i) this["btnGame" + (i + 1)] = bg.getChildByName("btnGame" + (i + 1));
        bg.getChildByName("btnShare").on("click", this.onBtnShareClick, this);
        bg.getChildByName("btnClose").on("click", this.onBtnCloseClick, this);
        for (var _i = 0; _i < 3; ++_i) bg.getChildByName("btnGame" + (_i + 1)).on("click", this.onBtnExchangeClick.bind(this, TransformGameType[_i]));
        this.checkRoomCard();
        this.animation = this.node.getComponent(cc.Animation);
        this.clips = this.animation.getClips();
        this._leftTicket = bg.getChildByName("leftTicket").getComponent(cc.Label);
        fun.event.add("ShareWeChatShareResult", "PhoneWeChatShareResult", function(result) {
          result && fun.csv.getHuoDong("day_share", function(huodong) {
            fun.net.pSend("HuoDong", {
              Type: parseInt(huodong.INT_Type)
            }, function(data) {
              if (data.result === HuoDongResult.SUCCESS) {
                fun.event.dispatch("MinSingleButtonPop", {
                  contentStr: "获得房卡兑换券 " + data.Delta + " 张"
                });
                this._leftTicket.string = parseInt(this._leftTicket.string) + data.Delta;
              } else data.result === HuoDongResult.SUCCESSED ? fun.event.dispatch("MinSingleButtonPop", {
                contentStr: "今日已完成分享获得房卡兑换券活动！"
              }) : fun.event.dispatch("MinSingleButtonPop", {
                contentStr: "获取房卡兑换券失败！"
              });
            }.bind(this));
          }.bind(this));
        }.bind(this));
      },
      onDestroy: function onDestroy() {
        fun.event.remove("ShareWeChatShareResult");
      },
      checkRoomCard: function checkRoomCard() {
        fun.net.pSend("RoomCard", {
          GameType: gameConst.gameType.maJiangHuangYan
        }, function(data) {
          void 0 !== data.TollCardCnt && (this.btnGame1.getChildByName("num").getComponent(cc.Label).string = data.TollCardCnt);
          fun.net.pSend("RoomCard", {
            GameType: gameConst.gameType.maJiangWenLing
          }, function(data) {
            void 0 !== data.TollCardCnt && (this.btnGame2.getChildByName("num").getComponent(cc.Label).string = data.TollCardCnt);
          }.bind(this));
        }.bind(this));
        this.btnGame3.getChildByName("num").getComponent(cc.Label).string = 0;
      },
      setLeftTicket: function setLeftTicket(num) {
        this._leftTicket.string = num;
      },
      onBtnShareClick: function onBtnShareClick() {
        Audio.playEffect("hall", "button_nomal.mp3");
        require("JSPhoneWeChat").WxShareCircle();
      },
      onBtnExchangeClick: function onBtnExchangeClick(gameType) {
        if (5 === gameType) {
          fun.event.dispatch("MinSingleButtonPop", {
            contentStr: "暂未开放兑换功能, 敬请期待！"
          });
          return;
        }
        if (parseInt(this._leftTicket.string) <= 0) {
          fun.event.dispatch("MinSingleButtonPop", {
            contentStr: "房卡兑换券不足，请分享朋友圈获得房卡兑换券！"
          });
          return;
        }
        var gameTypeCN = gameConst.gameTypeZhNameMap[gameType];
        var content = "您是否要将所有的房卡兑换券兑换成 " + gameTypeCN + " 的房卡？";
        var okCb = function() {
          fun.net.pSend("ExchgGood", {
            Type: gameConst.itemCsv.voucher,
            GameType: gameType
          }, function(data) {
            if (data.result === ExchangeResult.SUCCESS) {
              var nowCnt = parseInt(this._leftTicket.string) - data.itemCnt;
              this._leftTicket.string = nowCnt < 0 ? 0 : nowCnt;
              var contentSuc = "使用了 " + data.itemCnt + " 房卡兑换券兑换了 " + data.cardsCnt + " 张 " + gameTypeCN + " 房卡";
              fun.event.dispatch("MinSingleButtonPop", {
                contentStr: contentSuc
              });
              for (var i = 0; i < TransformGameType.length; ++i) if (TransformGameType[i] === gameType) {
                var initNum = this["btnGame" + (i + 1)].getChildByName("num").getComponent(cc.Label).string;
                this["btnGame" + (i + 1)].getChildByName("num").getComponent(cc.Label).string = initNum + data.cardsCnt;
              }
            } else fun.event.dispatch("MinSingleButtonPop", {
              contentStr: "兑换房卡失败！"
            });
          }.bind(this));
        }.bind(this);
        fun.event.dispatch("MinSingleButtonPop", {
          contentStr: content,
          okCb: okCb
        });
      },
      onEnable: function onEnable() {
        this.animation.play(this.clips[0].name);
      },
      onBtnCloseClick: function onBtnCloseClick() {
        Audio.playEffect("hall", "button_close.mp3");
        this.animation.play(this.clips[1].name).once("finished", function() {
          this.node.destroy();
        }, this);
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio",
    JSPhoneWeChat: "JSPhoneWeChat"
  } ],
  hallSpineBtn: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "901c6WQHSRIZYrvloF8eqYJ", "hallSpineBtn");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        min: {
          default: 2
        },
        max: {
          default: 5
        }
      },
      onLoad: function onLoad() {
        this.allReady = true;
        this.nextTime = fun.utils.random(this.min, this.max);
        this.node.children.forEach(function(v) {
          v.ready = true;
          var anim = v.getComponent(sp.Skeleton);
          if (anim) {
            anim.timeScale = 0;
            anim.setCompleteListener(function() {
              v.ready = true;
              anim.timeScale = 0;
            });
          }
        });
      },
      update: function update(dt) {
        if (this.allReady) {
          this.nextTime -= dt;
          if (this.nextTime > 0) return;
          this.node.children.forEach(function(v) {
            v.ready = false;
            var anim = v.getComponent(sp.Skeleton);
            anim && (anim.timeScale = 1);
          });
          this.allReady = false;
          this.nextTime = fun.utils.random(this.min, this.max);
        } else {
          var readySum = 0;
          this.node.children.forEach(function(v) {
            v.ready && readySum++;
          });
          this.node.childrenCount === readySum && (this.allReady = true);
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  hall: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "357961SyvBPZLzJ3S+H+jyJ", "hall");
    "use strict";
    var GameCfg = require("GameCfg");
    var Audio = require("Audio");
    cc.Class({
      extends: cc.Component,
      properties: {
        createMajiangRoomHY: {
          type: cc.Prefab,
          default: null
        },
        createMajiangRoomWL: {
          type: cc.Prefab,
          default: null
        },
        createSanGongRoomPre: {
          type: cc.Prefab,
          default: null
        },
        createNiuNiuRoomPre: {
          type: cc.Prefab,
          default: null
        },
        createRoomWahua: {
          type: cc.Prefab,
          default: null
        },
        createRoomDDZ: {
          type: cc.Prefab,
          default: null
        },
        createRoomXuezhan: {
          type: cc.Prefab,
          default: null
        },
        zhanjiLayerPre: {
          type: cc.Prefab,
          default: null
        },
        activityPre: {
          type: cc.Prefab,
          default: null
        },
        hallSharePre: {
          type: cc.Prefab,
          default: null
        },
        moreGamePre: {
          type: cc.Prefab,
          default: null
        },
        newsLayerPre: {
          type: cc.Prefab,
          default: null
        },
        renzhengPre: {
          type: cc.Prefab,
          default: null
        },
        setPanelPre: {
          type: cc.Prefab,
          default: null
        },
        storePre: {
          type: cc.Prefab,
          default: null
        }
      },
      onLoad: function onLoad() {
        this._isTestnet = fun.gameCfg.loginUrl === gameConst.loginUrl[gameConst.loginUrlType.test];
        this._isIntranet = fun.gameCfg.loginUrl === gameConst.loginUrl[gameConst.loginUrlType.intranet];
        cc.YL._isTestServer = this._isTestnet || this._isIntranet;
        this._isRelease = fun.gameCfg.releaseType === gameConst.releaseType.release;
        this._isApple = fun.gameCfg.releaseType === gameConst.releaseType.apple;
        this._isFisher = fun.gameCfg.releaseType === gameConst.releaseType.fisher;
        cc.sys.isNative && require("JSPhoneBaiDu").getBaiDuLocation();
        this.enterRoomHandle = [];
        this.addEnterRoomHandle(gameConst.gameType.universal, this.platformEnterRoomHandle.bind(this));
        this.addEnterRoomHandle(gameConst.gameType.maJiangHuangYan, this.mahjongEnterRoomHandle.bind(this));
        this.addEnterRoomHandle(gameConst.gameType.maJiangWenLing, this.mahjongEnterRoomHandle.bind(this));
        this.addEnterRoomHandle(gameConst.gameType.digFlower, this.digFlowerEnterRoomHandle.bind(this));
        this.addEnterRoomHandle(gameConst.gameType.DDZ, this.DDZEnterRoomHandle.bind(this));
        this.addEnterRoomHandle(gameConst.gameType.scMahjong, this.mahjongEnterRoomHandle.bind(this));
        fun.net.setGameMsgCfg({});
        fun.gameCfg.voiceLanguage = cc.sys.localStorage.getItem("voiceLanguage") || fun.gameCfg.voiceLanguage;
        var valumeData = cc.sys.localStorage.getItem("valumeData");
        if (valumeData) {
          valumeData = JSON.parse(valumeData);
          var s = valumeData.sound, m = valumeData.music;
          fun.gameCfg.soundValume = s && s > 0 ? s : 0 === s ? 0 : .8;
          fun.gameCfg.musicValume = m && m > 0 ? m : 0 === m ? 0 : .8;
        }
        this._mainBasic = this.node.getChildByName("mainBasic");
        this.upNode = this._mainBasic.getChildByName("up");
        this.renzhengBtn = this.upNode.getChildByName("renzhengBtn");
        this.renzhengBtn.on("click", this.onRenzhengBtnClick, this);
        this.head = this.upNode.getChildByName("head");
        this.head.on("click", this.onHeadClick, this);
        var userInfo = fun.db.getData("UserInfo");
        this.showUserInfo(userInfo);
        if (userInfo.RoomId && 0 != userInfo.RoomId) this.enterRoom(userInfo.RoomId); else {
          var initNode = this.node;
          setTimeout(function() {
            if (!fun.db.getNeedNotice()) {
              var notice = initNode.getChildByName("notice");
              notice.getComponent(cc.Animation).play("popScaleAnim");
              notice.active = true;
              fun.db.setNeedNotice(true);
              notice.getChildByName("back").getChildByName("box").getChildByName("btnClose").on("click", function() {
                var animState = notice.getComponent(cc.Animation).play("popScaleOut");
                animState.once("finished", function() {
                  notice.active = false;
                });
              });
            }
          }, 500);
        }
        this.leftNode = this._mainBasic.getChildByName("left");
        this.leftNode.getChildByName("btnJoin").on("click", this.onBtnJoinClick, this);
        this.gameBtns = [];
        this.rightNode = this._mainBasic.getChildByName("right");
        for (var i = 0; i < 4; i++) {
          this.gameBtns[i] = this.rightNode.getChildByName("btnGame" + (i + 1));
          this.gameBtns[i].active = true;
          this.gameBtns[i].on("click", this.onBtnGameClick.bind(this, i));
        }
        this.gameBtns.push(this.rightNode.getChildByName("btnGameMore"));
        this.gameBtns[this.gameBtns.length - 1].on("click", this.onBtnGameClick.bind(this, this.gameBtns.length - 1));
        this.appleReview();
        this.buttomNode = this._mainBasic.getChildByName("buttom");
        this.buttomNode.getChildByName("recordBtn").on("click", this.onRecordBtnClick, this);
        this.buttomNode.getChildByName("shareBtn").on("click", this.onShareBtnClick, this);
        this.buttomNode.getChildByName("setBtn").on("click", this.onSetBtnClick, this);
        this.buttomNode.getChildByName("activeBtn").on("click", this.onActiveBtnClick, this);
        var newsBtn = this.buttomNode.getChildByName("newsBtn");
        newsBtn.on("click", this.onNewsBtnClick, this);
        this.redPoint = newsBtn.getChildByName("redPoint");
        this.onNewMailIdIn(fun.db.getData("NewMailId"));
        Audio.playMusic("hall", "BGM-mainUI.mp3");
        this.node.getChildByName("mainBasic").getChildByName("version").getComponent(cc.Label).string = gameConst.version;
        fun.event.add("HallUserInfo", "UserInfo", this.showUserInfo.bind(this));
        fun.event.add("HallReplayInfo", "ReplayInfo", this.onReplayInfoIn.bind(this));
        fun.event.add("HallEnterRoomId", "EnterRoomId", this.enterRoom.bind(this));
        fun.event.add("HallNewMailId", "NewMailId", this.onNewMailIdIn.bind(this));
        var applePayStr = JSON.parse(cc.sys.localStorage.getItem("applePayReceiptStr"));
        this.onPhonePayResultAck(applePayStr);
      },
      appleReview: function appleReview() {
        if (this._isApple) {
          var buttom = this.node.getChildByName("mainBasic").getChildByName("buttom");
          buttom.getChildByName("recordBtn").setPositionX(-420);
          buttom.getChildByName("activeBtn").setPositionX(-140);
          buttom.getChildByName("newsBtn").setPositionX(140);
          buttom.getChildByName("setBtn").setPositionX(420);
          buttom.getChildByName("shareBtn").active = false;
          this.upNode.getChildByName("storeBtn").active = true;
          this._mainBasic.getChildByName("Songka").active = false;
          this.gameBtns[0].setPositionY(100);
          this.gameBtns[1].setPositionY(100);
          this.gameBtns[2].active = false;
          this.gameBtns[3].active = false;
          var notice = this.leftNode.getChildByName("Notice");
          notice.setPositionY(notice.getPositionY() - 70);
          var btnJoin = this.leftNode.getChildByName("btnJoin");
          btnJoin.setPosition(cc.p(230, btnJoin.getPositionY() + 50));
        }
      },
      onPhonePayResultAck: function onPhonePayResultAck(msg) {
        msg && msg.check && fun.net.pSend("ApPay", {
          ReceiptStr: msg.receipt
        }, function(data) {
          data.RetCode && 0 !== data.RetCode ? setTimeout(function() {
            this.onPhonePayResultAck(msg);
          }.bind(this), 5e3) : data.Status && 1 === data.Status ? cc.sys.localStorage.setItem("applePayReceiptStr", JSON.stringify({
            check: false
          })) : setTimeout(function() {
            this.onPhonePayResultAck(msg);
          }.bind(this), 5e3);
        }.bind(this));
      },
      addEnterRoomHandle: function addEnterRoomHandle(gameType, handler) {
        this.enterRoomHandle[gameType] = handler;
      },
      enterRoom: function enterRoom() {
        var roomId = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
        fun.event.dispatch("Zhuanquan", {
          flag: true,
          text: "加入房间中，请稍后..."
        });
        fun.net.pSend("EnterRoom", {
          RoomId: roomId,
          Address: fun.db.getData("UserInfo").location
        }, function(rsp) {
          if (rsp.GameType && this.enterRoomHandle[rsp.GameType]) this.enterRoomHandle[rsp.GameType](rsp); else {
            fun.event.dispatch("MinSingleButtonPop", {
              contentStr: gameConst.pRetCode[rsp.RetCode]
            });
            fun.event.dispatch("Zhuanquan", {
              flag: false
            });
          }
        }.bind(this));
      },
      platformEnterRoomHandle: function platformEnterRoomHandle(data) {
        fun.event.dispatch("Zhuanquan", {
          flag: false
        });
        switch (data.RetCode) {
         case 1:
          fun.event.dispatch("MinSingleButtonPop", {
            contentStr: "服务器忙"
          });
          break;

         case 13:
          fun.event.dispatch("MinSingleButtonPop", {
            contentStr: "房间未找到"
          });
        }
      },
      digFlowerEnterRoomHandle: function digFlowerEnterRoomHandle(data) {
        if (data.returnStatu && 1 === data.returnStatu) {
          fun.db.setData("RoomInfo", data);
          cc.director.loadScene(gameConst.gameTypeSceneNameMap[data.GameType]);
        } else fun.event.dispatch("Zhuanquan", {
          flag: false
        });
      },
      DDZEnterRoomHandle: function DDZEnterRoomHandle(data) {
        data.retMsg.code < 0 ? cc.YL.err(data.retMsg.code) : cc.director.loadScene("DDZ_GameScene");
      },
      mahjongEnterRoomHandle: function mahjongEnterRoomHandle(data) {
        var codeCfg = {};
        var mjGameDefine = require("mjGameDefine");
        data.GameType == gameConst.gameType.maJiangHuangYan ? codeCfg = mjGameDefine.HYRETCODE : data.GameType == gameConst.gameType.maJiangWenLing ? codeCfg = mjGameDefine.WLRETCODE : data.GameType == gameConst.gameType.scMahjong && (codeCfg = mjGameDefine.SCRETCODE);
        if (data.RetCode) {
          var self = this;
          if (19 == data.RetCode) {
            var gotoStore = function gotoStore() {
              self.showStore(data.GameType);
            };
            fun.event.dispatch("MinSingleButtonPop", {
              contentStr: codeCfg[data.RetCode],
              okBtnStr: "前往充值",
              okCb: gotoStore
            });
          } else fun.event.dispatch("MinSingleButtonPop", {
            contentStr: codeCfg[data.RetCode]
          });
          fun.event.dispatch("Zhuanquan", {
            flag: false
          });
        } else {
          data.EnterRoom = "enter";
          fun.db.setData("RoomInfo", data);
          cc.director.loadScene(gameConst.gameTypeSceneNameMap[data.GameType]);
        }
      },
      showStore: function showStore(gameType) {
        var isApple = fun.gameCfg.releaseType === gameConst.releaseType.apple;
        var isIntranet = fun.gameCfg.loginUrl === gameConst.loginUrl[gameConst.loginUrlType.intranet];
        if (isApple || isIntranet) {
          var store = cc.instantiate(this.storePre);
          store.parent = this.node;
          store.getComponent("store").setGameType(gameType);
        } else fun.event.dispatch("MinSingleButtonPop", {
          contentStr: "公测期间，免费畅玩！"
        });
      },
      onRenzhengBtnClick: function onRenzhengBtnClick() {
        Audio.playEffect("hall", "button_nomal.mp3");
        this._isApple && fun.event.dispatch("MinSingleButtonPop", {
          contentStr: "敬请期待！"
        });
        return;
        var renzheng;
      },
      onHeadClick: function onHeadClick() {},
      showUserInfo: function showUserInfo(data) {
        this.head.getChildByName("nickname").getComponent(cc.Label).string = data.UserName;
        this.head.getChildByName("userid").getComponent(cc.Label).string = data.UserId;
        fun.utils.loadUrlRes(data.UserHeadUrl, this.head.getChildByName("border"));
      },
      onReplayInfoIn: function onReplayInfoIn(data) {
        data.record = JSON.parse(fun.base64.decode(data.record));
        switch (data.gameType) {
         case gameConst.gameType.maJiangWenLing:
          require("mjReplayMgr").setReplayData(gameConst.gameType.maJiangWenLing, data);
          break;

         case gameConst.gameType.maJiangHuangYan:
          require("mjReplayMgr").setReplayData(gameConst.gameType.maJiangHuangYan, data);
          break;

         case gameConst.gameType.DDZ:
          cc.YL.DDZReplayData = data.record;
          cc.director.loadScene("DDZ_ReplayScene");
        }
      },
      onNewMailIdIn: function onNewMailIdIn(mId) {
        this.redPoint.active = mId > 0;
      },
      onBtnGameClick: function onBtnGameClick(index) {
        Audio.playEffect("hall", "button_nomal.mp3");
        switch (index) {
         case 0:
          fun.net.pSend("RoomCard", {
            GameType: gameConst.gameType.maJiangHuangYan
          }, function(data) {
            if (data.RetCode && 0 !== data.RetCode) return;
            var hyNode = cc.instantiate(this.createMajiangRoomHY);
            hyNode.parent = this.node;
            hyNode.getComponent("createMajiangRoom").showRoomCard(data, gameConst.gameType.maJiangHuangYan);
          }.bind(this));
          break;

         case 1:
          fun.net.pSend("RoomCard", {
            GameType: gameConst.gameType.maJiangWenLing
          }, function(data) {
            if (data.RetCode && 0 !== data.RetCode) return;
            var wlNode = cc.instantiate(this.createMajiangRoomWL);
            wlNode.parent = this.node;
            wlNode.getComponent("createMajiangRoom").showRoomCard(data, gameConst.gameType.maJiangWenLing);
          }.bind(this));
          break;

         case 2:
          fun.net.pSend("RoomCard", {
            GameType: gameConst.gameType.DDZ
          }, function(data) {
            if (data.RetCode && 0 !== data.RetCode) return;
            var DDZNode = cc.instantiate(this.createRoomDDZ);
            DDZNode.parent = this.node;
            DDZNode.getComponent("createDDZRoom").showRoomCard(data, gameConst.gameType.DDZ);
          }.bind(this));
          break;

         case 3:
          fun.event.dispatch("MinSingleButtonPop", {
            contentStr: "敬请期待！"
          });
          return;
        }
      },
      onBtnGameMoreClick: function onBtnGameMoreClick() {
        Audio.playEffect("hall", "button_nomal.mp3");
        fun.event.dispatch("MinSingleButtonPop", {
          contentStr: "敬请期待！"
        });
        return;
        var gameMore;
      },
      onRecordBtnClick: function onRecordBtnClick() {
        Audio.playEffect("hall", "button_nomal.mp3");
        var gameType = gameConst.gameType.maJiangHuangYan;
        fun.net.pSend("StandingBrief", {
          GameType: gameType,
          Start: 0
        }, function(data) {
          var zhanjiLayer = cc.instantiate(this.zhanjiLayerPre);
          zhanjiLayer.parent = this.node;
          zhanjiLayer.getComponent("zhanjiLayer").init(gameType, data);
        }.bind(this));
      },
      onShareBtnClick: function onShareBtnClick() {
        Audio.playEffect("hall", "button_nomal.mp3");
        fun.net.pSend("GoodCnt", {
          Type: gameConst.itemCsv.voucher
        }, function(data) {
          if (data.RetCode && 0 !== data.RetCode) {
            fun.event.dispatch("MinSingleButtonPop", {
              contentStr: "查询兑换券失败!"
            });
            return;
          }
          var hallShare = cc.instantiate(this.hallSharePre);
          hallShare.parent = this.node;
          hallShare.getComponent("hallShare").setLeftTicket(data.Cnt);
        }.bind(this));
      },
      onNewsBtnClick: function onNewsBtnClick() {
        Audio.playEffect("hall", "button_nomal.mp3");
        if (this._isApple || this._isRelease) {
          var news = cc.instantiate(this.newsLayerPre);
          news.parent = this.node;
        } else fun.net.pSend("MailList", {
          Page: 0,
          Count: 10
        }, function(rsp) {
          fun.db.setData("NewMailId", false);
          var news = cc.instantiate(this.newsLayerPre);
          news.parent = this.node;
          news.getComponent("mailLayer").init(10, rsp.mInfos);
        }.bind(this));
      },
      onSetBtnClick: function onSetBtnClick() {
        Audio.playEffect("hall", "button_nomal.mp3");
        var setPanel = cc.instantiate(this.setPanelPre);
        setPanel.parent = this.node;
      },
      onActiveBtnClick: function onActiveBtnClick() {
        Audio.playEffect("hall", "button_nomal.mp3");
        var activity = cc.instantiate(this.activityPre);
        activity.parent = this.node;
      },
      onBtnJoinClick: function onBtnJoinClick() {
        Audio.playEffect("hall", "button_nomal.mp3");
        var enter = this.node.getChildByName("enterRoom");
        enter.active = true;
        enter.x = 0;
        enter.y = 0;
      },
      onStoreBtnClick: function onStoreBtnClick() {
        Audio.playEffect("hall", "button_nomal.mp3");
        var store = cc.instantiate(this.storePre);
        store.parent = this.node;
      },
      onDestroy: function onDestroy() {
        fun.event.remove("HallUserInfo");
        fun.event.remove("HallReplayInfo");
        fun.event.remove("HallEnterRoomId");
        fun.event.remove("HallNewMailId");
        Audio.stopMusic();
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio",
    GameCfg: "GameCfg",
    JSPhoneBaiDu: "JSPhoneBaiDu",
    mjGameDefine: "mjGameDefine",
    mjReplayMgr: "mjReplayMgr"
  } ],
  hotUpdate: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c424aYwfbtDuqqMAFrvKD9U", "hotUpdate");
    "use strict";
    var GameConst = require("GameCfg");
    var NeedForce = false;
    cc.Class({
      extends: cc.Component,
      properties: {
        manifestUrl: {
          url: cc.RawAsset,
          default: null
        },
        gameName: {
          type: GameConst.gameName,
          default: GameConst.gameName.hall
        },
        loseFileStr: {
          default: "本地文件丢失，请卸载后重新安装！"
        },
        loseRemoteFileStr: {
          default: "下载版本文件出错，请稍后再试！"
        },
        foundNewStr: {
          default: "发现新版本，请更新！"
        },
        updateErrStr: {
          default: "更新出错，请重试！"
        },
        updatePanelPrefab: {
          default: null,
          type: cc.Prefab
        }
      },
      onLoad: function onLoad() {
        if (cc.sys.isBrowser) return;
        if (!fun.gameCfg.enableUpdate) return;
        var updatedGame = fun.db.getData("UpdatedGame");
        if (updatedGame && updatedGame[this.gameName]) return;
        var storagePath = cc.path.join(jsb.fileUtils.getWritablePath(), "hotUpdate");
        this.atManager = new jsb.AssetsManager(this.manifestUrl, storagePath, this.versionCompare);
        this.atManager.retain();
        this.atManager.getState() === jsb.AssetsManager.State.UNCHECKED && this.atManager.loadLocalManifest(this.manifestUrl);
        if (!this.atManager.getLocalManifest() || !this.atManager.getLocalManifest().isLoaded()) {
          this.showError(this.loseFileStr);
          return;
        }
        this.checkListener = new jsb.EventListenerAssetsManager(this.atManager, this.checkUpdateCB.bind(this));
        cc.eventManager.addListener(this.checkListener, 1);
        this.atManager.checkUpdate();
        this.hasCheckListener = true;
      },
      versionCompare: function versionCompare(versionA, versionB) {
        var va = versionA.split("."), vb = versionB.split(".");
        NeedForce = vb[0] > va[0];
        for (var i = 0; i < va.length; ++i) {
          var a = parseInt(va[i]), b = parseInt(vb[i]);
          if (a !== b) return a - b;
        }
        return vb.length > va.length ? -1 : 0;
      },
      checkUpdateCB: function checkUpdateCB(event) {
        switch (event.getEventCode()) {
         case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:
          fun.log("hotUpdate", this.gameName + "checkUpdateCB ERROR_NO_LOCAL_MANIFEST");
          this.showError(this.loseFileStr);
          break;

         case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:
          fun.log("hotUpdate", this.gameName + "checkUpdateCB ERROR_DOWNLOAD_MANIFEST");
          this.showError(this.loseRemoteFileStr);
          break;

         case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:
          fun.log("hotUpdate", this.gameName + "checkUpdateCB ERROR_PARSE_MANIFEST");
          this.showError(this.loseRemoteFileStr);
          break;

         case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:
          this.completeUpdate();
          break;

         case jsb.EventAssetsManager.NEW_VERSION_FOUND:
          this.reqVersionDetail();
          break;

         default:
          return;
        }
        if (this.hasCheckListener) {
          cc.eventManager.removeListener(this.checkListener);
          this.hasCheckListener = false;
        }
      },
      completeUpdate: function completeUpdate() {
        var updatedGame = fun.db.getData("UpdatedGame");
        updatedGame[this.gameName] = this.gameName;
        fun.db.setData("UpdatedGame", updatedGame);
      },
      reqVersionDetail: function reqVersionDetail() {
        this.updatePanel = cc.instantiate(this.updatePanelPrefab);
        var verUrl = this.atManager.getLocalManifest().getPackageUrl() + "ver.txt";
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function() {
          if (4 === xhr.readyState) if (xhr.status >= 200 && xhr.status < 400) if (NeedForce) this.forceUpdate(); else {
            this.updatePanel.parent = this.node;
            this.updatePanel.getComponent("updatePanel").setVersionContent(xhr.responseText.split(":::"), this.startUpdate.bind(this));
          } else this.showGetUpdateContentError();
        }.bind(this);
        xhr.open("GET", verUrl, true);
        xhr.send();
      },
      forceUpdate: function forceUpdate() {
        var sdata = {
          contentStr: "您的客户端版本过低，请下载最新版本！",
          okBtnStr: "前往下载",
          okCb: function okCb() {
            cc.sys.os === cc.sys.OS_ANDROID ? cc.sys.openURL(gameConst.forceUpdateUrl.android) : cc.sys.os === cc.sys.OS_IOS && cc.sys.openURL(gameConst.forceUpdateUrl.ios);
          },
          closeCb: function closeCb() {
            fun.utils.endGame();
          }
        };
        fun.event.dispatch("MinDoubleButtonPop", sdata);
        jsb.fileUtils.removeDirectory(cc.path.join(jsb.fileUtils.getWritablePath(), "hotUpdate"));
      },
      startUpdate: function startUpdate() {
        this.hasUpdateListener = true;
        this.updateListener = new jsb.EventListenerAssetsManager(this.atManager, this.updatingCB.bind(this));
        cc.eventManager.addListener(this.updateListener, 1);
        this.atManager.getState() === jsb.AssetsManager.State.UNINITED && this.atManager.loadLocalManifest(this.manifestUrl);
        this.atManager.update();
      },
      updatingCB: function updatingCB(event) {
        var needRestart = false;
        switch (event.getEventCode()) {
         case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:
          fun.log("hotUpdate", this.gameName + "updatingCB ERROR_NO_LOCAL_MANIFEST");
          this.showError(this.loseFileStr);
          break;

         case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:
          fun.log("hotUpdate", this.gameName + "updatingCB ERROR_DOWNLOAD_MANIFEST");
          this.showError(this.loseRemoteFileStr);
          break;

         case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:
          fun.log("hotUpdate", this.gameName + "updatingCB ERROR_PARSE_MANIFEST");
          this.showError(this.loseRemoteFileStr);
          break;

         case jsb.EventAssetsManager.UPDATE_FAILED:
          fun.log("hotUpdate", this.gameName + "updatingCB UPDATE_FAILED");
          this.showError(this.updateErrStr);
          break;

         case jsb.EventAssetsManager.ERROR_UPDATING:
          fun.log("hotUpdate", "Asset update error: " + event.getAssetId() + ", " + event.getMessage());
          break;

         case jsb.EventAssetsManager.UPDATE_PROGRESSION:
          if (!this._getTotalBytes && 0 !== event.getTotalBytes()) {
            console.log("--- event: ", event);
            console.log("--- event.str: ", JSON.stringify(event));
            console.log("--- getTotalBytes: ", event.getTotalBytes());
            console.log("--- getTotalFiles: ", event.getTotalFiles());
            console.log("--- getPercent: ", event.getPercent());
            console.log("--- getPercentByFile: ", event.getPercentByFile());
            console.log("--- getMessage: ", event.getMessage());
            this.updatePanel.getComponent("updatePanel").setSourceSize(event.getTotalBytes() / 1048576);
            this._getTotalBytes = true;
          }
          this.updatePanel.getComponent("updatePanel").updateProgress(event.getPercent());
          break;

         case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:
         case jsb.EventAssetsManager.UPDATE_FINISHED:
          needRestart = true;
        }
        if (needRestart) {
          if (this.hasUpdateListener) {
            cc.eventManager.removeListener(this.updateListener);
            this.hasUpdateListener = false;
          }
          var searchPaths = jsb.fileUtils.getSearchPaths();
          var newPaths = this.atManager.getLocalManifest().getSearchPaths();
          fun.log("hotUpdate", "success ", newPaths);
          Array.prototype.unshift(searchPaths, newPaths);
          searchPaths.unshift(cc.path.join(jsb.fileUtils.getWritablePath(), "hotUpdate"));
          cc.sys.localStorage.setItem("HotUpdateSearchPaths", JSON.stringify(searchPaths));
          jsb.fileUtils.setSearchPaths(searchPaths);
          fun.utils.restart();
        }
      },
      showError: function showError(str) {
        var data = {
          contentStr: str,
          okBtnStr: "重启",
          hideCloseBtn: true,
          okCb: function okCb() {
            fun.utils.restart();
          }
        };
        fun.event.dispatch("MinSingleButtonPop", data);
      },
      onDestroy: function onDestroy() {
        this.hasCheckListener && cc.eventManager.removeListener(this.checkListener);
        this.hasUpdateListener && cc.eventManager.removeListener(this.updateListener);
        this.atManager && this.atManager.release();
      }
    });
    cc._RF.pop();
  }, {
    GameCfg: "GameCfg"
  } ],
  hyMjCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c210dVJxRlJwITgxK8CxLP3", "hyMjCfg");
    "use strict";
    var hy_MessageCfg = {
      MoPaiMessageNum: {
        id: "MoPaiMessageNum",
        desc: "服务端->客户端　摸牌消息",
        req: 402,
        rsp: 0,
        notify: 402
      },
      MoPaiNoticeNum: {
        id: "MoPaiNoticeNum",
        desc: "服务端->客户端　摸牌通知，即告知其他玩家某个玩家摸了一张牌",
        req: 403,
        rsp: 0,
        notify: 403
      },
      ChuPaiReminderNum: {
        id: "ChuPaiReminderNum",
        desc: "服务端->客户端　出牌提示，告知客户端需要出牌",
        req: 404,
        rsp: 0,
        notify: 404
      },
      ChuPaiMessageNum: {
        id: "ChuPaiMessageNum",
        desc: "客户端->服务端　出牌消息",
        req: 405,
        rsp: 0,
        notify: 405
      },
      ChuPaiMessageAckNum: {
        id: "ChuPaiMessageAckNum",
        desc: "服务端->客户端　服务器接收到错误的出牌消息时回复",
        req: 406,
        rsp: 0,
        notify: 406
      },
      ChuPaiNoticeNum: {
        id: "ChuPaiNoticeNum",
        desc: "服务端->客户端　出牌通知，即告知其他玩家某个玩家出了一张牌",
        req: 407,
        rsp: 0,
        notify: 407
      },
      MoPaiZuHeReminderNum: {
        id: "MoPaiZuHeReminderNum",
        desc: "服务端->客户端　摸牌组合操作提示，服务端告知客户端能够进行哪些摸牌组合操作",
        req: 408,
        rsp: 0,
        notify: 408
      },
      MoPaiZuHeNoticeNum: {
        id: "MoPaiZuHeNoticeNum",
        desc: "服务端->客户端　摸牌组合操作通知，服务端告知其他客户端某个客户端进行了哪些摸牌组合操作",
        req: 409,
        rsp: 0,
        notify: 409
      },
      ChuPaiZuHeReminderNum: {
        id: "ChuPaiZuHeReminderNum",
        desc: "服务端->客户端  出牌组合操作提示，服务端告知客户端能够进行哪些出牌组合操作",
        req: 410,
        rsp: 0,
        notify: 410
      },
      ChuPaiZuHeNoticeNum: {
        id: "ChuPaiZuHeNoticeNum",
        desc: "服务端->客户端  出牌组合操作通知，服务端告知其他客户端某个客户端进行了哪些出牌组合操作",
        req: 411,
        rsp: 0,
        notify: 411
      },
      ChiPaiMessageNum: {
        id: "ChiPaiMessageNum",
        desc: "客户端->服务端　吃牌消息",
        req: 412,
        rsp: 0,
        notify: 412
      },
      PengPaiMessageNum: {
        id: "PengPaiMessageNum",
        desc: "客户端->服务端　碰牌消息",
        req: 413,
        rsp: 0,
        notify: 413
      },
      MingGang1PaiMessageNum: {
        id: "MingGang1PaiMessageNum",
        desc: "客户端->服务端　明杠1消息",
        req: 414,
        rsp: 0,
        notify: 414
      },
      MingGang2PaiMessageNum: {
        id: "MingGang2PaiMessageNum",
        desc: "客户端->服务端　明杠2消息",
        req: 415,
        rsp: 0,
        notify: 415
      },
      AnGangPaiMessageNum: {
        id: "AnGangPaiMessageNum",
        desc: "客户端->服务端　暗杠消息",
        req: 416,
        rsp: 0,
        notify: 416
      },
      PuTongHuPaiMessageNum: {
        id: "PuTongHuPaiMessageNum",
        desc: "客户端->服务端　普通胡消息",
        req: 417,
        rsp: 0,
        notify: 417
      },
      ZiMoHuPaiMessageNum: {
        id: "ZiMoHuPaiMessageNum",
        desc: "客户端->服务端　自摸胡消息",
        req: 418,
        rsp: 0,
        notify: 418
      },
      GuoMoPaiMessageNum: {
        id: "GuoMoPaiMessageNum",
        desc: "客户端->服务端　过消息（对于摸牌组合操作的响应）",
        req: 419,
        rsp: 0,
        notify: 419
      },
      GuoChuPaiMessageNum: {
        id: "GuoChuPaiMessageNum",
        desc: "客户端->服务端　过消息（对于出牌组合操作的响应）",
        req: 420,
        rsp: 0,
        notify: 420
      },
      RestoreListenReminderNum: {
        id: "RestoreListenReminderNum",
        desc: "服务端->客户端  在客户端点击了某种出牌组合操作（吃碰杠胡）之后，可能接收到两种响应（如吃牌成功ChiPaiAckMessageNum，如吃牌失败RestoreListenReminderNum）．这里吃牌失败是因为别的玩家具有更高优先级的操作",
        req: 421,
        rsp: 0,
        notify: 421
      },
      ChiPaiAckMessageNum: {
        id: "ChiPaiAckMessageNum",
        desc: "服务端→客户端 表示吃牌成功",
        req: 422,
        rsp: 0,
        notify: 422
      },
      PengPaiAckMessageNum: {
        id: "PengPaiAckMessageNum",
        desc: "服务端→客户端 表示碰牌成功",
        req: 423,
        rsp: 0,
        notify: 423
      },
      MingGang2PaiAckMessageNum: {
        id: "MingGang2PaiAckMessageNum",
        desc: "服务端→客户端 表示明杠牌成功",
        req: 424,
        rsp: 0,
        notify: 424
      },
      PuTongHuPaiAckMessageNum: {
        id: "PuTongHuPaiAckMessageNum",
        desc: "服务端→客户端 表示普通胡牌成功",
        req: 425,
        rsp: 0,
        notify: 425
      },
      MingGang1PaiAckMessageNum: {
        id: "MingGang1PaiAckMessageNum",
        desc: "服务端→客户端 表示明杠成功",
        req: 426,
        rsp: 0,
        notify: 426
      },
      AnGangPaiAckMessageNum: {
        id: "AnGangPaiAckMessageNum",
        desc: "服务端→客户端 表示暗杠成功",
        req: 427,
        rsp: 0,
        notify: 427
      },
      ZiMoHuPaiAckMessageNum: {
        id: "ZiMoHuPaiAckMessageNum",
        desc: "服务端→客户端 表示自摸胡牌成功",
        req: 428,
        rsp: 0,
        notify: 428
      },
      QiangGangReminderNum: {
        id: "QiangGangReminderNum",
        desc: "服务端->客户端　抢杠胡提示",
        req: 429,
        rsp: 0,
        notify: 429
      },
      QiangGangMessageNum: {
        id: "QiangGangMessageNum",
        desc: "客户端->服务端　抢杠胡消息",
        req: 430,
        rsp: 0,
        notify: 430
      },
      QiangGangNoticeNum: {
        id: "QiangGangNoticeNum",
        desc: "服务端->客户端　抢杠胡通知",
        req: 431,
        rsp: 0,
        notify: 431
      },
      GuoQiangGangMessageNum: {
        id: "GuoQiangGangMessageNum",
        desc: "客户端->服务端　过抢杠胡",
        req: 432,
        rsp: 0,
        notify: 432
      },
      QiangGangHuPaiAckMessageNum: {
        id: "QiangGangHuPaiAckMessageNum",
        desc: "服务端→客户端 表示抢杠胡牌成功",
        req: 433,
        rsp: 0,
        notify: 433
      },
      PrepareMessageNum: {
        id: "PrepareMessageNum",
        desc: "客户端->服务端　准备消息",
        req: 434,
        rsp: 0,
        notify: 434
      },
      PrepareAckMessageNum: {
        id: "PrepareAckMessageNum",
        desc: "服务端->客户端　准备消息回复",
        req: 435,
        rsp: 0,
        notify: 435
      },
      PrepareNoticeNum: {
        id: "PrepareNoticeNum",
        desc: "服务端->客户端　准备通知",
        req: 436,
        rsp: 0,
        notify: 436
      },
      VotingStartMessageNum: {
        id: "VotingStartMessageNum",
        desc: "客户端->服务端　发起投票",
        req: 437,
        rsp: 0,
        notify: 437
      },
      VotingReminderNum: {
        id: "VotingReminderNum",
        desc: "服务端->客户端　提示其他玩家有人发起投票",
        req: 438,
        rsp: 0,
        notify: 438
      },
      VotingMessageNum: {
        id: "VotingMessageNum",
        desc: "客户端->服务端　投票消息",
        req: 439,
        rsp: 0,
        notify: 439
      },
      VotingRstNoticeNum: {
        id: "VotingRstNoticeNum",
        desc: "服务端->客户端　投票结果通知",
        req: 440,
        rsp: 0,
        notify: 440
      },
      VotingPlayerRstNoticeNum: {
        id: "VotingPlayerRstNoticeNum",
        desc: "服务端->客户端　某个玩家投票结果通知",
        req: 441,
        rsp: 0,
        notify: 441
      },
      VotingInformationNum: {
        id: "VotingInformationNum",
        desc: "服务端->客户端　所有玩家投票结果通知，用于断线重连",
        req: 442,
        rsp: 0,
        notify: 442
      },
      DissolveRoomMessageNum: {
        id: "DissolveRoomMessageNum",
        desc: "客户端->服务端　解散房间消息",
        req: 443,
        rsp: 0,
        notify: 443
      },
      DissolveRoomAckMessageNum: {
        id: "DissolveRoomAckMessageNum",
        desc: "服务端->客户端　解散房间回复",
        req: 444,
        rsp: 0,
        notify: 444
      },
      DissolveRoomNoticeNum: {
        id: "DissolveRoomNoticeNum",
        desc: "服务端->客户端　解散房间通知",
        req: 445,
        rsp: 0,
        notify: 445
      },
      ExitRoomMessageNum: {
        id: "ExitRoomMessageNum",
        desc: "客户端->服务端　退出房间消息",
        req: 446,
        rsp: 0,
        notify: 446
      },
      ExitRoomAckMessageNum: {
        id: "ExitRoomAckMessageNum",
        desc: "服务端->客户端　退出房间回复",
        req: 447,
        rsp: 0,
        notify: 447
      },
      ExitRoomNoticeNum: {
        id: "ExitRoomNoticeNum",
        desc: "服务端->客户端　退出房间通知",
        req: 448,
        rsp: 0,
        notify: 448
      },
      UpdateRoomCardNum: {
        id: "UpdateRoomCardNum",
        desc: "服务端->客户端  房卡数量更新通知",
        req: 449,
        rsp: 0,
        notify: 449
      },
      FaPaiMessageNum: {
        id: "FaPaiMessageNum",
        desc: "服务端->客户端  牌局开始时的发牌消息",
        req: 450,
        rsp: 0,
        notify: 450
      },
      FaPaiAckMessageNum: {
        id: "FaPaiAckMessageNum",
        desc: "服务端->客户端  发牌消息回复",
        req: 451,
        rsp: 0,
        notify: 451
      },
      CaiShengPaiNoticeNum: {
        id: "CaiShengPaiNoticeNum",
        desc: "服务端->客户端  牌局开始时定财神通知",
        req: 452,
        rsp: 0,
        notify: 452
      },
      BenMenFengReminderNum: {
        id: "BenMenFengReminderNum",
        desc: "服务端->客户端  牌局开始时本门风通知",
        req: 453,
        rsp: 0,
        notify: 453
      },
      ShengPaiStageNoticeNum: {
        id: "ShengPaiStageNoticeNum",
        desc: "服务端->客户端  生牌阶段通知",
        req: 454,
        rsp: 0,
        notify: 454
      },
      ZhanJiNoticeNum: {
        id: "ZhanJiNoticeNum",
        desc: "服务端->客户端 一局结束时发送战绩",
        req: 455,
        rsp: 0,
        notify: 455
      },
      TotalZhanJiNoticeNum: {
        id: "TotalZhanJiNoticeNum",
        desc: "服务端->客户端 一盘结束时发送战绩",
        req: 456,
        rsp: 0,
        notify: 456
      },
      RingAddNum: {
        id: "RingAddNum",
        desc: "服务端->客户端 增加圈数",
        req: 457,
        rsp: 0,
        notify: 457
      },
      OffLineMessageNum: {
        id: "OffLineMessageNum",
        desc: "客户端->服务端　下线消息",
        req: 458,
        rsp: 0,
        notify: 458
      },
      OffLineAckMessageNum: {
        id: "OffLineAckMessageNum",
        desc: "服务端->客户端　下线消息回复",
        req: 459,
        rsp: 0,
        notify: 459
      },
      OffLineNoticeNum: {
        id: "OffLineNoticeNum",
        desc: "服务端->客户端　下线消息通知",
        req: 460,
        rsp: 0,
        notify: 460
      },
      ReconnectNoticeNum: {
        id: "ReconnectNoticeNum",
        desc: "服务端->客户端　通知其他玩家某个玩家重连成功",
        req: 461,
        rsp: 0,
        notify: 461
      },
      SyncTileInfoNum: {
        id: "SyncTileInfoNum",
        desc: "服务端->客户端　在客户端重连成功之后，告知客户端当前牌面信息",
        req: 462,
        rsp: 0,
        notify: 462
      },
      ReconnectNoticeFinishCountNum: {
        id: "ReconnectNoticeFinishCountNum",
        desc: "服务端->客户端　告知重连玩家当前进行了多少盘",
        req: 463,
        rsp: 0,
        notify: 463
      }
    };
    module.exports = hy_MessageCfg;
    cc._RF.pop();
  }, {} ],
  hymjNetMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f306ce7AWxHhaevyLWKwPi3", "hymjNetMgr");
    "use strict";
    var log = cc.log;
    var hymjNetMgr = function hymjNetMgr() {
      this.getNetCfg = function() {
        return require("hyMjCfg");
      };
      this.addGameNet = function(key, gameMgr) {
        this.reqPCB(key, "EnterRoom", function(data) {
          gameMgr.onUserEnterRoom(data.PlayerInformation, data.PlayerInformation.PlayerIdx);
        });
        this.reqCB(key, "OffLineNoticeNum", gameMgr.OffLineNotice.bind(gameMgr));
        this.reqCB(key, "ReconnectNoticeNum", gameMgr.OnLineNotice.bind(gameMgr));
        this.reqCB(key, "RingAddNum", gameMgr.onRingAddNum.bind(gameMgr));
        this.reqCB(key, "PrepareNoticeNum", gameMgr.prepareNoticeMessage.bind(gameMgr));
        this.reqCB(key, "ExitRoomNoticeNum", gameMgr.exitRoomNoticeIdx.bind(gameMgr));
        this.reqCB(key, "DissolveRoomNoticeNum", gameMgr.DissolveRoomNotice.bind(gameMgr));
        this.reqCB(key, "DissolveRoomAckMessageNum", gameMgr.exiteRoom.bind(gameMgr));
        this.reqCB(key, "ExitRoomAckMessageNum", gameMgr.exiteRoom.bind(gameMgr));
        this.reqCB(key, "PrepareAckMessageNum", function(data) {
          var mjDataMgr = require("mjDataMgr");
          gameMgr.prepareNoticeMessage({
            PlayerIdx: mjDataMgr.get(mjDataMgr.KEYS.SELFID)
          });
        });
        this.reqCB(key, "FaPaiMessageNum", function(data) {
          var mjDataMgr = require("mjDataMgr");
          mjDataMgr.get(mjDataMgr.KEYS.ROOMINFO).Round += 1;
          gameMgr.initGameCount();
          gameMgr.initStartPai(data);
        });
        this.reqCB(key, "CaiShengPaiNoticeNum", function(data) {
          gameMgr.caiShengPai([ data.Atile ]);
        });
        this.reqCB(key, "BenMenFengReminderNum", gameMgr.benmenFengNotice.bind(gameMgr));
        this.reqCB(key, "ShengPaiStageNoticeNum", function(data) {
          cc.log("'huangyan ShengPaiStageNoticeNum", data);
          gameMgr.onPaiTimeChange({
            Time: 1
          });
        });
        this.reqCB(key, "MoPaiNoticeNum", gameMgr.MoPaiNotice.bind(gameMgr));
        this.reqCB(key, "ChuPaiNoticeNum", gameMgr.ChuPaiNotice.bind(gameMgr));
        this.reqCB(key, "MoPaiMessageNum", gameMgr.MoPaiNotice.bind(gameMgr));
        this.reqCB(key, "ChuPaiZuHeReminderNum", gameMgr.ChuPaiZuHeReminder.bind(gameMgr));
        this.reqCB(key, "PengPaiAckMessageNum", gameMgr.PengPaiAckMessage.bind(gameMgr));
        this.reqCB(key, "MoPaiZuHeNoticeNum", gameMgr.ChuPaiZuHeNotice.bind(gameMgr));
        this.reqCB(key, "ChuPaiZuHeNoticeNum", gameMgr.ChuPaiZuHeNotice.bind(gameMgr));
        this.reqCB(key, "ChiPaiAckMessageNum", gameMgr.ChiPaiAckMessage.bind(gameMgr));
        this.reqCB(key, "ZhanJiNoticeNum", gameMgr.ZhanJiNoticeHy.bind(gameMgr));
        this.reqCB(key, "TotalZhanJiNoticeNum", gameMgr.TotalZhanJiHy.bind(gameMgr));
        this.reqCB(key, "MingGang2PaiAckMessageNum", gameMgr.MingGang2PaiAckMessage.bind(gameMgr));
        this.reqCB(key, "QiangGangReminderNum", gameMgr.QiangGangReminder.bind(gameMgr));
        this.reqCB(key, "QiangGangNoticeNum", gameMgr.QiangGangNotice.bind(gameMgr));
        this.reqCB(key, "QiangGangHuPaiAckMessageNum", gameMgr.ZiMoHuPaiAckMessage.bind(gameMgr));
        this.reqCB(key, "MingGang1PaiAckMessageNum", gameMgr.MingGang1PaiAckMessage.bind(gameMgr));
        this.reqCB(key, "AnGangPaiAckMessageNum", gameMgr.AnGangPaiAckMessage.bind(gameMgr));
        this.reqCB(key, "ZiMoHuPaiAckMessageNum", gameMgr.ZiMoHuPaiAckMessage.bind(gameMgr));
        this.reqCB(key, "MoPaiZuHeReminderNum", gameMgr.MoPaiZuHeReminder.bind(gameMgr));
        this.reqCB(key, "RestoreListenReminderNum", gameMgr.RestoreListenReminder.bind(gameMgr));
        this.reqCB(key, "VotingReminderNum", gameMgr.VotingReminder.bind(gameMgr));
        this.reqCB(key, "VotingRstNoticeNum", gameMgr.VotingRstNotice.bind(gameMgr));
        this.reqCB(key, "VotingPlayerRstNoticeNum", gameMgr.VotingPlayerRstNotice.bind(gameMgr));
        this.reqCB(key, "VotingInformationNum", gameMgr.VotingInformation.bind(gameMgr));
        this.reqCB(key, "ChuPaiReminderNum", gameMgr.ChuPaiReminder.bind(gameMgr));
        this.reqCB(key, "ChatMessageAckNum", gameMgr.ChatMessageAck.bind(gameMgr));
        this.reqCB(key, "ChatNoticeNum", gameMgr.ChatNotice.bind(gameMgr));
        this.reqCB(key, "SyncTileInfoNum", gameMgr.onReconnectDataHy.bind(gameMgr));
        this.reqCB(key, "ReconnectNoticeFinishCountNum", gameMgr.renectCount.bind(gameMgr));
      };
      this.addMenuNet = function(key, menUI) {};
      this.addChatNet = function(key, ChatUI) {};
      this.addReadyNet = function(key, ReadyUI) {};
      this.addReaNet = function(key, Reconnect) {};
      this.addRebNet = function(key, Reconnect) {};
      this.enterRoom = function(data) {
        fun.net.send("EnterRoomMessageNum", data);
      };
      this.gotoReady = function(data) {
        fun.net.send("PrepareMessageNum", data);
      };
      this.createRoom = function(data) {
        fun.net.send("CreateRoomMessageNum", data);
      };
      this.exitOutRoom = function(content) {
        fun.net.send("ExitRoomMessageNum", content);
      };
      this.dissolvedRoom = function(content) {
        fun.net.send("DissolveRoomMessageNum", content);
      };
      this.chuPai = function(content) {
        fun.net.send("ChuPaiMessageNum", content);
      };
      this.optPai = function(content, eatObj) {
        fun.net.send(eatObj.msName, content);
      };
      this.passOpt = function(content, eatTag) {
        var message;
        message = "chuPai" === eatTag ? "GuoChuPaiMessageNum" : "QiangGang" === eatTag ? "GuoQiangGangMessageNum" : "GuoMoPaiMessageNum";
        fun.net.send(message, content);
      };
      this.chiPaiOpt = function(content) {
        fun.net.send("ChiPaiMessageNum", content);
      };
      this.VoteOutRoom = function(content) {
        fun.net.send("VotingStartMessageNum", {});
      };
      this.disbandRoomVote = function(data) {
        var content = {};
        content.VotingRst = 2 == data.OP;
        fun.net.send("VotingMessageNum", content);
      };
    };
    module.exports = {
      new: function _new() {
        return hymjNetMgr;
      }
    };
    cc._RF.pop();
  }, {
    hyMjCfg: "hyMjCfg",
    mjDataMgr: "mjDataMgr"
  } ],
  initFun: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "697327HsPFER4ZHPSO4LnVQ", "initFun");
    "use strict";
    window.gameConst = require("GameCfg");
    var chatCfg = require("ChatCfg");
    var funNetMgr = require("funNetMgr");
    var JSPhoneVoice = require("JSPhoneVoice");
    cc.Class({
      extends: cc.Component,
      properties: {
        loginUrl: {
          type: gameConst.loginUrlType,
          default: gameConst.loginUrlType.intranet,
          displayName: "登陆服务器地址"
        },
        loginType: {
          type: gameConst.loginType,
          default: gameConst.loginType.weChat,
          displayName: "登陆类型"
        },
        enableUpdate: {
          default: true,
          displayName: "启用热更新"
        },
        voiceLanguage: {
          type: gameConst.voiceLanguage,
          default: gameConst.voiceLanguage.mandarin,
          displayName: "用户默认语音"
        },
        soundValume: {
          default: .8,
          min: 0,
          max: 1,
          displayName: "默认音效音量"
        },
        musicValume: {
          default: .8,
          min: 0,
          max: 1,
          displayName: "默认音乐音量"
        },
        enableAutoLogin: {
          default: true,
          displayName: "启用自动登陆"
        },
        logUrl: {
          default: "ws://192.168.1.89:6868/websocket",
          displayName: "提交日志地址"
        },
        logLevel: {
          type: gameConst.logLevel,
          default: gameConst.logLevel.info,
          displayName: "日志级别"
        },
        logSaveDay: {
          default: 3,
          displayName: "日志保存天数"
        },
        compileType: {
          default: gameConst.compileType.custom,
          type: gameConst.compileType,
          displayName: "编译配置",
          tooltip: "custom：上面选项生效;其他选项将覆盖上面的配置"
        },
        releaseType: {
          type: gameConst.releaseType,
          default: gameConst.releaseType.normal,
          displayName: "发布方式"
        }
      },
      onLoad: function onLoad() {
        this.sumdt = 0;
        this.currTime = Date.now();
        this.announceInfo = [];
        var logger = require("funLog");
        window.fun = {
          gameCfg: {
            loginUrl: gameConst.loginUrl[this.loginUrl],
            logUrl: this.logUrl,
            loginType: this.loginType,
            enableAutoLogin: this.enableAutoLogin,
            logLevel: this.logLevel,
            logSaveDay: this.logSaveDay,
            enableUpdate: this.enableUpdate,
            voiceLanguage: this.voiceLanguage.mandarin,
            soundValume: this.soundValume,
            musicValume: this.musicValume,
            gameVersion: 0,
            releaseType: this.releaseType,
            netDelayTime: 0
          }
        };
        if (this.compileType > gameConst.compileType.custom) for (var key in gameConst.compileContent[this.compileType]) fun.gameCfg[key] = gameConst.compileContent[this.compileType][key];
        switch (fun.gameCfg.releaseType) {
         case gameConst.releaseType.apple:
          fun.gameCfg.loginUrl = gameConst.loginUrl[gameConst.loginUrlType.apple];
          break;

         case gameConst.releaseType.release:
          fun.gameCfg.loginUrl = gameConst.loginUrl[gameConst.loginUrlType.extranet];
          break;

         case gameConst.releaseType.fisher:
          fun.gameCfg.loginUrl = gameConst.loginUrl[gameConst.loginUrlType.fisher];
        }
        fun.logger = new logger();
        fun.log = fun.logger.log.bind(fun.logger);
        fun.base64 = require("funBase64");
        fun.event = require("funEvent");
        fun.db = require("funDB");
        fun.db.setData("UpdatedGame", {});
        fun.db.setData("MailInfo", {});
        fun.db.setData("AnnounceInfo", []);
        fun.db.setData("NewMailId", -1);
        fun.utils = require("funUtils");
        fun.csv = require("funCsv");
        fun.net = new funNetMgr();
        fun.db.getNeedNotice() || fun.db.setNeedNotice(false);
        fun.rootNode = this.node;
        cc.game.addPersistRootNode(fun.rootNode);
        fun.net.addOpenCb(function() {
          fun.net.pListen("KickOff", function() {
            cc.sys.localStorage.removeItem("Token");
            fun.net.setState("KickOff");
            var data = {
              contentStr: "账号在其它设备登录，请确认是否本人操作！",
              okBtnStr: "重试",
              closeBtnStr: "退出",
              okCb: function okCb() {
                fun.utils.restart();
              },
              closeCb: function closeCb() {
                fun.utils.endGame();
              }
            };
            fun.event.dispatch("MinDoubleButtonPop", data);
          });
        });
        fun.net.addOpenCb(function() {
          fun.net.pListen("Chat", function(data) {
            switch (data.chatType) {
             case "text":
              data.content = chatCfg.exporText[fun.db.getData("RoomInfo").GameType][data.index];
              break;

             case "emoji":
              data.content = chatCfg.emoji[data.index];
              break;

             case "voice":
              var voiceName = Date.now() + "_" + data.from;
              cc.sys.isNative && JSPhoneVoice.writeVoiceData(data.content, voiceName);
              data.content = voiceName;
            }
            fun.event.dispatch("RoomChat", data);
          });
        });
        fun.net.addOpenCb(function() {
          fun.net.pListen("RoomCard", function(data) {
            var userInfo = fun.db.getData("UserInfo");
            userInfo.RoomCard = data.CurrRoomCardNum;
            fun.db.setData("UserInfo", userInfo);
          });
        });
        fun.net.addOpenCb(function() {
          fun.net.pListen("Announce", function(data) {
            if (data.List) {
              this.announceInfo = data.List;
              fun.db.setData("AnnounceInfo", data.List);
            } else {
              var announceInfo = fun.db.getData("AnnounceInfo");
              data.Dels && data.Dels.forEach(function(value) {
                for (var i = 0; i < announceInfo.length; i++) if (announceInfo[i].id === value) {
                  announceInfo.splice(i, 1);
                  break;
                }
              });
              if (data.Adds) {
                var noSuper = true, superIdx = void 0;
                for (var i = 0; i < announceInfo.length; ++i) if (11 !== announceInfo[i].type) {
                  noSuper = false;
                  superIdx = i;
                }
                noSuper ? announceInfo = announceInfo.concat(data.Adds) : announceInfo[superIdx] = data.Adds;
              }
              this.announceInfo = announceInfo;
              fun.db.setData("AnnounceInfo", announceInfo);
            }
          }.bind(this));
        }.bind(this));
        fun.net.addOpenCb(function() {
          fun.net.pListen("NewMailId", function(data) {
            fun.db.setData("NewMailId", data.mId);
          });
        });
        fun.net.addOpenCb(function() {
          fun.net.pListen("NewMail", function(data) {
            var mailInfo = db.getData("MailInfo");
            mailInfo[data.id] = data;
            fun.db.set("MailInfo", mailInfo);
          });
        });
        fun.net.addOpenCb(function() {
          fun.net.pListen("ServerError", function(data) {
            var dispatchData = {
              okBtnStr: "关闭游戏",
              contentStr: "与游戏服务器断开连接！",
              okCb: function okCb() {
                fun.utils.endGame();
              },
              closeCb: function closeCb() {
                fun.utils.endGame();
              }
            };
            fun.event.dispatch("MinSingleButtonPop", dispatchData);
          });
        });
        this._showState = true;
        cc.game.on(cc.game.EVENT_HIDE, this._gameHide, this);
        cc.game.on(cc.game.EVENT_SHOW, this._gameShow, this);
        cc.director.setDisplayStats(false);
        this._checkArrayFunc();
      },
      update: function update(dt) {
        fun.net.update(dt);
        this.sumdt += dt;
        if (this.sumdt >= 1) {
          this.sumdt -= 1;
          this.currTime += 1e3;
          var flag = false;
          for (var i = this.announceInfo.length - 1; i > 0; i--) if (this.announceInfo[i].end_time && this.announceInfo[i].end_time > 0 && 1e3 * this.announceInfo[i].end_time <= this.currTime) {
            flag = true;
            this.announceInfo.splice(i, 1);
          }
          flag && fun.db.setData("AnnounceInfo", this.announceInfo);
        }
      },
      onDestroy: function onDestroy() {
        cc.game.off(cc.game.EVENT_HIDE, this._gameHide, this);
        cc.game.off(cc.game.EVENT_SHOW, this._gameShow, this);
      },
      _gameHide: function _gameHide() {
        if (!this._showState) return;
        fun.net.sendHeartBeat();
        this._showState = false;
        cc.audioEngine.pauseMusic();
      },
      _gameShow: function _gameShow() {
        if (this._showState) return;
        fun.net.sendHeartBeat();
        this._showState = true;
        cc.audioEngine.resumeAll();
      },
      _checkArrayFunc: function _checkArrayFunc() {
        Array.prototype.findIndex || Object.defineProperty(Array.prototype, "findIndex", {
          value: function value(predicate) {
            if (null == this) throw new TypeError('"this" is null or not defined');
            var o = Object(this);
            var len = o.length >>> 0;
            if ("function" !== typeof predicate) throw new TypeError("predicate must be a function");
            var thisArg = arguments[1];
            var k = 0;
            while (k < len) {
              var kValue = o[k];
              if (predicate.call(thisArg, kValue, k, o)) return k;
              k++;
            }
            return -1;
          }
        });
      }
    });
    cc._RF.pop();
  }, {
    ChatCfg: "ChatCfg",
    GameCfg: "GameCfg",
    JSPhoneVoice: "JSPhoneVoice",
    funBase64: "funBase64",
    funCsv: "funCsv",
    funDB: "funDB",
    funEvent: "funEvent",
    funLog: "funLog",
    funNetMgr: "funNetMgr",
    funUtils: "funUtils"
  } ],
  interact: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fc1adNrH8BJcK6KWtYPnMIa", "interact");
    "use strict";
    var interactCfg = {
      Jidan: {
        node: "liwu_0"
      },
      Tuoxie: {
        node: "liwu_0"
      },
      Hua: {
        node: "liwu_1"
      },
      Wen: {
        node: "liwu_1"
      },
      Bianpao: {
        node: "liwu_2"
      },
      Hongbao: {
        node: "liwu_2"
      },
      Xueqiu: {
        node: "liwu_2"
      },
      Shoulei: {
        node: "liwu_3"
      },
      Yan: {
        node: "liwu_3"
      }
    };
    var Audio = require("Audio");
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {},
      show: function show(data, startWorldPos, endWoldPos, isExchange) {
        this.hideAll();
        if (true == isExchange) {
          var startPos = startWorldPos;
          var endPos = endWoldPos;
        } else {
          var startPos = this.node.convertToNodeSpaceAR(startWorldPos);
          var endPos = this.node.convertToNodeSpaceAR(endWoldPos);
        }
        var nodeName = interactCfg[data.content].node;
        this.animNode = this.node.getChildByName(nodeName);
        this.animNode.active = true;
        this.animNode.setPosition(startPos);
        this.spAnim = this.animNode.getComponent(sp.Skeleton);
        var moveTime = cc.pDistance(startPos, endPos) / 1500;
        var moveAct = cc.sequence(cc.moveTo(moveTime, endPos), cc.callFunc(function() {
          Audio.playEffect("hall", data.content + ".mp3");
          this.moveActEnd(data);
        }.bind(this)));
        this.animNode.runAction(moveAct);
        this.spAnim.setAnimation(0, data.content + "_fei", true);
      },
      hideAll: function hideAll() {
        this.node.children.forEach(function(child) {
          child.active = false;
        });
      },
      moveActEnd: function moveActEnd(data) {
        this.spAnim.setCompleteListener(this.close.bind(this));
        this.spAnim.setAnimation(0, data.content + "_dao", false);
      },
      close: function close() {
        this.node.removeFromParent();
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio"
  } ],
  login: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e7e75qCAadM+6Ba47D54W/o", "login");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        gameName: {
          type: gameConst.gameName,
          default: gameConst.gameName.hall
        }
      },
      onLoad: function onLoad() {
        if (cc.sys.isNative) {
          console.log("WritablePath = " + jsb.fileUtils.getWritablePath());
          var JSPhoneVoice = require("JSPhoneVoice");
          JSPhoneVoice.clearOldVoice();
          require("JSPhoneBaiDu").getBaiDuLocation();
        }
        this._isApple = fun.gameCfg.releaseType === gameConst.releaseType.apple;
        this._isFisher = fun.gameCfg.releaseType === gameConst.releaseType.fisher;
        this._isFisher && (this.node.getChildByName("Haishang").active = true);
        this.editBox = this.node.getChildByName("editBox");
        this.editBox.active = false;
        this.wxLoginBtn = this.node.getChildByName("btnWxLogin");
        this.ykLoginBtn = this.node.getChildByName("btnYkLogin");
        var isIDLogin = fun.gameCfg.loginType === gameConst.loginType.ID;
        this.ykLoginBtn.getChildByName("Label").getComponent(cc.Label).string = isIDLogin ? "账号登陆" : "游客登陆";
        cc.director.preloadScene("hall", function() {});
        if (cc.sys.isNative && fun.gameCfg.enableUpdate && !fun.db.getData("UpdatedGame")[this.gameName]) {
          this.wxLoginBtn.active = false;
          this.ykLoginBtn.active = false;
          fun.event.add("hallUpdatedGame", "UpdatedGame", this.onCompleteUpdateEvent.bind(this));
        } else this.initLogin();
        this.node.getChildByName("version").getComponent(cc.Label).string = gameConst.version;
      },
      onDestroy: function onDestroy() {
        fun.event.remove("hallUpdatedGame");
      },
      isWxAppInstalled: function isWxAppInstalled(install) {
        if (!install && this._isApple) {
          this.wxLoginBtn.active = false;
          this.ykLoginBtn.setPositionX(0);
          this.ykLoginBtn.active = true;
        } else {
          this.wxLoginBtn.active = true;
          this.wxLoginBtn.setPositionX(0);
          this.ykLoginBtn.active = false;
        }
      },
      initLogin: function initLogin() {
        var token = cc.sys.localStorage.getItem("Token");
        if (token && fun.gameCfg.enableAutoLogin) fun.net.connect(fun.gameCfg.loginUrl, function() {
          fun.net.pSend("TokenLogin", {
            Token: token,
            Platform: cc.sys.os
          }, this.loginHandle.bind(this));
        }.bind(this)); else {
          if (cc.sys.os === cc.sys.OS_ANDROID) {
            this.wxLoginBtn.active = true;
            this.wxLoginBtn.setPositionX(0);
            this.ykLoginBtn.active = false;
          } else if (cc.sys.os === cc.sys.OS_IOS) this.isWxAppInstalled(require("JSPhoneWeChat").WxAppIsInstalled()); else {
            this.wxLoginBtn.active = true;
            this.ykLoginBtn.active = true;
          }
          fun.gameCfg.loginType === gameConst.loginType.ID && (this.editBox.active = true);
          this.wxLoginBtn.on("click", this.onLoginBtnClick, this);
          this.ykLoginBtn.on("click", this.onGuestBtnClick, this);
        }
      },
      onCompleteUpdateEvent: function onCompleteUpdateEvent(data) {
        for (var k in data) if (data[k] === this.gameName) {
          this.initLogin();
          break;
        }
      },
      onLoginBtnClick: function onLoginBtnClick(event) {
        require("Audio").playEffect("hall", "button_nomal.mp3");
        fun.net.connect(fun.gameCfg.loginUrl, function() {
          this.weChatLogin();
        }.bind(this));
      },
      onGuestBtnClick: function onGuestBtnClick() {
        fun.net.connect(fun.gameCfg.loginUrl, function() {
          switch (fun.gameCfg.loginType) {
           case gameConst.loginType.weChat:
            this.guestLogin();

           case gameConst.loginType.guest:
            this.guestLogin();
            break;

           case gameConst.loginType.ID:
            this.idLogin();
          }
        }.bind(this));
      },
      weChatLogin: function weChatLogin() {
        fun.log("login", "weChatLogin");
        require("JSPhoneWeChat").WxLogin(function(msg) {
          if (msg.state) {
            var wxLogin = {
              Thirdparty: 1,
              OpenId: msg.openid,
              AccessToken: msg.token,
              Platform: cc.sys.os
            };
            fun.net._isConnected() ? fun.net.pSend("ThirdLogin", wxLogin, this.loginHandle.bind(this)) : fun.net.connect(fun.gameCfg.loginUrl, function() {
              fun.net.pSend("ThirdLogin", wxLogin, this.loginHandle.bind(this));
            }.bind(this));
          }
        }.bind(this));
      },
      guestLogin: function guestLogin() {
        fun.log("login", "guestLogin");
        fun.net.pSend("GustLogin", {
          UserId: 0
        }, this.loginHandle);
      },
      idLogin: function idLogin() {
        fun.log("login", "idLogin");
        var id = this.editBox.getComponent(cc.EditBox).string;
        if (6 !== id.length) {
          fun.log("login", "error id " + id);
          return;
        }
        fun.net.pSend("GustLogin", {
          UserId: parseInt(id)
        }, this.loginHandle);
      },
      loginHandle: function loginHandle(data) {
        if (data.RetCode && 0 !== data.RetCode) {
          fun.log("login", "login error: ", data);
          switch (data.RetCode) {
           case 1:
            var func = function() {
              this.wxLoginBtn.once("click", this.onLoginBtnClick, this);
            }.bind(this);
            fun.event.dispatch("MinSingleButtonPop", {
              okCb: func,
              contentStr: "服务器忙",
              closeCb: func
            });
            break;

           case 2:
            fun.event.dispatch("MinSingleButtonPop", {
              contentStr: "非法游戏类型"
            });
            break;

           case 3:
            fun.event.dispatch("MinSingleButtonPop", {
              contentStr: "登录失败"
            });
            break;

           case 4:
            cc.sys.localStorage.removeItem("Token");
            fun.utils.restart();
            break;

           case 5:
            fun.event.dispatch("MinSingleButtonPop", {
              contentStr: "非法第三方平台"
            });
          }
          return;
        }
        fun.net.setState("Login");
        var userInfo = fun.db.getData("UserInfo");
        void 0 !== userInfo.location ? data.location = userInfo.location : data.location = null;
        fun.db.setData("UserInfo", data);
        cc.sys.localStorage.setItem("Token", data.Token);
        cc.director.loadScene("hall");
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio",
    JSPhoneBaiDu: "JSPhoneBaiDu",
    JSPhoneVoice: "JSPhoneVoice",
    JSPhoneWeChat: "JSPhoneWeChat"
  } ],
  mailDetail: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f4c02W4qZxCK7gXDuRRC+Oq", "mailDetail");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        timeLabel: {
          type: cc.Label,
          default: null
        },
        contentLabel: {
          type: cc.Label,
          default: null
        },
        cardImg: {
          type: cc.Sprite,
          default: null
        },
        voucherImg: {
          type: cc.Sprite,
          default: null
        },
        cardNum: {
          type: cc.Label,
          default: null
        },
        okBtn: {
          type: cc.Button,
          default: null
        },
        closeBtnLabel: {
          type: cc.Label,
          default: null
        },
        closeBtn: cc.Node
      },
      init: function init(data) {
        this._data = data;
        this.timeLabel.string = data.timeStr;
        this.contentLabel.string = data.cont;
        if (1 === data.mType) {
          this.cardImg.node.active = false;
          this.voucherImg.node.active = false;
          this.closeBtnLabel.string = "关闭";
          this.closeBtn.active = false;
        } else {
          this.closeBtnLabel.string = "领取";
          this.closeBtn.active = true;
          if (3 === data.att.opt) {
            this.cardImg.node.active = false;
            this.voucherImg.node.active = true;
          } else {
            this.cardImg.node.active = true;
            this.voucherImg.node.active = false;
          }
        }
        if (0 === data.att.data) this.cardNum.node.active = false; else {
          this.cardNum.node.active = true;
          0 === data.att.opt;
          this.cardNum.string = data.att.data;
        }
        this.okBtn.node.once("click", this.onOkBtnClick, this);
        this.closeBtn.once("click", this.onCloseBtnClick, this);
      },
      onEnable: function onEnable() {
        this.node.getComponent(cc.Animation).play("popScaleAnim");
      },
      onOkBtnClick: function onOkBtnClick() {
        require("Audio").playEffect("hall", "button_close.mp3");
        var animState = this.node.getComponent(cc.Animation).play("popScaleOut");
        animState.once("finished", function() {
          1 !== this._data.mType && this._data.callback();
          this.node.destroy();
        }.bind(this));
      },
      onCloseBtnClick: function onCloseBtnClick() {
        require("Audio").playEffect("hall", "button_close.mp3");
        var animState = this.node.getComponent(cc.Animation).play("popScaleOut");
        animState.once("finished", function() {
          this.node.destroy();
        }.bind(this));
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio"
  } ],
  mailItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bcc38K7015I0oaZKv3ZjaYi", "mailItem");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        itemID: {
          default: 0,
          visible: false
        },
        timeLabel: {
          default: null,
          type: cc.Label
        },
        contentLabel: {
          default: null,
          type: cc.Label
        },
        cardNumLabel: {
          default: null,
          type: cc.Label
        },
        cardImg: {
          default: null,
          type: cc.Sprite
        },
        voucherImg: {
          default: null,
          type: cc.Sprite
        }
      },
      updateItem: function updateItem(data) {
        this.lId = data.lId;
        this.mId = data.mId;
        this.timeLabel.string = data.timeStr;
        this.contentLabel.string = data.cont;
        if (1 === data.mType) {
          this.cardImg.node.active = false;
          this.voucherImg.node.active = false;
        } else if (3 === data.att.opt) {
          this.cardImg.node.active = false;
          this.voucherImg.node.active = true;
        } else {
          this.cardImg.node.active = true;
          this.voucherImg.node.active = false;
        }
        if (0 === data.att.data) this.cardNumLabel.node.active = false; else {
          this.cardNumLabel.node.active = true;
          this.cardNumLabel.string = data.att.data;
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  mailLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fe45ck6oZtLg79qjLU4UbTf", "mailLayer");
    "use strict";
    var Audio = require("Audio");
    cc.Class({
      extends: cc.Component,
      properties: {
        itemTemplate: {
          default: null,
          type: cc.Node
        },
        scrollView: {
          default: null,
          type: cc.ScrollView
        },
        spacing: {
          default: 0
        },
        mailDetailPre: {
          type: cc.Prefab,
          default: null
        }
      },
      init: function init(reqCount, mailInfo) {
        mailInfo || (mailInfo = []);
        this.content = this.scrollView.content;
        this.totalCount = 0;
        this.reqCount = reqCount;
        var bg = this.node.getChildByName("back");
        if (mailInfo.length > 0) {
          cc.sys.localStorage.setItem("LastMailID", mailInfo[0].mId);
          bg.getChildByName("noEmail").active = false;
          this.scrollView.active = true;
          this.addItems(mailInfo);
        } else bg.getChildByName("noEmail").active = true;
      },
      addItems: function addItems(mailInfo) {
        mailInfo.forEach(function(value) {
          var item = cc.instantiate(this.itemTemplate);
          item.parent = this.content;
          item.active = true;
          value.lId = this.totalCount;
          var time = new Date(1e3 * value.time);
          value.timeStr = time.getFullYear() + "年" + (time.getMonth() + 1) + "月" + time.getDate() + "日";
          item.getComponent("mailItem").updateItem(value);
          item.y = -item.height * (.5 + this.totalCount) - this.spacing * this.totalCount;
          item.on("click", this.onItemClick.bind(this, this.totalCount, value));
          this.totalCount++;
        }, this);
        this.content.height = this.totalCount * (this.itemTemplate.height + this.spacing) + this.spacing;
        this.reqCount === mailInfo.length && this.scrollView.node.once("scroll-to-bottom", this.onBottomCb, this);
      },
      onEnable: function onEnable() {
        this.node.getComponent(cc.Animation).play("popScaleAnim");
      },
      onBottomCb: function onBottomCb() {
        fun.net.pSend("MailList", {
          Page: this.totalCount + 1,
          Count: this.reqCount
        }, function(rsp) {
          rsp.mInfos && rsp.mInfos.length > 0 && this.addItems(rsp.mInfos);
        }.bind(this));
      },
      onItemClick: function onItemClick(index, data) {
        Audio.playEffect("hall", "button_nomal.mp3");
        var callback = function() {
          fun.net.pSend("DelMail", {
            mId: data.mId
          }, function(rsp) {
            this.content.children.forEach(function(item) {
              var lid = item.getComponent("mailItem").lId;
              lid > index ? item.y += item.height + this.spacing : lid === index && item.destroy();
            }, this);
          }.bind(this));
        }.bind(this);
        data.callback = callback;
        var mailDetail = cc.instantiate(this.mailDetailPre);
        mailDetail.getComponent("mailDetail").init(data);
        mailDetail.parent = this.node;
        1 === data.mType && callback();
      },
      onBtnCloseClick: function onBtnCloseClick() {
        Audio.playEffect("hall", "button_close.mp3");
        this.animState = this.node.getComponent(cc.Animation).play("popScaleOut");
        this.animState.once("finished", function() {
          this.node.destroy();
        }.bind(this));
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio"
  } ],
  minDoubleButtonPop: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "37fecnKCOhAiIKQU1ZJTcuX", "minDoubleButtonPop");
    "use strict";
    var Audio = require("Audio");
    cc.Class({
      extends: cc.Component,
      properties: {
        btnOk: {
          type: cc.Node,
          default: null
        },
        btnOkLabel: {
          type: cc.Label,
          default: null
        },
        btnClose: {
          type: cc.Node,
          default: null
        },
        btnCloseLabel: {
          type: cc.Label,
          default: null
        },
        contentLabel: {
          type: cc.Label,
          default: null
        }
      },
      init: function init(data) {
        this.okCb = data.okCb;
        this.closeCb = data.closeCb;
        data.okBtnStr && (this.btnOkLabel.string = data.okBtnStr);
        data.closeBtnStr && (this.btnCloseLabel.string = data.closeBtnStr);
        data.contentStr && (this.contentLabel.string = data.contentStr);
      },
      onLoad: function onLoad() {
        this.btnOk.once("click", this.onBtnOkClick, this);
        this.btnClose.once("click", this.onBtnCloseClick, this);
      },
      onEnable: function onEnable() {
        this.node.getComponent(cc.Animation).play("popScaleAnim");
      },
      onBtnOkClick: function onBtnOkClick() {
        Audio.playEffect("hall", "button_nomal.mp3");
        var animState = this.node.getComponent(cc.Animation).play("popScaleOut");
        animState.once("finished", function() {
          this.okCb && this.okCb();
          this.node.destroy();
        }.bind(this));
      },
      onBtnCloseClick: function onBtnCloseClick() {
        Audio.playEffect("hall", "button_close.mp3");
        var animState = this.node.getComponent(cc.Animation).play("popScaleOut");
        animState.once("finished", function() {
          this.closeCb && this.closeCb();
          this.node.destroy();
        }.bind(this));
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio"
  } ],
  minSingleButtonPop: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f58c0e2rjJJyLXJ+Z9iUZnG", "minSingleButtonPop");
    "use strict";
    var Audio = require("Audio");
    cc.Class({
      extends: cc.Component,
      properties: {
        btnOk: {
          type: cc.Node,
          default: null
        },
        btnOkLabel: {
          type: cc.Label,
          default: null
        },
        btnClose: {
          type: cc.Node,
          default: null
        },
        contentLabel: {
          type: cc.Label,
          default: null
        }
      },
      init: function init(data) {
        this.okCb = data.okCb;
        this.closeCb = data.closeCb;
        data.okBtnStr && (this.btnOkLabel.string = data.okBtnStr);
        data.contentStr && (this.contentLabel.string = data.contentStr);
        if (data.hideBtn) {
          this.btnOk.active = false;
          this.btnClose.active = false;
        }
        data.hideCloseBtn && (this.btnClose.active = false);
        data.hideOkBtn && (this.btnOk.active = false);
      },
      onLoad: function onLoad() {
        this.btnOk.once("click", this.onBtnOkClick, this);
        this.btnClose.once("click", this.onBtnCloseClick, this);
      },
      onEnable: function onEnable() {
        this.node.getComponent(cc.Animation).play("popScaleAnim");
      },
      onBtnOkClick: function onBtnOkClick() {
        Audio.playEffect("hall", "button_nomal.mp3");
        var animState = this.node.getComponent(cc.Animation).play("popScaleOut");
        animState.once("finished", function() {
          this.okCb && this.okCb();
          this.node.destroy();
        }.bind(this));
      },
      onBtnCloseClick: function onBtnCloseClick() {
        Audio.playEffect("hall", "button_close.mp3");
        var animState = this.node.getComponent(cc.Animation).play("popScaleOut");
        animState.once("finished", function() {
          this.closeCb && this.closeCb();
          this.node.destroy();
        }.bind(this));
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio"
  } ],
  mjAnimHelper: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ef0a7mGJM5PUJwxj8c1CjOP", "mjAnimHelper");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {
        this.spAnim = this.node.getComponent(sp.Skeleton);
        var self = this;
        var completeFunc = function completeFunc(event) {
          self.onAnimFinish(event);
        };
        this.spAnim.setCompleteListener(completeFunc);
        this.initSpecialEndAnim();
        this.initOptPaiAnim();
        this.initCommonAnim();
      },
      onAnimFinish: function onAnimFinish(event) {
        this.onFinishCB && this.onFinishCB();
        this.onFinishCB = void 0;
        this.node.removeFromParent();
      },
      initSpecialEndAnim: function initSpecialEndAnim() {
        var creatAnimObj = function creatAnimObj(keyName, animName) {
          return {
            key: keyName,
            name: animName
          };
        };
        var animList = [];
        animList.push(creatAnimObj("isqys", "Qingyise"));
        animList.push(creatAnimObj("ishys", "Hunyise"));
        animList.push(creatAnimObj("isgsh", "Gangshangkaihua"));
        animList.push(creatAnimObj("isddh", "Duiduihu"));
        animList.push(creatAnimObj("iszm", "Zimo"));
        this.endAnimList = animList;
      },
      initOptPaiAnim: function initOptPaiAnim() {
        var GameDefine = require("mjGameDefine");
        var optDefine = GameDefine.EATPAI_TYPE;
        var namelist = {};
        namelist[optDefine.ChiPai] = "Chi";
        namelist[optDefine.PengPai] = "Peng";
        namelist[optDefine.MingGang2] = "Gang";
        namelist[optDefine.AnGang] = "Gang";
        namelist[optDefine.MingGang1] = "Gang";
        namelist[optDefine.BuHua] = "Buhua";
        this.optPaiAnimList = namelist;
      },
      showSpeacilEndAnim: function showSpeacilEndAnim(endData) {
        var endAninName = "Hu";
        for (var i = 0; i < this.endAnimList.length; i++) {
          var animObj = this.endAnimList[i];
          if (endData[animObj.key]) {
            endAninName = animObj.name;
            break;
          }
        }
        this.spAnim.setAnimation(0, endAninName, false);
      },
      showOptPaiAnim: function showOptPaiAnim(eatType) {
        this.spAnim.setAnimation(0, this.optPaiAnimList[eatType], false);
      },
      initCommonAnim: function initCommonAnim() {
        var commonList = {};
        commonList["AnimShengpai"] = "Shengpai";
        commonList["AnimLiuju"] = "Liuju";
        commonList["AnimKaishi"] = "Kaishi";
        this.commonAnimList = commonList;
      },
      showCommonAnim: function showCommonAnim(key, handler) {
        var animName = this.commonAnimList[key];
        if (animName) {
          this.onFinishCB = handler;
          this.spAnim.setAnimation(0, animName, false);
        } else this.node.removeFromParent();
      },
      progress: function progress() {},
      onFinish: function onFinish() {
        cc.Component.EventHandler.emitEvents([ this.finishHandler ]);
      }
    });
    cc._RF.pop();
  }, {
    mjGameDefine: "mjGameDefine"
  } ],
  mjChatUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "190e0eUt9RL1oZW/YCNY8yj", "mjChatUI");
    "use strict";
    var log = cc.log;
    var GameDefine = require("mjGameDefine");
    var mjNetMgr = require("mjNetMgr");
    var mjDataMgr = require("mjDataMgr");
    var gameManager = require("mjGameManager");
    cc.Class({
      extends: cc.Component,
      properties: {
        btnVoiceN: cc.Node,
        btnChatN: cc.Node,
        interactP: cc.Prefab,
        chatP: cc.Prefab,
        playerDetailP: cc.Prefab,
        popWindowN: cc.Node,
        playerMap: cc.Prefab
      },
      onLoad: function onLoad() {
        this.initMessage();
        this.initPlayerDetail();
      },
      start: function start() {
        var isAppleVer = fun.gameCfg.releaseType === gameConst.releaseType.apple;
        var isReplay = require("mjReplayMgr").isReplayPai();
        this.btnVoiceN.active = cc.sys.isNative && !isReplay && !isAppleVer;
        this.btnChatN.active = !isReplay && !isAppleVer;
      },
      initMessage: function initMessage() {
        fun.event.add("mjPlayerDetail", "mjPlayerDetail", this.showPlayerInfo.bind(this));
        fun.event.add("mjRoomChat", "RoomChat", this.playerChat.bind(this));
        fun.event.add("mjRoomChatV", "RoomChatVoice", this.showPlayerVoice.bind(this));
        mjNetMgr.getIns().addChatNet(mjNetMgr.KEYS.CHAT, this);
      },
      cleanMessage: function cleanMessage() {
        fun.event.remove("mjPlayerDetail");
        fun.event.remove("mjRoomChat");
        fun.event.remove("mjRoomChatV");
        mjNetMgr.getIns().rmNet(mjNetMgr.KEYS.CHAT);
      },
      update: function update(dt) {},
      onDestroy: function onDestroy() {
        this.cleanMessage();
      },
      showPlayerInfo: function showPlayerInfo(pData) {
        var detailN = cc.instantiate(this.playerDetailP);
        var playerData = pData.d;
        var deskType = pData.pos;
        var data = {
          name: playerData.showName,
          id: "ID:" + playerData.UserId,
          url: playerData.Icon
        };
        data.addr = playerData.Address ? playerData.Address.locdesc : "未开启定位";
        data.isNoLocation = false;
        data.isSelf = deskType == GameDefine.DESKPOS_TYPE.XIA;
        data.selfUid = mjDataMgr.get(mjDataMgr.KEYS.UID);
        data.curUid = playerData.UserId;
        detailN.getComponent("playerDetailUI").show(data, this.showPlayerMap.bind(this));
        cc.log("this.PlayerDetailPos[deskType]", this.PlayerDetailPos[deskType]);
        detailN.setPosition(this.PlayerDetailPos[deskType]);
        this.popWindowN.addChild(detailN);
      },
      initPlayerDetail: function initPlayerDetail() {
        var deskType = GameDefine.DESKPOS_TYPE;
        var posList = {};
        posList[deskType.SHANG] = cc.p(135, 180);
        posList[deskType.ZUO] = cc.p(-360, 120);
        posList[deskType.YOU] = cc.p(360, 135);
        posList[deskType.XIA] = cc.p(-360, -135);
        this.PlayerDetailPos = posList;
      },
      playerChat: function playerChat(data) {
        if ("interact" == data.chatType) this.showInteract(data); else if ("voice" != data.chatType) {
          var player = gameManager.getplayerByUserID(data.from);
          player.showChat(data);
        }
      },
      showPlayerVoice: function showPlayerVoice(data) {
        var player = gameManager.getplayerByUserID(data.from);
        player.showChat(data);
      },
      onBtnChatClicked: function onBtnChatClicked() {
        require("Audio").playEffect("hall", "button_nomal.mp3");
        this.popWindowN.addChild(cc.instantiate(this.chatP));
      },
      showInteract: function showInteract(data) {
        var sPlayer = gameManager.getplayerByUserID(data.from);
        var ePlayer = gameManager.getplayerByUserID(data.to);
        var interactN = cc.instantiate(this.interactP);
        this.popWindowN.addChild(interactN);
        interactN.getComponent("interact").show(data, sPlayer.getInteractPos(), ePlayer.getInteractPos());
      },
      showPlayerMap: function showPlayerMap() {
        var mapN = cc.instantiate(this.playerMap);
        this.popWindowN.addChild(mapN);
        mapN.getComponent("playerMap").show(mjDataMgr.get(mjDataMgr.KEYS.PLAYERS));
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio",
    mjDataMgr: "mjDataMgr",
    mjGameDefine: "mjGameDefine",
    mjGameManager: "mjGameManager",
    mjNetMgr: "mjNetMgr",
    mjReplayMgr: "mjReplayMgr"
  } ],
  mjChiDetailUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9aa48oKZrBO+pOA5clKRuAF", "mjChiDetailUI");
    "use strict";
    var gameManager = require("mjGameManager");
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {},
      onSelfCilcked: function onSelfCilcked() {
        this.gameUI.hideMoreChiUI();
        gameManager.chiPaiToServer(this.eatData, this.comb);
      },
      init: function init(gameUI, comb, eatData) {
        var self = this;
        var chiID = eatData.Atile;
        this.gameUI = gameUI;
        this.eatData = eatData;
        this.comb = comb;
        var showEatList = comb.slice();
        2 == showEatList.length && showEatList.push(eatData.Atile);
        showEatList = gameManager.sortGroupPai(showEatList);
        for (var i = 0; i < 3; i++) {
          var id = showEatList[i];
          var paiNode = this.node.getChildByName("pai_" + i);
          var spriteNode = paiNode.getChildByName("content");
          var paiSprite = this.gameUI.getPaiSprite(id);
          spriteNode.getComponent(cc.Sprite).spriteFrame = paiSprite;
        }
      }
    });
    cc._RF.pop();
  }, {
    mjGameManager: "mjGameManager"
  } ],
  mjDataMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f0f651/fdRE34S0Q94vwSfl", "mjDataMgr");
    "use strict";
    var GameDefine = require("mjGameDefine");
    var ServerToLocalType = {
      1: 1,
      2: 3,
      3: 2
    };
    var gameData = {
      userId: void 0,
      roomInfo: {},
      roomPlayers: {},
      PlayerCOORD: {},
      isRoomMaster: false
    };
    var mjDataSys = function mjDataSys() {
      this.data = {
        CfgData: {
          gameName: "黄岩麻将",
          zhuangPaiCount: 14,
          totalPai: 136,
          liujupai: 14,
          paiScale: 1,
          MagicName: "Caishen",
          Dialect: "hymj/"
        },
        TesuPai: GameDefine.SPECIALPAIHY,
        createDate: GameDefine.CREATROOMHY
      };
      this.canQuickly = function(PaiID) {
        return true;
      };
      this.set = function(key, value) {
        this.data[key] = value;
      };
      this.get = function(key) {
        return this.data[key];
      };
      this.clean = function() {
        this.data = {};
      };
      this.initRoomPlayers = function(playerArray) {
        for (var i = 0; i < playerArray.length; i++) {
          var playerData = playerArray[i];
          if (!playerData) continue;
          playerData.isSelfPlayed = false;
          if (playerData.UserId == this.get(mjDataMgr.KEYS.UID)) {
            this.set(mjDataMgr.KEYS.SELFID, playerData.PlayerIdx);
            this.refreshDeskType();
            playerData.isSelfPlayed = true;
          }
          var PlayerIdx = playerData.PlayerIdx;
          this.setPlayerData(playerData, PlayerIdx);
        }
      };
      this.refreshDeskType = function() {
        var deskPosIdxs = [];
        var meIdx = this.get(mjDataMgr.KEYS.SELFID);
        deskPosIdxs[meIdx] = GameDefine.DESKPOS_TYPE.XIA;
        deskPosIdxs[(meIdx + 1) % 4] = GameDefine.DESKPOS_TYPE.YOU;
        deskPosIdxs[(meIdx + 2) % 4] = GameDefine.DESKPOS_TYPE.SHANG;
        deskPosIdxs[(meIdx + 3) % 4] = GameDefine.DESKPOS_TYPE.ZUO;
        this.set(mjDataMgr.KEYS.POSIDS, deskPosIdxs);
      };
      this.setPlayerData = function(playerData, posIndex) {
        if (playerData) {
          var isTruePlayer = true;
          playerData.showName = isTruePlayer ? playerData.Name : "游客" + playerData.UserId;
          playerData.showName = mjDataMgr.sliceName(playerData.showName);
          playerData.isTruePlayer = isTruePlayer;
          playerData.OnLine = playerData.Status != GameDefine.PLAYER_READY.OFFLINE;
          playerData.xdhs = playerData.Score || 0;
        }
        var roomPlayers = this.get(mjDataMgr.KEYS.PLAYERS) || {};
        roomPlayers[posIndex] = playerData;
        this.set(mjDataMgr.KEYS.PLAYERS, roomPlayers);
      };
      this.getPlayerData = function(PlayerIdx) {
        return this.get(mjDataMgr.KEYS.PLAYERS)[PlayerIdx];
      };
      this.getAllPlayersData = function() {
        return this.get(mjDataMgr.KEYS.PLAYERS);
      };
      this.setPlayerCOORD = function(idx, coord) {
        var playerCoords = this.get(mjDataMgr.KEYS.COORDS) || {};
        playerCoords[idx] = coord;
        this.set(mjDataMgr.KEYS.COORDS, playerCoords);
      };
      this.getPlayerCOORD = function(idx) {
        var playerCoords = this.get(mjDataMgr.KEYS.COORDS) || {};
        return playerCoords[idx];
      };
      this.isRoomMaster = function() {
        return 0 == this.get(mjDataMgr.KEYS.SELFID);
      };
      this.init = function() {
        var userInfo = fun.db.getData("UserInfo");
        this.set(mjDataMgr.KEYS.UID, userInfo.UserId);
        this.set(mjDataMgr.KEYS.CFG, this.data.CfgData);
        this.initRoomInfo();
      };
      this.getCeateItem = function(itemKey, roomInfo, dataKey) {
        var createDate = this.data.createDate;
        var item = this.data.createDate[itemKey];
        dataKey = dataKey || roomInfo[itemKey];
        var itemData = {};
        if (item) {
          itemData.name = item.name;
          itemData.content = item.data[dataKey];
        } else fun.log("mj", "mjDataMgr getCeateItem: this itemKey has no  defined");
        return itemData;
      };
      this.initRoomInfo = function() {
        var gameInfo = fun.db.getData("RoomInfo");
        var roomInfo = gameInfo.RoomInformation;
        roomInfo.showList = [];
        roomInfo.showList.push(this.getCeateItem("GameNum" + roomInfo.SpendMethod, roomInfo, roomInfo.GameNum));
        roomInfo.showList.push(this.getCeateItem("PaymentMethod", roomInfo));
        roomInfo.showList.push(this.getCeateItem("GshOp", roomInfo));
        this.set(mjDataMgr.KEYS.ROOMINFO, roomInfo);
        var hymjData = fun.db.getData("hymajiang");
        if (hymjData.PlayerInfo) {
          roomInfo.Quan = 1;
          roomInfo.Round = 0;
          hymjData.PlayerInfo.OnLine = true;
          this.initRoomPlayers([ hymjData.PlayerInfo ]);
          fun.db.setData("hymajiang", void 0);
          this.set(mjDataMgr.KEYS.ROOMID, fun.db.getData("RoomInfo").RoomId);
        } else {
          roomInfo.Quan = 1;
          roomInfo.Round = 0;
          this.initRoomPlayers(gameInfo.PlayersInfo);
          this.set(mjDataMgr.KEYS.ROOMID, roomInfo.RoomId);
        }
        this.set(mjDataMgr.KEYS.ROOMINFO, roomInfo);
        this.refreRoomCount();
      };
      this.refreRoomCount = function() {
        var roomInfo = this.get(mjDataMgr.KEYS.ROOMINFO);
        roomInfo.gameCountStr = "";
        var cfgData = this.data.createDate["GameNum" + roomInfo.SpendMethod].data[roomInfo.GameNum];
        cc.log("roomInfo ", roomInfo);
        cfgData = cfgData.slice(0, -1);
        1 == roomInfo.SpendMethod ? roomInfo.gameCountStr = roomInfo.Quan + "/" + cfgData + "<color=#B1C3C4>圈 </c>" + roomInfo.Round + "<color=#B1C3C4>局</c>" : roomInfo.gameCountStr = roomInfo.Round + "/" + cfgData + "<color=#B1C3C4>局 </c>";
      };
      this.getLocalPaiID = function(id) {
        var localID = this.data.TesuPai[id];
        if (!localID) {
          var serverType = Math.floor(id / 10);
          var num = id - 10 * serverType;
          var localType = ServerToLocalType[serverType];
          localID = 10 * num + localType;
        }
        return localID;
      };
      this.isBaiBan = function(id) {
        var localID = this.getLocalPaiID(id);
        return 14 == localID;
      };
    };
    var wlDataSys = function wlDataSys() {
      this.data = {
        CfgData: {
          gameName: "温岭麻将",
          zhuangPaiCount: 17,
          totalPai: 144,
          liujupai: 14,
          paiScale: .84,
          isPuhua: true,
          MagicName: "Caishen",
          Dialect: "wlmj/"
        },
        TesuPai: GameDefine.SPECIALPAIWL,
        createDate: GameDefine.CREATROOMWL
      };
      this.canQuickly = function(PaiID) {
        return true;
      };
      this.initRoomPlayers = function(playerArray) {
        var SelfIdx = 0;
        for (var i = 0; i < playerArray.length; i++) {
          var playerData = playerArray[i];
          if (!playerData) continue;
          playerData.isSelfPlayed = false;
          playerData.UserId == this.get(mjDataMgr.KEYS.UID) && (SelfIdx = i);
          var PlayerIdx = playerData.RoomOrder;
          playerData.PlayerIdx = PlayerIdx;
          this.setPlayerData(playerData, PlayerIdx);
        }
        var playerData = this.getPlayerData(SelfIdx);
        this.set(mjDataMgr.KEYS.SELFID, playerData.RoomOrder);
        this.refreshDeskType();
        playerData.isSelfPlayed = true;
      };
      this.setPlayerData = function(playerData, posIndex) {
        if (playerData) {
          cc.log("setPlayerData", playerData);
          var roomInfo = this.get(mjDataMgr.KEYS.ROOMINFO);
          playerData.Icon = playerData.HeadUrl || "";
          var isTruePlayer = true;
          playerData.name = playerData.UserName || playerData.Name;
          playerData.showName = isTruePlayer ? playerData.name : "游客" + playerData.UserId;
          playerData.showName = mjDataMgr.sliceName(playerData.showName);
          playerData.isTruePlayer = isTruePlayer;
          playerData.xdhs = playerData.Score || 0;
          playerData.Status = playerData.Ready ? GameDefine.PLAYER_READY.READY : GameDefine.PLAYER_READY.NO_READY;
        }
        var roomPlayers = this.get(mjDataMgr.KEYS.PLAYERS) || {};
        roomPlayers[posIndex] = playerData;
        this.set(mjDataMgr.KEYS.PLAYERS, roomPlayers);
      };
      this.isRoomMaster = function() {
        return this.get(mjDataMgr.KEYS.UID) == this.get(mjDataMgr.KEYS.ROOMINFO).Owner.UserId;
      };
      this.initRoomInfo = function() {
        var roomInfo = fun.db.getData("RoomInfo");
        var createDate = this.data.createDate;
        roomInfo.showList = [];
        roomInfo.showList.push(this.getCeateItem("MoShi", roomInfo));
        roomInfo.showList.push(this.getCeateItem("JuShu", roomInfo));
        roomInfo.showList.push(this.getCeateItem("ShengPaiTime", roomInfo));
        roomInfo.showList.push(this.getCeateItem("ZhiFu", roomInfo));
        roomInfo.showList.push(this.getCeateItem("WanFa", roomInfo));
        roomInfo.showList.push(this.getCeateItem("RenShu", roomInfo));
        roomInfo.showList.push(this.getCeateItem("BaoPai", roomInfo));
        roomInfo.GameNum = roomInfo.JuShu;
        roomInfo.Round = roomInfo.Round || 0;
        roomInfo.Quan = roomInfo.Quan || 0;
        var playInfoList = new Array(4);
        if (roomInfo.Players) roomInfo.Players.forEach(function(item, index) {
          playInfoList[item.RoomOrder] = item;
        }); else {
          var player = fun.db.getData("UserInfo");
          player.Status = GameDefine.PLAYER_READY.NO_READY;
          player.OnLine = true;
          player.RoomOrder = roomInfo.Owner.RoomOrder;
          player.HeadUrl = player.UserHeadUrl;
          player.Address = player.location;
          player.Sex = player.UserSex;
          playInfoList[roomInfo.Owner.RoomOrder] = player;
        }
        this.initRoomPlayers(playInfoList);
        this.set(mjDataMgr.KEYS.ROOMINFO, roomInfo);
        this.set(mjDataMgr.KEYS.ROOMID, roomInfo.RoomId);
        this.refreRoomCount();
      };
      this.refreRoomCount = function() {
        var roomInfo = this.get(mjDataMgr.KEYS.ROOMINFO);
        roomInfo.gameCountStr = "";
        var cfgData = this.data.createDate.JuShu.data[roomInfo.JuShu];
        cc.log("roomInfo ", roomInfo);
        cfgData = cfgData.slice(0, -1);
        roomInfo.JuShu > 20 ? roomInfo.gameCountStr = roomInfo.Round + "/" + cfgData + "<color=#B1C3C4>局</c>" : roomInfo.gameCountStr = roomInfo.Quan + "/" + cfgData + "<color=#B1C3C4>圈 </c>" + roomInfo.Round + "<color=#B1C3C4>局</c>";
      };
    };
    var scmjDataSys = function scmjDataSys() {
      this.data = {
        CfgData: {
          gameName: "四川麻将",
          zhuangPaiCount: 13,
          totalPai: 108,
          liujupai: 0,
          paiScale: .84,
          isPuhua: true,
          Dialect: "scmj/"
        },
        createDate: GameDefine.CREATROOMSC
      };
      this.initRoomPlayers = function(playerArray) {
        var SelfIdx = 0;
        for (var i = 0; i < playerArray.length; i++) {
          var playerData = playerArray[i];
          if (!playerData) continue;
          playerData.isSelfPlayed = false;
          playerData.UserId == this.get(mjDataMgr.KEYS.UID) && (SelfIdx = i);
          var PlayerIdx = playerData.RoomOrder;
          playerData.PlayerIdx = PlayerIdx;
          this.setPlayerData(playerData, PlayerIdx);
        }
        var playerData = this.getPlayerData(SelfIdx);
        this.set(mjDataMgr.KEYS.SELFID, playerData.RoomOrder);
        this.refreshDeskType();
        playerData.isSelfPlayed = true;
      };
      this.setPlayerData = function(playerData, posIndex) {
        if (playerData) {
          var roomInfo = this.get(mjDataMgr.KEYS.ROOMINFO);
          playerData.Icon = playerData.HeadUrl || "";
          var isTruePlayer = true;
          playerData.name = playerData.UserName || playerData.Name;
          playerData.showName = isTruePlayer ? playerData.name : "游客" + playerData.UserId;
          playerData.showName = mjDataMgr.sliceName(playerData.showName);
          playerData.isTruePlayer = isTruePlayer;
          playerData.xdhs = playerData.Score || 0;
          playerData.Status = playerData.Ready ? GameDefine.PLAYER_READY.READY : GameDefine.PLAYER_READY.NO_READY;
        }
        var roomPlayers = this.get(mjDataMgr.KEYS.PLAYERS) || {};
        roomPlayers[posIndex] = playerData;
        this.set(mjDataMgr.KEYS.PLAYERS, roomPlayers);
      };
      this.isRoomMaster = function() {
        return this.get(mjDataMgr.KEYS.UID) == this.get(mjDataMgr.KEYS.ROOMINFO).Owner.UserId;
      };
      this.initRoomInfo = function() {
        var roomInfo = fun.db.getData("RoomInfo");
        var createDate = this.data.createDate;
        cc.log("--- createDate: ", createDate);
        cc.log("--- createDate.MoShi: ", createDate.MoShi);
        var moshi = {
          name: createDate.MoShi.name,
          content: ""
        };
        var moShiL = "";
        for (var i = 0; i < roomInfo.MoShi.toString().length; ++i) {
          cc.log("--- i: ", i);
          moShiL += createDate.MoShi.data[i][roomInfo.MoShi.substr(i, 1)];
          cc.log("--- moshiL : ", moShiL);
        }
        cc.log("--- moshiL2 : ", moShiL);
        roomInfo.showList = [];
        roomInfo.showList.push(this.getCeateItem("WanFa", roomInfo));
        roomInfo.showList.push(this.getCeateItem("FengDing", roomInfo));
        roomInfo.showList.push(this.getCeateItem("DiFen", roomInfo));
        roomInfo.showList.push(this.getCeateItem("FangFei", roomInfo));
        roomInfo.showList.push(this.getCeateItem("GuiZe", roomInfo));
        cc.log("--- sxxsss : ", this.getCeateItem("JuShu", roomInfo));
        roomInfo.showList.push(this.getCeateItem("JuShu", roomInfo));
        roomInfo.DingWeiN = roomInfo.DingWei ? 1 : 0;
        roomInfo.showList.push(this.getCeateItem("DingWei", roomInfo));
        roomInfo.GameNum = roomInfo.JuShu;
        roomInfo.Round = roomInfo.Round || 0;
        var playInfoList = new Array(4);
        if (roomInfo.Players) roomInfo.Players.forEach(function(item, index) {
          playInfoList[item.RoomOrder] = item;
        }); else {
          var player = fun.db.getData("UserInfo");
          player.Status = GameDefine.PLAYER_READY.NO_READY;
          player.OnLine = true;
          player.RoomOrder = roomInfo.Owner;
          player.HeadUrl = player.UserHeadUrl;
          player.Address = player.location;
          player.Sex = player.UserSex;
          playInfoList[roomInfo.Owner] = player;
        }
        this.initRoomPlayers(playInfoList);
        this.set(mjDataMgr.KEYS.ROOMINFO, roomInfo);
        this.set(mjDataMgr.KEYS.ROOMID, roomInfo.RoomId);
        this.refreRoomCount();
      };
      this.refreRoomCount = function() {
        var roomInfo = this.get(mjDataMgr.KEYS.ROOMINFO);
        roomInfo.gameCountStr = "";
        var totalJu = roomInfo.JuShu;
        roomInfo.gameCountStr = roomInfo.Round + "/" + totalJu + "<color=#B1C3C4>局</c>";
      };
    };
    var hyReDataSys = function hyReDataSys() {
      var oldData = new mjDataSys();
      this.data = oldData.data;
      this.initRoomInfo = function() {
        var gameInfo = fun.db.getData("RoomInfo");
        var roomInfo = gameInfo.RoomInformation || {};
        roomInfo.showList = [];
        roomInfo.showList.push(this.getCeateItem("GameNum" + roomInfo.SpendMethod, roomInfo, roomInfo.GameNum));
        roomInfo.showList.push(this.getCeateItem("PaymentMethod", roomInfo));
        roomInfo.showList.push(this.getCeateItem("GshOp", roomInfo));
        roomInfo.gameCountStr = "";
        this.set(mjDataMgr.KEYS.ROOMINFO, roomInfo);
        this.set(mjDataMgr.KEYS.ROOMID, gameInfo.RoomId);
        this.initRoomPlayers(gameInfo);
      };
      this.initRoomPlayers = function(gameInfo) {
        var playerArray = gameInfo.players;
        var meIdx = gameInfo.meIdx;
        for (var i = 0; i < playerArray.length; i++) {
          var playerData = playerArray[i];
          playerData.isSelfPlayed = i == meIdx;
          if (0 == i) {
            this.set(mjDataMgr.KEYS.SELFID, meIdx);
            this.refreshDeskType();
          }
          this.setPlayerData(playerData, i);
        }
      };
      this.setPlayerData = function(playerData, posIndex) {
        playerData.Icon = playerData.icon;
        playerData.UserId = playerData.id;
        var isTruePlayer = true;
        playerData.showName = isTruePlayer ? playerData.name : "游客" + playerData.UserId;
        playerData.showName = mjDataMgr.sliceName(playerData.showName);
        playerData.isTruePlayer = isTruePlayer;
        playerData.OnLine = true;
        playerData.Sex = playerData.sex || playerData.Sex;
        playerData.xdhs = playerData.hushu;
        var roomPlayers = this.get(mjDataMgr.KEYS.PLAYERS) || {};
        roomPlayers[posIndex] = playerData;
        this.set(mjDataMgr.KEYS.PLAYERS, roomPlayers);
      };
      this.refreRoomCount = function() {
        var roomInfo = this.get(mjDataMgr.KEYS.ROOMINFO);
        roomInfo.gameCountStr = "";
      };
    };
    wlDataSys.prototype = new mjDataSys();
    hyReDataSys.prototype = new mjDataSys();
    scmjDataSys.prototype = new mjDataSys();
    var instance;
    var mjDataMgr = {
      init: function init() {
        var isReplay = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
        var dfDataList = {};
        dfDataList[gameConst.gameType.maJiangWenLing] = wlDataSys;
        dfDataList[gameConst.gameType.maJiangHuangYan] = isReplay ? hyReDataSys : mjDataSys;
        dfDataList[gameConst.gameType.scMahjong] = scmjDataSys;
        var roomInfo = fun.db.getData("RoomInfo");
        var curGameType = roomInfo.GameType;
        var curDataSys = dfDataList[curGameType];
        if (curDataSys) {
          instance = new curDataSys();
          instance.init();
        } else fun.log("mj", "mjDataMgr has no cur gameType : " + curGameType);
      },
      getInstance: function getInstance() {
        return instance;
      },
      KEYS: {
        UID: "UserID",
        SELFID: "SelfIdx",
        ROOMID: "RoomID",
        ROOMINFO: "RoomInfo",
        COORDS: "CoordList",
        POSIDS: "IDPosList",
        PLAYERS: "RoomPlayers",
        CFG: "GameCfg"
      },
      get: function get(key) {
        return this.getInstance().get(key);
      },
      set: function set(key, value) {
        this.getInstance().set(key, value);
      },
      sliceName: function sliceName() {
        var name = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
        name.length > 8 && (name = name.slice(0, 8));
        return name;
      }
    };
    module.exports = mjDataMgr;
    cc._RF.pop();
  }, {
    mjGameDefine: "mjGameDefine"
  } ],
  mjDpaoUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "264c4HsUKVIUa9Y9IB82pFV", "mjDpaoUI");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        spineNode: cc.Node
      },
      onLoad: function onLoad() {
        this.animManager = this.spineNode.getComponent(sp.Skeleton);
        var self = this;
        var completeCB = function completeCB() {
          self.onAnimCompleted();
          self.paijuUI.removeDachuPai(self.paiUdid);
        };
        this.animManager.setCompleteListener(completeCB);
      },
      onAnimCompleted: function onAnimCompleted() {
        var gameManager = require("mjGameManager");
        gameManager.checkResultAnim();
        this.node.removeFromParent();
      },
      show: function show(paijuUI, paiUdid) {
        this.paijuUI = paijuUI;
        this.paiUdid = paiUdid;
        this.animManager.setAnimation(0, "Huguang", false);
      }
    });
    cc._RF.pop();
  }, {
    mjGameManager: "mjGameManager"
  } ],
  mjEndUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "881eeAP2D1OFZJWSBDTOtop", "mjEndUI");
    "use strict";
    var GameDefine = require("mjGameDefine");
    var gameManager = require("mjGameManager");
    var mjDataMgr = require("mjDataMgr");
    var log = cc.log;
    var mjPai = require("mjPai");
    cc.Class({
      extends: cc.Component,
      properties: {
        endRoundN: cc.Node,
        singleRoundN: cc.Node,
        totalRoundN: cc.Node,
        paiPrefab: cc.Prefab,
        btnContiuneN: cc.Node,
        timeL: cc.Label,
        sRoomNumL: cc.Label,
        tRoomNumL: cc.Label,
        singleShareN: cc.Node,
        totalShareN: cc.Node,
        gameNameL: cc.Label
      },
      onLoad: function onLoad() {
        this.initDirectData();
        this.initSingleReport();
        this.initTotalReporte();
        this.endRoundN.active = false;
        this.singleRoundN.active = false;
        this.totalRoundN.active = false;
        var roomID = mjDataMgr.get(mjDataMgr.KEYS.ROOMID);
        this.sRoomNumL.string = roomID;
        this.tRoomNumL.string = roomID;
        this.gameNameL.string = mjDataMgr.get("CfgData").gameName;
        this.curPaiScale = .8;
        this.singleShareN.active = !(fun.gameCfg.releaseType === gameConst.releaseType.apple);
        this.totalShareN.active = !(fun.gameCfg.releaseType === gameConst.releaseType.apple);
        this.animation = this.endRoundN.getComponent(cc.Animation);
        this.clips = this.animation.getClips();
      },
      initDirectData: function initDirectData() {
        var DirectType = GameDefine.DIRECTION_TYPE;
        var directNodeName = {};
        directNodeName[0] = {
          nodeName: "dong",
          localText: "东风"
        };
        directNodeName[1] = {
          nodeName: "nan",
          localText: "南风"
        };
        directNodeName[2] = {
          nodeName: "xi",
          localText: "西风"
        };
        directNodeName[3] = {
          nodeName: "bei",
          localText: "北风"
        };
        this.directNodeName = directNodeName;
      },
      initTotalReporte: function initTotalReporte() {
        var self = this;
        this.totalRoundN.refreshData = function(data) {
          var timeL = self.totalRoundN.getChildByName("time").getChildByName("content").getComponent(cc.Label);
          timeL.string = fun.utils.getCurTime();
          for (var _i = 0; _i < 4; _i++) self.totalRoundN.getChildByName("player_" + _i).active = false;
          var nodeIndex = -1;
          for (var k in data.players) {
            nodeIndex += 1;
            var itemData = data.players[k];
            var playerNode = self.totalRoundN.getChildByName("player_" + nodeIndex);
            playerNode.active = true;
            var winerN = playerNode.getChildByName("winner");
            var normalN = playerNode.getChildByName("normal");
            var isSelfPlayed = itemData.playerData.isSelfPlayed;
            self.setPlayerInfo(winerN, itemData.playerData);
            self.setPlayerInfo(normalN, itemData.playerData);
            winerN.active = itemData.isBigWiner;
            normalN.active = !itemData.isBigWiner;
            var detailN = playerNode.getChildByName("detail");
            detailN.children.forEach(function(item, index) {
              item.active = index < itemData.detail.length;
            });
            for (var _k = 0; _k < itemData.detail.length; _k++) {
              var itemNode = detailN.getChildByName("item_" + _k);
              var nameL = itemNode.getChildByName("name").getComponent(cc.Label);
              var contentN = itemNode.getChildByName("content");
              var contentL = contentN.getComponent(cc.Label);
              nameL.string = itemData.detail[_k].name;
              contentL.string = itemData.detail[_k].value;
              contentN.color = isSelfPlayed ? new cc.Color(233, 39, 19) : new cc.Color(147, 50, 40);
            }
            var scoreN = playerNode.getChildByName("totalScore");
            var scoreAddNode = scoreN.getChildByName("score_add");
            var scoreRedNode = scoreN.getChildByName("score_red");
            scoreAddNode.active = itemData.hasWin;
            scoreRedNode.active = !itemData.hasWin;
            scoreAddNode.getComponent(cc.Label).string = itemData.winCount;
            scoreRedNode.getComponent(cc.Label).string = itemData.winCount;
            var cardN = playerNode.getChildByName("card");
            var leftL = cardN.getChildByName("left").getComponent(cc.Label);
            var speedL = cardN.getChildByName("speed").getComponent(cc.Label);
            leftL.string = itemData.Left;
            speedL.string = itemData.Spend;
          }
          self.resultVoice = data.meIsWiner ? "win.mp3" : "fail.mp3";
          self.checkEndMusic();
        };
      },
      initBtnContiune: function initBtnContiune() {
        var gameReplayMgr = require("mjReplayMgr");
        var disName = "继 续";
        this.isCanContinue() || (disName = "总结算");
        gameReplayMgr.isReplayPai() && (disName = "退 出");
        var content = this.btnContiuneN.getChildByName("content");
        content.getComponent(cc.Label).string = disName;
      },
      initSingleReport: function initSingleReport() {
        var self = this;
        this.singleRoundN.refreshData = function(data) {
          self.timeL.string = fun.utils.getCurTime();
          self.setSingleWin(self.singleRoundN, data);
          for (var k = 0; k < 4; k++) {
            var playerNode = self.singleRoundN.getChildByName("player_" + k);
            var itemData = data[k];
            playerNode.active = itemData;
            if (itemData) {
              var paiListN = playerNode.getChildByName("paiList");
              var fanPaiListN = playerNode.getChildByName("fanList");
              var dirNode = playerNode.getChildByName("direct");
              self.setPlayerInfo(playerNode, itemData.playerData, true);
              self.setDirectData(dirNode, itemData.player);
              self.setFanAndHuCount(playerNode, itemData);
              self.setHuCountData(playerNode, itemData);
              self.setPaiData(paiListN, itemData);
              self.setPaiFengScore(playerNode, itemData);
              self.setReportTag(playerNode, itemData);
              self.setFanPaiList(fanPaiListN, itemData);
              playerNode.getChildByName("byTips").active = itemData.isby;
            }
          }
        };
        this.singleRoundN.cleanData = function() {
          for (var _i2 = 0; _i2 < 4; _i2++) {
            var playerNode = self.singleRoundN.getChildByName("player_" + _i2);
            var paiListN = playerNode.getChildByName("paiList");
            paiListN.removeAllChildren();
          }
        };
      },
      setSingleWin: function setSingleWin(singleRoundN, data) {
        var titleN = singleRoundN.getChildByName("title");
        var winN = titleN.getChildByName("win");
        var faileN = titleN.getChildByName("fail");
        faileN.active = !data.meIsWiner;
        winN.active = data.meIsWiner;
      },
      setPlayerInfo: function setPlayerInfo(playerNode, playerData, hasMore) {
        var iconN = playerNode.getChildByName("icon");
        fun.utils.loadUrlRes(playerData.Icon, iconN);
        var nameN = playerNode.getChildByName("name");
        nameN.getComponent(cc.Label).string = playerData.showName;
        if (hasMore) {
          var name1N = playerNode.getChildByName("name1");
          name1N.getComponent(cc.Label).string = playerData.showName;
          nameN.active = !playerData.isSelfPlayed;
          name1N.active = playerData.isSelfPlayed;
          iconN.getChildByName("border").active = !playerData.isSelfPlayed;
          iconN.getChildByName("border1").active = playerData.isSelfPlayed;
        }
        var idN = playerNode.getChildByName("id");
        idN && (idN.getComponent(cc.Label).string = "ID:" + playerData.UserId);
        playerNode.getChildByName("bg1").active = playerData.isSelfPlayed;
        playerNode.getChildByName("bg2").active = !playerData.isSelfPlayed;
      },
      setReportTag: function setReportTag(playerNode, data) {
        var resultTagN = playerNode.getChildByName("resultTag");
        resultTagN.getChildByName("hu").active = data.ishu;
        resultTagN.getChildByName("lazi").active = data.islz;
        resultTagN.getChildByName("zm").active = data.iszm;
        resultTagN.getChildByName("by").active = data.isby;
        resultTagN.getChildByName("dp").active = !data.isby && data.isdp;
        playerNode.getChildByName("bgFaile").active = true;
        playerNode.getChildByName("bg_win").active = false;
      },
      setFanAndHuCount: function setFanAndHuCount(playerNode, itemData) {
        var fanNode = playerNode.getChildByName("fanCount");
        var huNode = playerNode.getChildByName("huCount");
        fanNode.getComponent(cc.RichText).string = itemData.fanData;
        huNode.getComponent(cc.RichText).string = itemData.huData;
      },
      setHuCountData: function setHuCountData(playerNode, data) {
        data = data || {};
        var jdHuNode = playerNode.getChildByName("totalCount");
        jdHuNode.active = !data.islz;
        jdHuNode.getComponent(cc.Label).string = data.jdhs;
        var xdHuNodeAdd = playerNode.getChildByName("score_add");
        var xdHuNodeRed = playerNode.getChildByName("score_red");
        var disXdhs = data.xdhs > 0 ? "+" + data.xdhs : data.xdhs;
        xdHuNodeAdd.active = data.xdhs > 0;
        xdHuNodeRed.active = !(data.xdhs > 0);
        xdHuNodeAdd.getComponent(cc.Label).string = disXdhs;
        xdHuNodeRed.getComponent(cc.Label).string = disXdhs;
      },
      setDirectData: function setDirectData(dirNode, player) {
        dirNode.children.forEach(function(item) {
          item.active = false;
        });
        var nodeName = this.directNodeName[player.dirIndex].nodeName;
        dirNode.getChildByName(nodeName).active = true;
      },
      setFanPaiList: function setFanPaiList(fanPaiListN, itemData) {
        fanPaiListN.active = void 0 != itemData.FanList;
        if (!itemData.FanList) return;
        var paiLen = 0;
        var pengGangHeng = 60 * mjDataMgr.get(mjDataMgr.KEYS.CFG).paiScale * this.curPaiScale;
        fanPaiListN.removeAllChildren();
        itemData.FanList.forEach(function(pai) {
          var paiNode = cc.instantiate(this.paiPrefab);
          paiNode.getComponent("mjPaiUI").refresh(pai);
          paiNode.setPosition(cc.p(paiLen, 0));
          paiNode.scale = paiNode.scale * this.curPaiScale;
          fanPaiListN.addChild(paiNode);
          paiLen += pengGangHeng;
        }.bind(this));
      },
      setPaiData: function setPaiData(paiListNode, data) {
        var player = data.player;
        var pengGangPai = player.paiDataObj.pengGangPai;
        var gameReplayMgr = require("mjReplayMgr");
        var shouPai = data.shouPai;
        var xiaType = GameDefine.DESKPOS_TYPE.XIA;
        var gangPaiList = pengGangPai.gang;
        var pengPaiList = pengGangPai.peng;
        var gangLen = 0;
        var pengLen = 0;
        var shouLen = 0;
        var pengGangHeng = 60 * mjDataMgr.get(mjDataMgr.KEYS.CFG).paiScale * this.curPaiScale;
        var pengGangZhi = 80 * mjDataMgr.get(mjDataMgr.KEYS.CFG).paiScale * this.curPaiScale;
        for (var gIndex = 0; gIndex < gangPaiList.length; gIndex++) {
          var gang = gangPaiList[gIndex];
          var curLen = 0;
          var roindex = 0;
          for (var _i3 = 0; _i3 < 4; _i3++) {
            var _pai = gang[_i3];
            var paiNode = cc.instantiate(this.paiPrefab);
            paiNode.getComponent("mjPaiUI").refresh(_pai);
            paiNode.scale = paiNode.scale * this.curPaiScale;
            if (_i3 < 3) {
              paiNode.setPosition(cc.p(gangLen + curLen, 0));
              roindex = _pai.showType == GameDefine.PAISHOWTYPE.PENGBY ? _i3 : roindex;
              var addLen = _pai.showType == GameDefine.PAISHOWTYPE.PENGBY ? pengGangZhi : pengGangHeng;
              curLen += addLen;
            }
            paiListNode.addChild(paiNode);
            if (3 == _i3) {
              var forPos = curLen - 2 * pengGangHeng;
              forPos = 0 != roindex ? forPos - pengGangZhi + pengGangHeng : forPos;
              paiNode.setPosition(cc.p(gangLen + forPos, 6));
            }
          }
          gangLen += curLen + 2;
        }
        gangLen = gangLen > 0 ? gangLen + 6 : gangLen;
        for (var _gIndex = 0; _gIndex < pengPaiList.length; _gIndex++) {
          var peng = pengPaiList[_gIndex];
          var _curLen = 0;
          for (var _i4 = 0; _i4 < peng.length; _i4++) {
            var _pai2 = peng[_i4];
            var paiNode = cc.instantiate(this.paiPrefab);
            paiNode.getComponent("mjPaiUI").refresh(_pai2);
            paiNode.setPosition(cc.p(gangLen + pengLen + _curLen, 0));
            paiListNode.addChild(paiNode);
            paiNode.scale = paiNode.scale * this.curPaiScale;
            var addLen = _pai2.showType == GameDefine.PAISHOWTYPE.PENGBY ? pengGangZhi : pengGangHeng;
            _curLen += addLen;
          }
          pengLen += _curLen + 4;
        }
        pengLen = pengLen > 0 ? pengLen + 10 : pengLen;
        for (var _i5 = 0; _i5 < shouPai.length; _i5++) {
          var pai = shouPai[_i5];
          var _paiNode = cc.instantiate(this.paiPrefab);
          _paiNode.getComponent("mjPaiUI").refresh(pai);
          _paiNode.setPosition(cc.p(gangLen + pengLen + shouLen, 0));
          paiListNode.addChild(_paiNode);
          _paiNode.scale = _paiNode.scale * this.curPaiScale;
          shouLen += pengGangHeng;
        }
        if (data.ishu || data.iszm) {
          var _paiNode2 = cc.instantiate(this.paiPrefab);
          var pai = mjPai.new(data.hp);
          pai.setShowType(GameDefine.PAISHOWTYPE.PENG);
          _paiNode2.getComponent("mjPaiUI").refresh(pai);
          _paiNode2.scale = this.curPaiScale;
          _paiNode2.setPosition(cc.p(gangLen + pengLen + shouLen + 20, 0));
          _paiNode2.getComponent("mjPaiUI").setPengBgColor(new cc.Color(255, 206, 206));
          paiListNode.addChild(_paiNode2);
        }
      },
      setPaiFengScore: function setPaiFengScore(playerNode, infoData) {
        var pIndex = infoData.player.dirIndex;
        var addColor = new cc.Color(180, 160, 122);
        var reduceColor = new cc.Color(180, 160, 122);
        var nodeIndex = 0;
        for (i = 0; i < 4; i++) {
          if (i == pIndex) continue;
          var fengNode = playerNode.getChildByName("feng_" + nodeIndex);
          var nameNode = fengNode.getChildByName("name");
          var scoreNode = fengNode.getChildByName("content");
          nodeIndex += 1;
          var score = infoData.Scores[i] || 0;
          nameNode.getComponent(cc.Label).string = this.directNodeName[i].localText;
          scoreNode.getComponent(cc.Label).string = score;
          scoreNode.color = score > 0 ? addColor : reduceColor;
        }
      },
      showSingleReport: function showSingleReport() {
        this.show();
        this.singleRoundN.active = true;
        require("Audio").playEffect("mahjong", "result.mp3");
      },
      show: function show() {
        this.endRoundN.active = true;
        this.animation.play(this.clips[0].name);
      },
      close: function close() {
        this.animation.play(this.clips[1].name).once("finished", function() {
          this.endRoundN.active = false;
          this.singleRoundN.active = false;
          this.totalRoundN.active = false;
        }, this);
      },
      hideSingleReport: function hideSingleReport() {
        this.singleRoundN.active = false;
        this.singleRoundN.cleanData();
      },
      showTotalReport: function showTotalReport() {
        this.show();
        this.hideSingleReport();
        this.totalRoundN.active = true;
        this.checkEndMusic();
      },
      checkEndMusic: function checkEndMusic() {
        if (!this.totalRoundN.active || !this.resultVoice) return;
        require("Audio").playEffect("mahjong", this.resultVoice);
        require("Audio").stopMusic();
      },
      setSingleReportData: function setSingleReportData(reportData, gameUI) {
        this.gameUI = gameUI;
        this.singleRoundN.refreshData(reportData);
        this.initBtnContiune();
      },
      setTotalReportData: function setTotalReportData(reportData, gameUI) {
        this.gameUI = gameUI;
        this.totalReportData = reportData;
        this.totalRoundN.refreshData(this.totalReportData);
      },
      onBtnClose: function onBtnClose() {
        this.endRoundN.active = false;
        this.singleRoundN.active = false;
        this.totalRoundN.active = false;
        this.resultVoice = void 0;
      },
      onBtnExitClicked: function onBtnExitClicked() {
        require("Audio").playEffect("hall", "button_nomal.mp3");
        gameManager.cleanPlayerPaiData();
        gameManager.exiteRoom();
      },
      onBtnSingleShare: function onBtnSingleShare() {
        require("Audio").playEffect("hall", "button_nomal.mp3");
        require("JSPhoneWeChat").WxShareFriendScreen();
      },
      onBtnTotalShare: function onBtnTotalShare() {
        require("Audio").playEffect("hall", "button_nomal.mp3");
        require("JSPhoneWeChat").WxShareFriendScreen();
      },
      onBtnContiuneClicked: function onBtnContiuneClicked() {
        var gameReplayMgr = require("mjReplayMgr");
        if (gameReplayMgr.isReplayPai()) {
          this.onBtnExitClicked();
          return;
        }
        require("Audio").playEffect("hall", "button_nomal.mp3");
        this.hideSingleReport();
        this.isCanContinue() ? this.gotoReadyUI() : this.showTotalReport();
      },
      gotoReadyUI: function gotoReadyUI() {
        gameManager.cleanPlayerPaiData();
        this.gameUI.lunpanN.active = false;
        this.gameUI.hideRoomOptBtn();
        this.gameUI.startReady();
        this.close();
      },
      isCanContinue: function isCanContinue() {
        return void 0 === this.totalReportData;
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio",
    JSPhoneWeChat: "JSPhoneWeChat",
    mjDataMgr: "mjDataMgr",
    mjGameDefine: "mjGameDefine",
    mjGameManager: "mjGameManager",
    mjPai: "mjPai",
    mjReplayMgr: "mjReplayMgr"
  } ],
  mjGameDefine: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "967f7NeH2BHk5akTrLFDNVD", "mjGameDefine");
    "use strict";
    var GameDefine = {};
    GameDefine.DESKPOS_TYPE = cc.Enum({
      SHANG: 0,
      ZUO: 1,
      XIA: 2,
      YOU: 3
    });
    GameDefine.PAISHOWTYPE = cc.Enum({
      GAI: -1,
      SHOU: -1,
      END: -1,
      PENG: -1,
      PENGBY: -1,
      SHOUGAI: -1
    });
    GameDefine.HUASE = {
      TONG: 1,
      WANG: 2,
      TIAO: 3,
      TESHU: 4
    };
    GameDefine.VOTESTATUS = {
      NOVOTE: 0,
      AGREE: 1,
      DISAGREE: 2
    };
    GameDefine.DIRECTION_TYPE = {
      DONG: 51,
      NAN: 52,
      XI: 53,
      BEI: 54
    };
    GameDefine.EATPAI_TYPE = {
      PuTongHu: 0,
      MingGang2: 1,
      PengPai: 2,
      ChiPai: 3,
      ZiMoHu: 4,
      AnGang: 5,
      MingGang1: 6,
      QiangGang: 7,
      GuoPai: 8,
      WaHua: 9
    };
    GameDefine.CHUPAIRESULT = {
      NOEAT: 2,
      EATED: 3
    };
    GameDefine.TURN_STATUS = {
      NOTURN: 0,
      TURNTOPLAY: 1,
      WAITOPT: 2
    };
    GameDefine.PLAYER_READY = {
      NO_CARD: 1,
      NO_READY: 2,
      READY: 3,
      OFFLINE: 4,
      DAPAIING: 5
    };
    GameDefine.SPECIALPAIHY = {
      41: 114,
      42: 64,
      43: 14,
      47: 104,
      51: 24,
      52: 34,
      53: 44,
      54: 54
    };
    GameDefine.SPECIALPAIWL = {
      41: 24,
      42: 34,
      43: 44,
      44: 54,
      45: 114,
      46: 64,
      47: 14,
      51: 144,
      52: 134,
      53: 124,
      54: 154,
      55: 74,
      56: 84,
      57: 94,
      58: 104
    };
    GameDefine.SP_PAIVOICE = {
      114: "hongzhong",
      64: "facai",
      14: "baiban",
      24: "dongfeng",
      34: "nanfeng",
      44: "xifeng",
      54: "beifeng"
    };
    GameDefine.CREATROOMWL = {
      MoShi: {
        name: "模式",
        data: {
          1: "平搓",
          2: "庄家翻倍",
          3: "闲家减半"
        }
      },
      RenShu: {
        name: "人数",
        data: {
          3: "2人",
          2: "3人",
          1: "4人"
        }
      },
      BaoPai: {
        name: "包牌",
        data: {
          true: "要包牌",
          false: "不包牌"
        }
      },
      ShengPaiTime: {
        name: "生牌阶段",
        data: {
          1: "先打熟张",
          2: "先打财神"
        }
      },
      JuShu: {
        name: "局数",
        data: {
          11: "1圈",
          12: "2圈",
          14: "4圈",
          21: "4局",
          22: "8局",
          23: "12局",
          24: "16局",
          25: "20局",
          26: "24局",
          27: "28局",
          28: "32局"
        }
      },
      ZhiFu: {
        name: "支付方式",
        data: {
          1: "房主支付",
          2: "平均支付",
          3: "冠军支付"
        }
      },
      WanFa: {
        name: "玩法",
        data: {
          1: "小闹",
          2: "大闹",
          3: "全闹",
          4: "常规无花"
        }
      },
      explain: {
        ZhiFu1: "牌局结束后,由房主全额支付房费",
        ZhiFu2: "牌局结束后,由玩家平均分摊房费",
        ZhiFu3: "牌局结束后,由得分最高的玩家支付房费"
      }
    };
    GameDefine.CREATROOMHY = {
      GameNum1: {
        name: "圈数",
        data: {
          1: "1圈",
          2: "2圈",
          4: "4圈"
        }
      },
      GameNum2: {
        name: "局数",
        data: {
          4: "4局",
          8: "8局",
          16: "16局"
        }
      },
      PaymentMethod: {
        name: "支付方式",
        data: {
          1: "房主支付",
          2: "平均支付",
          3: "冠军支付"
        }
      },
      GshOp: {
        name: "玩法",
        data: {
          1: "杠上花算4胡",
          2: "杠上花无胡数"
        }
      },
      NoticeType: {
        name: "提示",
        data: {
          1: "智能提示",
          2: "专业模式"
        }
      },
      explain: {
        PaymentMethod1: "牌局结束后,由房主全额支付房费",
        PaymentMethod2: "牌局结束后,由玩家平均分摊房费",
        PaymentMethod3: "牌局结束后,由得分最高的玩家支付房费"
      }
    };
    GameDefine.CREATROOMSC = {
      WanFa: {
        name: "玩法",
        data: {
          1: "血战",
          2: "血流"
        }
      },
      MoShi: {
        name: "模式",
        data: [ [ "自摸加倍", "自摸不加倍", "自摸加底" ], [ "点杠华当自摸", "点杠花当点炮" ], [ "经典三张", "不换三张", "任意三张" ] ]
      },
      FengDing: {
        name: "封顶",
        data: {
          3: "3番",
          4: "4番",
          5: "5番",
          0: "不封顶"
        }
      },
      DiFen: {
        name: "底分",
        data: {
          1: "1分",
          2: "2分",
          5: "5分",
          10: "10分"
        }
      },
      FangFei: {
        name: "房费",
        data: {
          1: "房主支付",
          2: "赢家支付",
          3: "平摊支付"
        }
      },
      GuiZe: {
        name: "规则",
        data: {
          1: "呼叫转移",
          2: "带幺九",
          3: "断幺九",
          4: "门前清",
          5: "天地胡",
          6: "海底捞",
          7: "将对"
        }
      },
      JuShu: {
        name: "局数",
        data: {
          4: "4局",
          8: "8局",
          16: "16局",
          32: "32局"
        }
      },
      DingWei: {
        name: "定位",
        data: {
          0: "未开启定位",
          1: "已开启定位"
        }
      }
    };
    GameDefine.HSTEXT = {
      dh: {
        name: "底胡",
        sort: 15,
        hucount: 4
      },
      dzb: {
        name: "门风对",
        sort: 14,
        hucount: 2
      },
      dzz: {
        name: "字牌对",
        sort: 13,
        hucount: 2
      },
      yk: {
        name: "硬张刻",
        sort: 12,
        hucount: 4
      },
      rk: {
        name: "软张刻",
        sort: 11,
        hucount: 2
      },
      yak: {
        name: "硬张暗刻",
        sort: 10,
        hucount: 8
      },
      rak: {
        name: "软张暗刻",
        sort: 9,
        hucount: 4
      },
      ymg: {
        name: "硬张明杠",
        sort: 8,
        hucount: 16
      },
      rmg: {
        name: "软张明杠",
        sort: 7,
        hucount: 8
      },
      yag: {
        name: "硬张暗杠",
        sort: 6,
        hucount: 32
      },
      rag: {
        name: "软张暗杠",
        sort: 5,
        hucount: 16
      },
      zm: {
        name: "自摸",
        sort: 4,
        hucount: 2
      },
      qd: {
        name: "嵌档",
        sort: 3,
        hucount: 2
      },
      ddh: {
        name: "对对胡",
        sort: 2,
        hucount: 4
      },
      gsh: {
        name: "杠上花",
        sort: 1,
        hucount: 4
      }
    };
    GameDefine.FSTEXT = {
      zfbk: {
        name: "字牌刻",
        sort: 1,
        fcount: 1
      },
      zfbg: {
        name: "字牌杠",
        sort: 1,
        fcount: 1
      },
      sfk: {
        name: "门风刻",
        sort: 1,
        fcount: 1
      },
      sfg: {
        name: "门风杠",
        sort: 1,
        fcount: 1
      },
      wcs: {
        name: "无财神",
        sort: 1,
        fcount: 2
      },
      cshy: {
        name: "财神还原",
        sort: 1,
        fcount: 1
      },
      hys: {
        name: "混一色",
        sort: 1,
        fcount: 1
      },
      qys: {
        name: "清一色",
        sort: 1,
        fcount: 2
      }
    };
    GameDefine.TOTALREPORT = [ "自摸次数:", "胡牌次数:", "辣子次数:", "包圆次数:", "天胡次数:", "地胡次数:", "总战绩:" ];
    GameDefine.CHATCOMMONTEXT = [ {
      id: 201,
      content: "快点嘛！又少打两把了！"
    }, {
      id: 202,
      content: "稍等一下，我想想打哪张牌！"
    }, {
      id: 203,
      content: "你们小心点，我听牌了！"
    }, {
      id: 204,
      content: "不要走！决战到天亮！"
    }, {
      id: 205,
      content: "你这牌打得也太好了！"
    }, {
      id: 206,
      content: "等下，我上个厕所！"
    }, {
      id: 207,
      content: "好久都没胡过牌了！"
    }, {
      id: 208,
      content: "今天的手气太差了，输惨了！"
    } ];
    GameDefine.CHATCOMMONEMOJI = [ {
      id: 101,
      content: "bishi"
    }, {
      id: 102,
      content: "fadai"
    }, {
      id: 103,
      content: "han"
    }, {
      id: 104,
      content: "jianxiao"
    }, {
      id: 105,
      content: "ku"
    }, {
      id: 106,
      content: "kubile"
    }, {
      id: 107,
      content: "kuxiao"
    }, {
      id: 108,
      content: "shengqi"
    }, {
      id: 109,
      content: "tu"
    }, {
      id: 110,
      content: "wabishi"
    }, {
      id: 111,
      content: "yun"
    }, {
      id: 112,
      content: "zan"
    } ];
    GameDefine.CHATINTERACT = [ {
      id: 1,
      nodeName: "liwu2",
      animaName: "Hua"
    }, {
      id: 2,
      nodeName: "liwu1",
      animaName: "Jidan"
    }, {
      id: 3,
      nodeName: "liwu1",
      animaName: "Tuoxie"
    }, {
      id: 4,
      nodeName: "liwu2",
      animaName: "Wen"
    } ];
    GameDefine.CHATTYPE = {
      EMOJI: 1,
      TEXT: 2,
      VOICE: 3,
      COORD: 4,
      INTERACT: 5
    };
    GameDefine.LOGINTYPE = {
      WX: 1,
      YK: 2,
      ID: 3
    };
    GameDefine.GAMEVOICELANCN = {
      mandarin: "普通话",
      hyDialect: "黄岩方言"
    };
    GameDefine.CAISHENCOLOR = new cc.Color(155, 255, 131);
    GameDefine.WHITECOLOR = new cc.Color(255, 255, 255);
    GameDefine.REPLAYOPT = {
      MP: 1,
      GMP: 2,
      CP: 3,
      CHI: 4,
      PENG: 5,
      MGT: 6,
      PTH: 7,
      MGO: 8,
      AG: 9,
      ZM: 10,
      QGH: 11,
      GCHZ: 12,
      GMPZ: 13,
      GQQH: 14
    };
    GameDefine.WLRETCODE = {
      1: "服务器忙",
      2: "非法游戏类型",
      3: "登录失败",
      4: "使用第三方登录",
      5: "非法第三方平台",
      6: "重复登录",
      7: "非法认证名",
      8: "非法认证号",
      9: "认证失败",
      10: "服务未开启",
      11: "服务停止",
      12: "非法房间号",
      13: "房间未找到",
      14: "已在房间中",
      15: "已在另一个房",
      16: "未开启ＧＰＳ",
      17: "此房间人数已满",
      18: "房间选项非法",
      19: "温岭麻将房卡不足,请充值",
      20: "重试",
      21: "房间正在解散",
      22: "未在该房间中",
      23: "发起投票失败",
      24: "投票失败",
      25: "已在房间中",
      26: "非法操作",
      27: "打出牌不能为财神",
      28: "未开启定位",
      29: "非法吃牌组合",
      30: "打出牌不能为特殊牌"
    };
    GameDefine.HYRETCODE = {
      1: "服务器忙",
      2: "非法游戏类型",
      3: "登录失败",
      4: "使用第三方登录",
      5: "非法第三方平台",
      6: "重复登录",
      7: "非法认证名",
      8: "非法认证号",
      9: "认证失败",
      10: "服务未开启",
      11: "服务停止",
      12: "无效房间id",
      13: "房间找不到",
      14: "已在房间中",
      15: "已在别的房间中",
      16: "未开启ＧＰＳ",
      17: "此房间人数已满",
      18: "房间选项有误",
      19: "黄岩麻将房卡不足,请充值",
      20: "未开启定位"
    };
    GameDefine.SCRETCODE = {
      1: "服务器忙",
      2: "非法游戏类型",
      3: "登录失败",
      4: "使用第三方登录",
      5: "非法第三方平台",
      6: "重复登录",
      7: "非法认证名",
      8: "非法认证号",
      9: "认证失败",
      10: "服务未开启",
      11: "服务停止",
      12: "非法房间号",
      13: "房间未找到",
      14: "已在房间中",
      15: "已在另一个房",
      16: "未开启ＧＰＳ",
      17: "此房间人数已满",
      18: "房间选项非法",
      19: "四川麻将房卡不足,请充值",
      20: "重试",
      21: "房间正在解散",
      22: "未在该房间中",
      23: "发起投票失败",
      24: "投票失败",
      25: "已在房间中",
      26: "非法操作",
      28: "未开启定位",
      29: "非法吃牌组合",
      30: "打出牌不能为特殊牌"
    };
    module.exports = GameDefine;
    cc._RF.pop();
  }, {} ],
  mjGameManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ff61bGIi9tGsaKbd6JI2r/u", "mjGameManager");
    "use strict";
    var GameDefine = require("mjGameDefine");
    var ReconnectMgr = require("mjReconnectMgr");
    var mjNetMgr = require("mjNetMgr");
    var mjDataMgr = require("mjDataMgr");
    var log = cc.log;
    var GameManager = {};
    GameManager.initGame = function(playerDeskList, gameUICB) {
      this.gameUICB = gameUICB;
      this.cleanData();
      this.leftPai = mjDataMgr.get(mjDataMgr.KEYS.CFG).totalPai;
      this.initGameCount();
      this.initPlayerData(playerDeskList);
      this.initMessage();
      this.initPhoneStatus();
      this.addDt = 0;
      this.faPaiPer = .2;
      this.inFaPai = false;
      this.reconnetCount = 0;
      this.setBtnBackVisi(false);
    };
    GameManager.reSetPlayerStatus = function() {
      var pos = this.ReconnentData.ChuPlayer;
      var deskType = mjDataMgr.get(mjDataMgr.KEYS.POSIDS)[pos];
      var player = this.playerList[pos];
      this.curPlayer = player;
      this.daPaiPlayer = player;
      this.gameUICB.setCurPaiDirection(player.getDirection());
      this.lastChuPaiDir = deskType;
      this.curPlayer = player;
      this.lastChuPaiID = this.ReconnentData.CurrentChuTile;
      player.setGameStatus(this.ReconnentData.ChuStatus);
      player.reSetDapaiData(this.ReconnentData.CurrentChuTile);
    };
    GameManager.initGameCount = function() {
      mjDataMgr.getInstance().refreRoomCount();
      var roomInfo = mjDataMgr.get(mjDataMgr.KEYS.ROOMINFO);
      this.gameUICB.setGameCount(roomInfo.gameCountStr);
    };
    GameManager.onDestroy = function() {
      this.cleanData();
      this.cleanMessage();
    };
    GameManager.onNetClose = function() {};
    GameManager.onNetOpen = function() {
      this.reconnetCount = 0;
      var ReconnectMgr = require("mjReconnectMgr");
      ReconnectMgr.reConnectInGameUI();
    };
    GameManager.initMessage = function() {
      this.needNetWork();
      mjNetMgr.getIns().addGameNet(mjNetMgr.KEYS.GAME, this);
    };
    GameManager.cleanMessage = function() {
      mjNetMgr.getIns().rmNet(mjNetMgr.KEYS.GAME);
    };
    GameManager.initPhoneStatus = function() {};
    GameManager.initRoundData = function() {
      this.faPaiAnimEndList = [ {
        f: this.reCheckBuHua,
        stop: false
      } ];
      this.isRoundIsOver = false;
      this.daPaiPlayer = void 0;
      this.inFaPai = false;
      this.totalReduce = 0;
      this.isShengPai = false;
      this.refreResidue(0);
      this.isPlaying = true;
      this.ShowHuaList = [];
      this.ShowBuHua = {};
      this.leftPai = mjDataMgr.get(mjDataMgr.KEYS.CFG).totalPai;
      this.bindUserDirection();
      this.gameUICB.gameStart();
      this.liujupaiCount = mjDataMgr.get(mjDataMgr.KEYS.CFG).liujupai;
      this.setBtnBackVisi(true);
      for (var k in this.playerDeskList) this.playerDeskList[k].getComponent("mjPlayerUI").hideWaitName();
      for (var i in this.playerList) {
        var player = this.playerList[i];
        player.initRound();
        player.initPlayerStatus();
      }
      this.initGameCount();
    };
    GameManager.newRound = function(paiData) {
      this.isStartAnim = true;
      this.initRoundData();
      for (var i in this.playerList) {
        var player = this.playerList[i];
        player.setShouPai(this.startPaiData[i]);
        player.onFaPaiStart();
      }
      this.gameUICB.newRound({
        saizi: this.saiziData
      });
    };
    GameManager.onFaPaiAnimEnd = function() {
      this.gameUICB.setCaiShenPai(this.CaiShenPai);
      this.gameUICB.showCaiShenAnim();
    };
    GameManager.onKaishiAnimEnd = function() {
      this.isStartAnim = false;
      this.gameUICB.hidePaiHitzone();
      if (this.startOptData) {
        this.showEatUI(this.startOptData);
        this.startOptData = void 0;
      }
      var meIndex = mjDataMgr.get(mjDataMgr.KEYS.SELFID);
      var mePlayer = this.playerList[meIndex];
      mePlayer.isZhuangJia() && this.gameUICB.showChupaiTips();
      for (var i in this.playerList) {
        var player = this.playerList[i];
        player.faPaiEnd();
      }
      this.turnToNextPlayer(this.curPlayer);
      this.daPaiPlayer = this.curPlayer;
      for (var _i = 0; _i < this.faPaiAnimEndList.length; _i++) {
        var excFucn = this.faPaiAnimEndList[_i].f;
        excFucn.call(this);
        if (this.faPaiAnimEndList[_i].stop) break;
      }
      this.faPaiAnimEndList = [];
    };
    GameManager.reCheckBuHua = function() {
      if (this.ShowHuaList.length > 0) {
        var reBuhuaUpdate = function reBuhuaUpdate() {
          if (this.ShowHuaList.length > 0) {
            var huaData = this.ShowHuaList.shift();
            huaData.player.showPaiOnBegin(huaData);
            this.refreResidue(huaData.showData.length);
          } else clearInterval(this.ShowHuaTag);
        };
        this.ShowHuaTag = setInterval(reBuhuaUpdate.bind(this), 800);
      }
    };
    GameManager.cleanData = function() {
      this.isVoteOut = false;
      this.isPlaying = false;
      this.gameUICB.hdieReduceNode();
      this.cleanRoundData();
    };
    GameManager.cleanRoundData = function() {
      this.fapaiMo = void 0;
      this.startPaiData = void 0;
      this.meDirection = void 0;
      this.CaiShenPai = void 0;
      this.curChuPaiUdid = void 0;
      this.lastChuPaiDir = void 0;
    };
    GameManager.cleanPlayerPaiData = function() {
      for (var k in this.playerList) {
        var player = this.playerList[k];
        player.cleanPaiData();
      }
      this.cleanRoundData();
    };
    GameManager.bindUserDirection = function() {
      var myDirection = this.meDirection;
      var DirectType = GameDefine.DIRECTION_TYPE;
      var directionList = [];
      directionList.push(DirectType.NAN);
      directionList.push(DirectType.XI);
      directionList.push(DirectType.BEI);
      directionList.push(DirectType.DONG);
      var meDirIndex = directionList.findIndex(function(x) {
        return x == myDirection;
      });
      this.gameUICB.roDirectionNode(90 * meDirIndex);
      var deskType = GameDefine.DESKPOS_TYPE;
      this.saiziData = {};
      this.saiziData.playCount = mjDataMgr.get(mjDataMgr.KEYS.ROOMINFO).Round;
      var meDeskPos = mjDataMgr.get(mjDataMgr.KEYS.SELFID);
      for (var i = 0; i < 4; i++) {
        var destPos = (meDeskPos + i) % 4;
        var dirIndex = (meDirIndex + i) % 4;
        var direction = directionList[dirIndex];
        var player = this.playerList[destPos];
        if (player) {
          player.setDirection(direction);
          this.saiziData[direction] = player;
        }
      }
      cc.log(this.saiziData, " saizi data");
      this.gameUICB.setCurPaiDirection(DirectType.DONG);
      this.zhuangIdx = parseInt(this.saiziData[DirectType.DONG].PlayerIdx);
      this.curPlayer = this.playerList[this.zhuangIdx];
    };
    GameManager.initDirectionNodeList = function() {
      var DirectionType = GameDefine.DIRECTION_TYPE;
      var nodeList = {};
      nodeList[DirectionType.DONG] = this.gameUICB.getCurDirectionN("dong");
      nodeList[DirectionType.XI] = this.gameUICB.getCurDirectionN("xi");
      nodeList[DirectionType.NAN] = this.gameUICB.getCurDirectionN("nan");
      nodeList[DirectionType.BEI] = this.gameUICB.getCurDirectionN("bei");
      this.directionNodeList = nodeList;
    };
    GameManager.sortGroupPai = function(groupPai) {
      var self = this;
      groupPai.sort(function(a, b) {
        var aSort = self.getSortId(a);
        var bSort = self.getSortId(b);
        return aSort - bSort;
      });
      return groupPai;
    };
    GameManager.ShowPaiNotify = function(data) {
      var player = this.getPlayerByPaiData(data);
      if (this.isStartAnim) {
        var fIndex = this.ShowHuaList.findIndex(function(item) {
          return item.player == player;
        });
        -1 != fIndex ? this.ShowHuaList[fIndex].showData.push(data) : this.ShowHuaList.push({
          player: player,
          showData: [ data ]
        });
      } else {
        player.showPai(data.Card);
        this.refreResidue(1);
        player.showBuHuaAnim();
      }
    };
    GameManager.BuPaiNotify = function(data) {
      var player = this.getPlayerByPaiData(data);
      if (this.isStartAnim) {
        var fIndex = this.ShowHuaList.findIndex(function(item) {
          return item.player == player;
        });
        this.ShowHuaList[fIndex].buData = this.ShowHuaList[fIndex].buData || [];
        this.ShowHuaList[fIndex].buData.push(data);
        return;
      }
      player.buPai(data.Card);
    };
    GameManager.getSortId = function(id) {
      var sortId = mjDataMgr.getInstance().isBaiBan(id) ? this.CaiShenPai[0] : id;
      sortId = this.isCaiShenPai(id).isMagic ? -1 : sortId;
      return sortId;
    };
    GameManager.creatPlayer = function(playerIndx) {
      var playerSys = require("mjPlayer");
      var deskType = mjDataMgr.get(mjDataMgr.KEYS.POSIDS)[playerIndx];
      var playerNode = this.playerDeskList[deskType];
      var player = playerSys.new();
      player.init(playerNode, deskType, this.gameUICB);
      player.setPlayerIdx(playerIndx);
      player.refreshData();
      player.initPlayerStatus();
      this.playerList[playerIndx] = player;
    };
    GameManager.initPlayerData = function(playerDeskList) {
      this.playerList = {};
      this.playerDeskList = playerDeskList;
      var players = mjDataMgr.get(mjDataMgr.KEYS.PLAYERS);
      for (var idx in players) this.creatPlayer(idx);
    };
    GameManager.onUserEnterRoom = function(playerInfo, PlayerIdx) {
      cc.YL.info("玩家进入房间onUserEnterRoom");
      playerInfo.OnLine = true;
      mjDataMgr.getInstance().setPlayerData(playerInfo, PlayerIdx);
      this.creatPlayer(PlayerIdx);
    };
    GameManager.onRingAddNum = function(data) {
      mjDataMgr.get(mjDataMgr.KEYS.ROOMINFO).Quan += 1;
      this.initGameCount();
    };
    GameManager.DissolveRoomNotice = function() {
      if (mjDataMgr.get(mjDataMgr.KEYS.ROOMINFO).Round > 0) {
        this.gameUICB.showTotalReport();
        return;
      }
      var content = "房间已经被解散";
      fun.event.dispatch("MinSingleButtonPop", {
        contentStr: content,
        okCb: this.exiteRoom,
        hideCloseBtn: true
      });
    };
    GameManager.exitRoomNoticeIdx = function(data) {
      var PlayerIdx = data.PlayerIdx;
      mjDataMgr.getInstance().setPlayerData(void 0, PlayerIdx);
      var player = this.playerList[PlayerIdx];
      player.refreshData();
      delete this.playerList[player.PlayerIdx];
    };
    GameManager.exitRoomNoticeUserid = function(data) {
      cc.log("-GameManager.exitRoomNoticeUserid ---", data);
      var player = this.getplayerByUserID(data.UserId);
      mjDataMgr.getInstance().setPlayerData(void 0, player.PlayerIdx);
      player.refreshData();
      delete this.playerList[player.PlayerIdx];
    };
    GameManager.onDisbandRoomVoteIn = function(data) {
      this.gameUICB.updateVotingData(data);
    };
    GameManager.onDisbandRoomResultIn = function(data) {
      data.Disbanded && this.DissolveRoomNotice();
      this.gameUICB.removeVotingPop();
    };
    GameManager.prepareNoticeMessage = function(data) {
      var player = this.getPlayerByPaiData(data);
      mjDataMgr.getInstance().getPlayerData(player.PlayerIdx).Status = GameDefine.PLAYER_READY.READY;
      player.initPlayerStatus();
      fun.event.dispatch("selfReady", {});
    };
    GameManager.isCaiShenPai = function(paiID) {
      var isMagicPai = this.CaiShenPai.findIndex(function(id) {
        return id == paiID;
      }) > -1;
      var roomInfo = mjDataMgr.get(mjDataMgr.KEYS.ROOMINFO);
      var isWL = false;
      var caishenInfo = {
        isMagic: isMagicPai
      };
      caishenInfo.isCaiShen = isMagicPai && !isWL;
      caishenInfo.isBaiDa = isMagicPai && isWL;
      return caishenInfo;
    };
    GameManager.initReplayPai = function(paiData) {
      this.startPaiData = paiData;
    };
    GameManager.initStartPai = function(paiData) {
      var totalList = paiData.TileCount;
      this.startPaiData = [];
      var meDeskIndex = mjDataMgr.getInstance().get(mjDataMgr.KEYS.SELFID);
      for (var i in this.playerList) this.startPaiData[i] = new Array(totalList[i]);
      this.startPaiData[meDeskIndex] = paiData.Tiles;
    };
    GameManager.zhuangNotify = function(data) {
      this.zhuangIdx = parseInt(this.getplayerByUserID(data.UserId).PlayerIdx);
      var meIdx = mjDataMgr.get(mjDataMgr.KEYS.SELFID);
      var dirList = [ 51, 52, 53, 54 ];
      for (var i = 0; i < dirList.length; i++) {
        var tempIdx = (i + this.zhuangIdx) % dirList.length;
        if (tempIdx == meIdx) {
          this.meDirection = dirList[i];
          break;
        }
      }
      var roomInfo = mjDataMgr.get(mjDataMgr.KEYS.ROOMINFO);
      roomInfo.Quan = data.Quan;
      roomInfo.Round = data.Round;
      this.initGameCount();
    };
    GameManager.faPaiNoAnim = function(isJustBegin) {
      var fapaiCount = 0;
      for (var i in this.playerList) {
        var player = this.playerList[i];
        fapaiCount += this.startPaiData[i].length;
        player.setShouPai(this.startPaiData[i]);
        player.faPaiEnd();
        player.isXiaDesk() && isJustBegin && player.isZhuangJia() && this.gameUICB.showChupaiTips();
      }
      fapaiCount += 1;
      this.refreResidue(fapaiCount);
    };
    GameManager.update = function(dt) {
      if (!this.inFaPai) return;
      this.addDt += dt;
      if (this.addDt > this.faPaiPer) {
        this.addDt -= this.faPaiPer;
        this.nextFaPai();
      }
    };
    GameManager.faPaiWithAnim = function() {
      this.inFaPai = true;
      this.faPaiPerCount = 4;
      this.addDt = 0;
      this.lastFaPaiPlayer = void 0;
      this.fapaiPIndex = 0;
      this.playerArray = [];
      for (var k in this.playerList) this.playerArray.push(this.playerList[k]);
      this.gameUICB.showPaiHitzone();
      var maxLen = 0;
      this.startPaiData.forEach(function(item, index) {
        if (item.length > maxLen) {
          this.fapaiPIndex = index;
          maxLen = item.length;
        }
      }.bind(this));
      this.nextFaPai();
    };
    GameManager.faPaiEnd = function() {
      var gaiTime = .6;
      var self = this;
      for (var i in this.playerList) {
        var player = this.playerList[i];
        player.gaiAllPai();
      }
      setTimeout(function() {
        for (var _i2 in self.playerList) {
          var player = self.playerList[_i2];
          player.uprightPai();
        }
      }, 1e3 * gaiTime);
      this.refreResidue(1);
      this.inFaPai = false;
      setTimeout(function() {
        self.onFaPaiAnimEnd();
      }, 1e3);
    };
    GameManager.nextFaPai = function() {
      if (!this.startPaiData) return;
      var playerIndx = this.playerArray[this.fapaiPIndex].PlayerIdx;
      this.fapaiPIndex = (this.fapaiPIndex + 1) % this.playerArray.length;
      this.faPaiPerCount = this.startPaiData[playerIndx].length > 4 ? 4 : this.startPaiData[playerIndx].length;
      if (this.faPaiPerCount < 1) {
        this.faPaiEnd();
        return;
      }
      require("Audio").playEffect("mahjong", "mahjong.mp3");
      var paiData = [];
      for (var i = 0; i < this.faPaiPerCount; i++) {
        var pai = this.startPaiData[playerIndx].pop();
        paiData.push(pai);
      }
      this.refreResidue(this.faPaiPerCount);
      var player = this.playerList[playerIndx];
      player.faPai(paiData, true);
      this.lastFaPaiPlayer && this.lastFaPaiPlayer.uprightPai();
      this.lastFaPaiPlayer = player;
    };
    GameManager.refreResidue = function(reduce) {
      this.totalReduce += reduce;
      this.leftPai = mjDataMgr.get(mjDataMgr.KEYS.CFG).totalPai - this.totalReduce;
      this.leftPai < 0 && fun.net.close();
      this.gameUICB.refreResidue(this.leftPai);
    };
    GameManager.refrePlayerXdhs = function(ReportData) {
      cc.log(ReportData, "ReportData");
      var mjDataMgr = require("mjDataMgr");
      var xdhsList = [ 0, 0, 0, 0 ];
      fun.utils.forEach(ReportData, function(item) {
        for (var i = 0; i < item.length; i++) xdhsList[i] += item[i].xdhs;
      });
      for (var i in this.playerList) if (mjDataMgr.getInstance().getPlayerData(i)) {
        mjDataMgr.getInstance().getPlayerData(i).xdhs = xdhsList[i] || 0;
        var player = this.playerList[i];
        player.refreshData();
      }
    };
    GameManager.showChoosePai = function(paiID) {
      for (var i in this.playerList) {
        var player = this.playerList[i];
        player.showSamePaiTips(paiID);
      }
    };
    GameManager.showLiuJuAnim = function() {
      require("Audio").playEffect("mahjong", "result_null.mp3");
      this.gameUICB.showLiujuEffect();
    };
    GameManager.reSetResidue = function() {
      this.leftPai = this.ReconnentData.reSetLeft;
      this.totalReduce = mjDataMgr.get(mjDataMgr.KEYS.CFG).totalPai - this.leftPai;
      this.liujupaiCount = this.ReconnentData.weiCount;
      this.gameUICB.refreResidue(this.leftPai);
    };
    GameManager.reSetPengGangPai = function() {
      var gangPai = this.ReconnentData.gangPai;
      var pengPai = this.ReconnentData.pengPai;
      for (var i in this.playerList) {
        var player = this.playerList[i];
        var gangList = this.ReconnentData.gangPai[i];
        var pengList = this.ReconnentData.pengPai[i];
        player.resetPengGangPai(gangList, pengList);
      }
    };
    GameManager.reSetDadePai = function() {
      var paiOutList = this.ReconnentData.paiOutList;
      for (var i in this.playerList) {
        var player = this.playerList[i];
        player.addPaiOutList(paiOutList[i]);
      }
    };
    GameManager.reserFanPai = function() {
      var fanPaiList = this.ReconnentData.fanPai || [];
      for (var i in this.playerList) {
        var player = this.playerList[i];
        player.resetFanPai(fanPaiList[i]);
      }
    };
    GameManager.addLiujuCount = function() {
      this.liujupaiCount += 1;
    };
    GameManager.MoPaiNotice = function(data) {
      this.refreResidue(1);
      var destPos = data.PlayerIdx;
      void 0 === destPos && (destPos = mjDataMgr.get(mjDataMgr.KEYS.SELFID));
      this.turnToNextPlayer(this.playerList[destPos]);
      this.curPlayer.moPai(data.Atile);
    };
    GameManager.WLMoPaiNotice = function(data) {
      var player = this.getplayerByUserID(data.UserId);
      if (this.isFaPaiEnd(data, player)) return;
      this.refreResidue(1);
      this.turnToNextPlayer(player);
      player.moPai(data.Card);
    };
    GameManager.isFaPaiEnd = function(data, player) {
      if (!this.fapaiMo) {
        this.fapaiMo = true;
        this.startPaiData[player.PlayerIdx].push(data.Card);
        return true;
      }
      return false;
    };
    GameManager.exiteRoom = function() {
      fun.db.getData("UserInfo").RoomId = 0;
      cc.director.loadScene("hall");
    };
    GameManager.caiShengPai = function(data) {
      this.CaiShenPai = data;
    };
    GameManager.turnToChupai = function(pai) {
      this.showChoosePai(-999);
      var content = {};
      content.Atile = pai.id;
      this.curChuPaiUdid = pai.udid;
      mjDataMgr.getInstance().canQuickly(pai.id) && this.ChuPai(this.curPlayer, {
        Atile: pai.id,
        PlayerIdx: this.curPlayer.PlayerIdx
      });
      mjNetMgr.cSend("chuPai", content);
      this.gameUICB.hideChupaiTips();
    };
    GameManager.benmenFengNotice = function(data) {
      this.meDirection = data.Atile;
      this.newRound();
    };
    GameManager.ChuPaiNotice = function(data) {
      var player = this.getPlayerByPaiData(data);
      var deskType = player.desPosType;
      if (deskType == GameDefine.DESKPOS_TYPE.XIA && !require("mjReplayMgr").isReplayPai()) return;
      this.ChuPai(player, data);
    };
    GameManager.ChuPai = function(player, data) {
      this.lastChuPaiDir = player.deskType;
      this.lastChuPaiID = data.Atile;
      player.setGameStatus(GameDefine.TURN_STATUS.WAITOPT);
      this.setLastPaiResult(false);
      this.daPaiPlayer = player;
      player.chuPai(data.Atile, this.curChuPaiUdid);
    };
    GameManager.getPlayerByPaiData = function(data) {
      if (void 0 !== data.UserId) return this.getplayerByUserID(data.UserId);
      if (void 0 !== data.PlayerIdx) return this.playerList[data.PlayerIdx];
    };
    GameManager.paiZuHeReminder = function(data) {
      var optList = fun.utils.getBinaryOpts(data.Opts);
      for (var i = 0; i < optList.length; i++) {
        optList[i].Comb = data.Data;
        optList[i].Atile = data.Atile;
      }
      return optList;
    };
    GameManager.ChuPaiZuHeReminder = function(data) {
      this.eatTag = "chuPai";
      var eatData = this.paiZuHeReminder(data);
      this.showEatUI(eatData);
    };
    GameManager.MoPaiZuHeReminder = function(data) {
      this.eatTag = "moPai";
      var eatData = fun.utils.getBinaryOpts(data.Opts);
      for (var i = 0; i < eatData.length; i++) {
        eatData[i].Comb = data.Data;
        eatData[i].Atile = data.Atile;
        var curOp = eatData[i].Op;
        data.Data && data.Data[curOp] && (eatData[i].Atile = data.Data[curOp][0]);
      }
      this.showEatUI(eatData);
    };
    GameManager.showEatUI = function(data) {
      if (this.isStartAnim) {
        this.startOptData = data;
        return;
      }
      this.eatPaiData = data[0];
      this.isShowGuo() && data.unshift({
        Op: 8
      });
      this.gameUICB.showCanEatUI(data);
    };
    GameManager.guoPaiToServer = function() {
      var content = {
        Atile: this.eatPaiData.Atile
      };
      mjNetMgr.cSend("passOpt", content, this.eatTag);
    };
    GameManager.chiPaiToServer = function(eatData, comb) {
      var content = {
        Atile: eatData.Atile,
        Data: comb
      };
      this.chiPaiData = content;
      mjNetMgr.cSend("chiPaiOpt", content);
    };
    GameManager.getEatPaiId = function(dataIndex) {
      var paiID;
      if ("moPai" === this.eatTag) {
        paiID = this.eatPaiData.Data ? this.eatPaiData.Data[dataIndex] : void 0;
        paiID = void 0 !== paiID ? paiID[0] : this.eatPaiData.Atile;
      } else paiID = this.eatPaiData.Atile;
      return paiID;
    };
    GameManager.eatPaiToServer = function(eatObj, eatData) {
      this.eatPaiData.Atile = eatData.Atile;
      var content = {
        Atile: eatData.Atile
      };
      mjNetMgr.cSend("optPai", content, eatObj);
    };
    GameManager.PengPaiAckMessage = function(data) {
      if (true == data.Rst) {
        var player = this.playerList[mjDataMgr.get(mjDataMgr.KEYS.SELFID)];
        player.peng(this.eatPaiData.Atile, true);
        this.turnToNextPlayer(player);
        this.setLastPaiResult(GameDefine.EATPAI_TYPE.PengPai);
      }
    };
    GameManager.ChuPaiZuHeNotice = function(data) {
      var eatType = fun.utils.getBinaryOpts(data.Opts)[0].Op;
      var player = this.getPlayerByPaiData(data);
      this.gameUICB.cleanEatUI();
      var meUserId = mjDataMgr.get(mjDataMgr.KEYS.UID);
      var isSelf = data.UserId && meUserId == data.UserId;
      eatType == GameDefine.EATPAI_TYPE.PuTongHu || this.turnToNextPlayer(player);
      eatType === GameDefine.EATPAI_TYPE.PengPai && player.peng(data.Atile, isSelf);
      eatType === GameDefine.EATPAI_TYPE.ChiPai && player.chi({
        d: data.Data,
        s: isSelf,
        card: data.Atile,
        sheng: this.isShengPai
      });
      eatType !== GameDefine.EATPAI_TYPE.MingGang2 && eatType !== GameDefine.EATPAI_TYPE.AnGang && eatType !== GameDefine.EATPAI_TYPE.MingGang1 || player.gang(data.Atile, isSelf, eatType);
      this.setLastPaiResult(eatType);
      this.lastChuPaiData = data;
    };
    GameManager.ChiPaiAckMessage = function(data) {
      if (true == data.Rst) {
        var player = this.playerList[mjDataMgr.get(mjDataMgr.KEYS.SELFID)];
        this.chiPaiData.Data.push(this.chiPaiData.Atile);
        player.chi({
          d: this.chiPaiData.Data,
          s: true,
          card: this.chiPaiData.Atile,
          sheng: this.isShengPai
        });
        this.turnToNextPlayer(player);
      }
    };
    GameManager.MingGang2PaiAckMessage = function(data) {
      true == data.Rst && this.gangPaiAck(GameDefine.EATPAI_TYPE.MingGang2);
    };
    GameManager.MingGang1PaiAckMessage = function(data) {
      true == data.Rst && this.gangPaiAck(GameDefine.EATPAI_TYPE.MingGang1);
    };
    GameManager.AnGangPaiAckMessage = function(data) {
      true == data.Rst && this.gangPaiAck(GameDefine.EATPAI_TYPE.AnGang);
    };
    GameManager.gangPaiAck = function(eatType) {
      var player = this.playerList[mjDataMgr.get(mjDataMgr.KEYS.SELFID)];
      player.gang(this.eatPaiData.Atile, true, eatType);
      this.turnToNextPlayer(player);
      this.setLastPaiResult(eatType);
    };
    GameManager.ZiMoHuPaiAckMessage = function(data) {
      data.Rst;
    };
    GameManager.setLastPaiResult = function(eatType) {
      var isPaiEat = eatType == GameDefine.EATPAI_TYPE.PengPai || eatType == GameDefine.EATPAI_TYPE.ChiPai || eatType == GameDefine.EATPAI_TYPE.MingGang2;
      if (this.daPaiPlayer) {
        this.daPaiPlayer.setDaPaiResult(isPaiEat);
        this.daPaiPlayer = void 0;
      }
    };
    GameManager.turnToNextPlayer = function(player) {
      this.curPlayer && this.curPlayer.setGameStatus(GameDefine.TURN_STATUS.NOTURN);
      this.curPlayer = player;
      this.curPlayer.setGameStatus(GameDefine.TURN_STATUS.TURNTOPLAY);
      this.gameUICB.setCurPaiDirection(player.getDirection());
    };
    GameManager.setBtnBackVisi = function(isVisi) {};
    GameManager.QiangGangReminder = function(data) {
      data.Opts = 128;
      this.eatPaiData = data;
      this.eatTag = "QiangGang";
      var eatData = this.paiZuHeReminder(data);
      this.showEatUI(eatData);
    };
    GameManager.isShowGuo = function() {
      var ishaveNext = this.leftPai > this.liujupaiCount;
      return ishaveNext;
    };
    GameManager.QiangGangNotice = function(data) {
      data.Opts = 1;
      this.ChuPaiZuHeNotice(data);
    };
    GameManager.RestoreListenReminder = function(data) {
      this.gameUICB.cleanEatUI();
    };
    GameManager.roundOver = function() {
      for (var k in this.playerList) {
        var player = this.playerList[k];
        mjDataMgr.getInstance().getPlayerData(player.PlayerIdx).Status = GameDefine.PLAYER_READY.NO_READY;
        player.initPlayerStatus();
      }
    };
    GameManager.getFanhuDataHy = function(itemData) {
      var fanData = "";
      var huData = "";
      var hsList = [];
      var fsList = [];
      var lColor = "<color=#552e21>";
      var sColor = "<color=#552e21>";
      var endTag = "</c>";
      itemData.hsxq = itemData.hsxq || {};
      for (var k in itemData.hsxq) {
        if (GameDefine.FSTEXT[k]) {
          var fsData = GameDefine.FSTEXT[k];
          fsData.count = itemData.hsxq[k];
          fsList.push(fsData);
        }
        if (GameDefine.HSTEXT[k]) {
          var hsData = GameDefine.HSTEXT[k];
          hsData.count = itemData.hsxq[k];
          hsList.push(hsData);
        }
      }
      fsList.sort(function(a, b) {
        return b.sort - a.sort;
      });
      hsList.sort(function(a, b) {
        return b.sort - a.sort;
      });
      for (var i = 0; i < fsList.length; i++) fanData += lColor + fsList[i].name + endTag + sColor + "+" + fsList[i].count + endTag + " ";
      for (var _i3 = 0; _i3 < hsList.length; _i3++) huData += lColor + hsList[_i3].name + endTag + sColor + "+" + hsList[_i3].count + endTag + " ";
      huData = huData.length < 1 ? "0" : huData;
      if (fanData.length > 0) {
        fanData = lColor + "番数: " + endTag + fanData;
        huData = lColor + "胡数: " + endTag + huData;
      } else {
        fanData = lColor + "胡数: " + endTag + huData;
        huData = "";
      }
      return {
        fan: fanData,
        hu: huData
      };
    };
    GameManager.ZhanJiNoticeHy = function(data) {
      var result = data.info || [];
      var roundData = {};
      for (var i in this.playerList) {
        var itemData = result[i] || {};
        itemData.shouPai = itemData.sp;
        itemData.xdhs = itemData.xdhs || 0;
        itemData.pxdhs = itemData.pxdhs || {};
        itemData.isWin = itemData.iszm || itemData.ishu;
        itemData.Scores = [];
        var fanhuData = this.getFanhuDataHy(itemData);
        itemData.fanData = fanhuData.fan;
        itemData.huData = fanhuData.hu;
        var player = this.playerList[i];
        for (var k = 0; k < 4; k++) {
          var curIdx = (k + this.zhuangIdx) % 4;
          curIdx != player.PlayerIdx ? itemData.Scores[k] = itemData.pxdhs[curIdx] || 0 : itemData.Scores[k] = itemData.xdhs;
        }
        roundData[i] = itemData;
      }
      this.analyzeZhanji(roundData);
    };
    GameManager.ZhanJiNoticeWl = function(data) {
      var roundData = {};
      for (var UserId in data.Players) {
        var PlayerIdx = this.getplayerByUserID(UserId).PlayerIdx;
        var itemData = data.Players[UserId];
        var huList = fun.utils.getBinaryOpts(itemData.Type);
        huList.forEach(function(item) {
          itemData.ishu = 0 == item.Op || itemData.ishu;
          itemData.isdp = 1 == item.Op || itemData.isdp;
          itemData.iszm = 2 == item.Op || itemData.iszm;
          itemData.isby = 3 == item.Op || itemData.isby;
          itemData.islz = 4 == item.Op || itemData.islz;
        });
        itemData.hp = itemData.HuCard;
        itemData.shouPai = itemData.HandCards;
        itemData.jdhs = itemData.HuShu;
        itemData.isWin = itemData.iszm || itemData.ishu;
        var sColor = "<color=#552e21>";
        var lColor = "<color=#552e21>";
        var endTag = "</c>";
        itemData.fanData = lColor + "台数: " + endTag + sColor + itemData.TaiShu + endTag;
        itemData.huData = lColor + "胡数: " + endTag + sColor + itemData.DiHu + endTag;
        itemData.xdhs = itemData.Scores[itemData.Feng];
        roundData[PlayerIdx] = itemData;
      }
      for (var k in this.playerList) {
        var peng = this.playerList[k].paiDataObj.pengGangPai.peng;
        cc.log(" 陈锋修改结算界面将碰吃牌不横着", peng);
        for (var i = 0; i < peng.length; i++) for (var _k = 0; _k < peng[i].length; _k++) {
          var pai = peng[i][_k];
          pai.setShowType(GameDefine.PAISHOWTYPE.PENG);
        }
      }
      this.analyzeZhanji(roundData);
    };
    GameManager.analyzeZhanji = function(roundData) {
      var _this = this;
      this.gameUICB.cleanEatUI();
      var singleZhanjiData = [];
      var reportData = [];
      var mjPai = require("mjPai");
      var meIdx = mjDataMgr.get(mjDataMgr.KEYS.SELFID);
      var _loop = function _loop(i) {
        curIdx = (i + _this.zhuangIdx) % 4;
        if (!_this.playerList[curIdx]) return "continue";
        var endData = roundData[curIdx];
        endData.player = _this.playerList[curIdx];
        endData.isZhuangJia = curIdx == _this.zhuangIdx;
        endData.playerData = mjDataMgr.getInstance().getPlayerData(curIdx);
        endData.jdhs = endData.jdhs || 0;
        endData.xdhs = endData.xdhs || 0;
        endData.shouPai.sort();
        mjDataMgr.getInstance().getPlayerData(curIdx).xdhs += endData.xdhs;
        endData.player.refreshData();
        endData.isWiner = endData.ishu || endData.iszm;
        endData.isWiner && (singleZhanjiData.meIsWiner = curIdx == meIdx);
        var spPaiList = endData.shouPai.slice();
        for (var paiIndex = 0; paiIndex < spPaiList.length; paiIndex++) {
          pai = mjPai.new(spPaiList[paiIndex]);
          pai.refreshCaiShen();
          pai.setShowType(GameDefine.PAISHOWTYPE.PENG);
          endData.shouPai[paiIndex] = pai;
        }
        if (endData.Fan) {
          endData.FanList = [];
          endData.Fan.forEach(function(paiID) {
            var pai = mjPai.new(paiID);
            pai.refreshCaiShen();
            pai.setShowType(GameDefine.PAISHOWTYPE.PENG);
            endData.FanList.push(pai);
          }.bind(_this));
        }
        singleZhanjiData.push(endData);
        reportData[curIdx] = endData;
      };
      for (var i = 0; i < 4; i++) {
        var curIdx;
        var pai;
        var _ret = _loop(i);
        if ("continue" === _ret) continue;
      }
      this.gameRoundata = roundData;
      this.singleZhanjiData = singleZhanjiData;
      fun.event.dispatch("addReportData", reportData);
      this.isStartAnim ? this.faPaiAnimEndList.unshift({
        f: this.showPaijuEndAnim,
        stop: true
      }) : this.showPaijuEndAnim();
    };
    GameManager.TotalZhanJiWl = function(data) {
      var totalData = {};
      totalData.players = {};
      var maxCount = 1;
      for (var UserId in data.Players) {
        var PlayerIdx = this.getplayerByUserID(UserId).PlayerIdx;
        var pData = data.Players[UserId];
        var itemData = pData;
        itemData.playerData = mjDataMgr.getInstance().getPlayerData(PlayerIdx);
        itemData.detail = [];
        itemData.detail.push({
          name: "自摸",
          value: pData.ZiMo
        });
        itemData.detail.push({
          name: "胡牌",
          value: pData.HuPai
        });
        itemData.detail.push({
          name: "辣子",
          value: pData.LaZi
        });
        itemData.detail.push({
          name: "包圆",
          value: pData.BaoPai
        });
        itemData.detail.push({
          name: "点炮",
          value: pData.DianPao
        });
        itemData.score = pData.Score;
        maxCount = itemData.score > maxCount ? itemData.score : maxCount;
        totalData.players[PlayerIdx] = itemData;
      }
      totalData.maxCount = maxCount;
      this.TotalZhanJiNotice(totalData);
    };
    GameManager.TotalZhanJiHy = function(hyData) {
      var data = hyData.TotalInfos;
      var totalData = {};
      totalData.players = {};
      var maxCount = 1;
      for (var i in data) {
        var pData = data[i];
        var itemData = {};
        itemData.playerData = mjDataMgr.getInstance().getPlayerData(i);
        itemData.detail = [];
        itemData.detail.push({
          name: "自摸",
          value: pData[0]
        });
        itemData.detail.push({
          name: "胡牌",
          value: pData[1]
        });
        itemData.detail.push({
          name: "辣子",
          value: pData[2]
        });
        itemData.detail.push({
          name: "包圆",
          value: pData[3]
        });
        itemData.detail.push({
          name: "天胡",
          value: pData[4]
        });
        itemData.score = pData[6];
        itemData.Spend = pData[7];
        itemData.Left = pData[8];
        maxCount = itemData.score > maxCount ? itemData.score : maxCount;
        totalData.players[i] = itemData;
      }
      totalData.maxCount = maxCount;
      this.TotalZhanJiNotice(totalData);
    };
    GameManager.TotalZhanJiNotice = function(data) {
      for (var i in data.players) {
        var itemData = data.players[i];
        itemData.hasWin = itemData.score > 0;
        itemData.winCount = itemData.hasWin ? "+" + itemData.score : itemData.score;
        itemData.isBigWiner = itemData.score == data.maxCount;
      }
      var meIdx = mjDataMgr.get(mjDataMgr.KEYS.SELFID);
      cc.log("--------- data.players---------", data.players, meIdx);
      data.meIsWiner = data.players[meIdx].isBigWiner;
      this.gameUICB.setTotalReport(data);
      this.totalZhanJiData = data;
    };
    GameManager.showPaijuEndAnim = function() {
      var roundData = this.gameRoundata;
      this.isPlaying = false;
      var dpIndex = -1;
      var huIndex = -1;
      var zmIndex = -1;
      for (var idx in roundData) {
        var item = roundData[idx];
        item.isdp && (dpIndex = idx);
        (item.ishu || item.iszm) && (huIndex = idx);
        item.iszm && (zmIndex = idx);
      }
      this.ResultAnimList = [];
      if (zmIndex > -1) {
        var player = this.playerList[zmIndex];
        player.rmZiMoPai();
      }
      dpIndex > -1 && this.ResultAnimList.push(function() {
        this.showDianPaoAnim(dpIndex);
      }.bind(this));
      huIndex > -1 ? this.ResultAnimList.push(function() {
        this.showHuPaiAnim(huIndex, roundData[huIndex]);
      }.bind(this)) : this.ResultAnimList.push(function() {
        this.showLiuJuAnim();
      }.bind(this));
      cc.log("---GameManager.showPaijuEndAnim------");
      this.checkResultAnim();
    };
    GameManager.checkResultAnim = function() {
      cc.log("checkResultAnim 1za  ", this.ResultAnimList);
      if (0 === this.ResultAnimList.length) {
        cc.log("show showSingleReport", this.singleZhanjiData);
        this.gameUICB.showSingleReport(this.singleZhanjiData);
        this.roundOver();
        return;
      }
      var cb = this.ResultAnimList.splice(0, 1)[0];
      setTimeout(function() {
        cb();
      }, 300);
    };
    GameManager.showDianPaoAnim = function(pos) {
      var player = this.playerList[pos];
      player.showDpAnim();
      require("Audio").playEffect("mahjong", "fangpao.mp3");
    };
    GameManager.showHuPaiAnim = function(pos, itemData) {
      var player = this.playerList[pos];
      player.showHuPaiAnim(itemData);
      require("Audio").playEffect("mahjong", "hupai.mp3");
      setTimeout(function() {
        require("Audio").playEffect("mahjong", "cpghz.mp3");
      }, 250);
    };
    GameManager.VotingReminder = function(data) {
      var playersInfo = {};
      var votePlayerIdx = 0;
      var votePlayer = {};
      var roomPlayers = mjDataMgr.get(mjDataMgr.KEYS.PLAYERS);
      for (var idx in roomPlayers) {
        var player = roomPlayers[idx];
        var UserId = player.UserId;
        playersInfo[UserId] = idx == data.PlayerIdx ? 1 : 0;
        cc.log(data.vInfos);
        data.vInfos && data.vInfos[idx] && data.vInfos[idx].isVoted && (playersInfo[UserId] = 2);
      }
      data.VoteInfo = playersInfo;
      data.EndTime = data.VotingTime;
      this.gameUICB.updateVotingData(data);
    };
    GameManager.VotingRstNotice = function(data) {
      this.gameUICB.removeVotingPop();
      if (data.VotingRst) this.DissolveRoomNotice(); else {
        var player = mjDataMgr.getInstance().getPlayerData(data.PlayerRefused);
        var content = player.showName + " 拒绝解散房间!";
        fun.event.dispatch("MinSingleButtonPop", {
          contentStr: content
        });
      }
    };
    GameManager.VotingPlayerRstNotice = function(data) {
      var player = this.playerList[data.pIdx];
      this.gameUICB.onUserVoted({
        UserId: player.UserId,
        code: data.vRst ? 2 : 3
      });
    };
    GameManager.VotingInformation = function(data) {
      this.VotingReminder(data);
    };
    GameManager.getplayerByUserID = function(UserId) {
      for (var k in this.playerList) {
        var player = this.playerList[k];
        if (player.UserId == UserId) return player;
      }
    };
    GameManager.OffLineNotice = function(data) {
      var player = this.getplayerByUserID(data.UserId);
      mjDataMgr.getInstance().getPlayerData(player.PlayerIdx).OnLine = false;
      player.initPlayerStatus();
    };
    GameManager.OnLineNotice = function(data) {
      var player = this.getplayerByUserID(data.UserId);
      void 0 != data.Status && (mjDataMgr.getInstance().getPlayerData(player.PlayerIdx).Status = data.Status);
      mjDataMgr.getInstance().getPlayerData(player.PlayerIdx).OnLine = true;
      player.initPlayerStatus();
    };
    GameManager.refrePlayerStatus = function(player, status) {
      status == GameDefine.PLAYER_READY.READY && this.isPlaying && (status = GameDefine.PLAYER_READY.DAPAIING);
      player.setPlayerStatus(status);
    };
    GameManager.ChuPaiReminder = function() {};
    GameManager.ChatToOther = function(item) {};
    GameManager.ChatNotice = function(data) {
      var chatData = data.cId.split(":::");
      var type = chatData[0];
      var cb = this.chatTypeList[type];
      cb && cb.call(this, data.pIdx, chatData[1]);
    };
    GameManager.ChatMessageAck = function(data) {
      data.rst && this.ChatNotice(this.SendChatData);
    };
    GameManager.showTextChat = function(idx, cId) {
      var chatData = {};
      fun.utils.forEach(GameDefine.CHATCOMMONTEXT, function(item) {
        item.id == cId && (chatData = item);
      });
      chatData.type = GameDefine.CHATTYPE.TEXT;
      var player = this.playerList[idx];
      player.showChat(chatData);
    };
    GameManager.showEmojiChat = function(idx, cId) {
      var chatData = {};
      fun.utils.forEach(GameDefine.CHATCOMMONEMOJI, function(item) {
        item.id == cId && (chatData = item);
      });
      chatData.type = GameDefine.CHATTYPE.EMOJI;
      var player = this.playerList[idx];
      player.showChat(chatData);
    };
    GameManager.setPlayerCOORD = function(idx, coordData) {
      var coord = {};
      coordData = coordData.split(",,");
      coord.lng = coordData[0];
      coord.lat = coordData[1];
      mjDataMgr.getInstance().setPlayerCOORD(idx, coord);
    };
    GameManager.onBatteryChange = function(status, level) {
      this.gameUICB.setPhoneBattery(status, level);
    };
    GameManager.onPhoneNetChange = function(status, strength, signal) {
      this.gameUICB.setPhoneNet(status, strength, signal);
    };
    GameManager.needNetWork = function() {
      var gameReplayMgr = require("mjReplayMgr");
      var need = true;
      need = !gameReplayMgr.isReplayPai() && need;
      return need;
    };
    GameManager.onReconnectDataWl = function(data) {
      var ReconnectMgr = require("mjReconnectMgr");
      ReconnectMgr.wlReconnected(data);
      this.gameUICB.hideReadyNode();
    };
    GameManager.onReconnectDataHy = function(data) {
      var ReconnectMgr = require("mjReconnectMgr");
      ReconnectMgr.inGmaeSyncData(data);
      this.gameUICB.hideReadyNode();
    };
    GameManager.renectCount = function(data) {
      var ReconnectMgr = require("mjReconnectMgr");
      var mjDataMgr = require("mjDataMgr");
      var curReportData = ReconnectMgr.getReportData(data.allzj);
      var roomInfo = mjDataMgr.get(mjDataMgr.KEYS.ROOMINFO);
      roomInfo.Quan = data.fcount || 1;
      roomInfo.Round = curReportData.length;
      this.initGameCount();
      fun.event.dispatch("resetReportData", curReportData);
      this.refrePlayerXdhs(curReportData);
    };
    GameManager.onPaiTimeChange = function(data) {
      if (1 == data.Time) {
        this.gameUICB.showShengPaiKuang();
        this.isShengPai = true;
        require("Audio").playEffect("mahjong", "dangerstage.mp3");
        this.gameUICB.showAnimEffect("AnimShengpai");
      }
    };
    module.exports = GameManager;
    cc._RF.pop();
  }, {
    Audio: "Audio",
    mjDataMgr: "mjDataMgr",
    mjGameDefine: "mjGameDefine",
    mjNetMgr: "mjNetMgr",
    mjPai: "mjPai",
    mjPlayer: "mjPlayer",
    mjReconnectMgr: "mjReconnectMgr",
    mjReplayMgr: "mjReplayMgr"
  } ],
  mjGameUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9a96exZlipN0bvKdDvfeIoV", "mjGameUI");
    "use strict";
    var gameManager = require("mjGameManager");
    var GameDefine = require("mjGameDefine");
    var mjDataMgr = require("mjDataMgr");
    var mjNetMgr = require("mjNetMgr");
    var ReconnectMgr = require("mjReconnectMgr");
    var gameReplayMgr = require("mjReplayMgr");
    var log = cc.log;
    cc.Class({
      extends: cc.Component,
      properties: {
        playerN: cc.Node,
        paiAltas: cc.SpriteAtlas,
        optEffectPrefab: cc.Prefab,
        readyN: cc.Node,
        lunpanN: cc.Node,
        overallEffN: cc.Node,
        eatOptN: cc.Node,
        paiOptsPrefab: cc.Prefab,
        EndUI: cc.Node,
        eatPaiDetailPrefab: cc.Prefab,
        eatMoreOptN: cc.Node,
        popWindowN: cc.Node,
        readyUI: cc.Node,
        shengPaiPrefab: cc.Prefab,
        saiziPrefab: cc.Prefab,
        dianpaoPrefab: cc.Prefab,
        hupaiPrefab: cc.Prefab,
        chatUI: cc.Node,
        phoneStatusN: cc.Node,
        chupaiTipsN: cc.Node,
        gameCountN: cc.Node,
        totalReportCount: cc.RichText,
        signleReportCount: cc.RichText,
        mjVotingPopUiPrefab: cc.Prefab,
        gameNameN: cc.Node,
        btnRuleN: cc.Node
      },
      onLoad: function onLoad() {
        this.initNodeList();
        this.initAnimEffect();
        this.initEatListPrefab();
        this.initAudio();
        this.gameInit();
        this.preload();
        this.scheduleTime();
        this.refreTimeCount = 1;
        this.totalDtTime = 0;
      },
      gameInit: function gameInit() {
        this.uiDefaultShow();
        this.initGameManager();
        this.initReadyNode();
        fun.event.dispatch("Zhuanquan", {
          flag: false
        });
      },
      initAudio: function initAudio() {
        require("Audio").playMusic("mahjong", "BGM-gameUI.mp3", true);
      },
      initNodeList: function initNodeList() {
        this.reduceNode = this.lunpanN.getChildByName("residue");
        this.caiShenShineN = this.lunpanN.getChildByName("caishenShine");
        this.directN = this.lunpanN.getChildByName("curDirection");
        this.direct3DN = this.lunpanN.getChildByName("curDirection_3d");
        this.ShengpaiKuang = this.overallEffN.getChildByName("shengzhang");
        this.paiHitzone = this.overallEffN.getChildByName("paiHitzone");
        this.liujuN = this.overallEffN.getChildByName("liuju");
        this._timeDelay = this.phoneStatusN.getChildByName("timeDelay").getComponent(cc.Label);
        var isIntranet = fun.gameCfg.loginUrl === gameConst.loginUrl[gameConst.loginUrlType.intranet];
        isIntranet || (this.phoneStatusN.getChildByName("timeDelay").active = false);
        this.netDelayTime(fun.db.getData("NetDelayTime"));
      },
      uiDefaultShow: function uiDefaultShow() {
        this.btnRuleN.active = false;
        this.lunpanN.active = false;
        this.chupaiTipsN.active = false;
        this.caiShenShineN.active = false;
        this.paiHitzone.active = false;
        this.ShengpaiKuang.active = false;
        this.liujuN.active = false;
      },
      initPhoneStatus: function initPhoneStatus() {
        fun.event.add("MJPhoneBattery", "PhoneBattery", this.batteryStatus.bind(this));
        fun.event.add("MJPhoneNet", "PhoneNet", this.netStatus.bind(this));
        fun.event.add("MJReconnect", "ReconnectInGame", this.gameInit.bind(this));
        fun.event.add("MJNetDelayTime", "NetDelayTime", this.netDelayTime.bind(this));
        fun.event.add("mjViewChangeMain", "mjViewChange", this.onViewChange.bind(this));
        require("JSPhoneNetBattery").getNetBatteryStatus();
        this.onViewChange();
      },
      preload: function preload() {},
      start: function start() {
        this.checkReplayData();
        gameManager.needNetWork();
        this.initPhoneStatus();
      },
      update: function update(dt) {
        this.totalDtTime += dt;
        if (this.totalDtTime > this.refreTimeCount) {
          this.totalDtTime -= this.refreTimeCount;
          this.scheduleTime();
        }
        gameManager.update(dt);
      },
      setGameCount: function setGameCount(gameCount) {
        var curNode = this.gameCountN.getChildByName("curCount");
        curNode.parent.active = gameCount.length > 0;
        curNode.getComponent(cc.RichText).string = gameCount;
        this.totalReportCount.string = gameCount;
        this.signleReportCount.string = gameCount.replace(/=#\w+>/g, "=#615A54>");
        this.readyUI.getComponent("mjReadyUI").refreRoomData();
      },
      checkReplayData: function checkReplayData() {
        gameReplayMgr.isReplayPai() && gameReplayMgr.startPlay();
      },
      onDestroy: function onDestroy() {
        gameManager.onDestroy();
        fun.event.remove("MJPhoneNet");
        fun.event.remove("MJPhoneBattery");
        fun.event.remove("MJReconnect");
        fun.event.remove("MJNetDelayTime");
        fun.event.remove("mjViewChangeMain");
      },
      onViewChange: function onViewChange() {
        var is3DView = "3D" == cc.sys.localStorage.getItem("mjEyeView");
        this.direct3DN.active = is3DView;
        this.directN.active = !is3DView;
        this.gameNameN.scaleY = is3DView ? .8 : 1;
        var paiNode = this.lunpanN.getChildByName("pai");
        paiNode.getChildByName("pai_2d").active = !is3DView;
        paiNode.getChildByName("pai_3d").active = is3DView;
        this.reduceNode.defauY = this.reduceNode.defauY || this.reduceNode.y;
        this.reduceNode.scaleY = is3DView ? .8 : 1;
        this.reduceNode.y = is3DView ? this.reduceNode.defauY + 20 : this.reduceNode.defauY;
      },
      showChupaiTips: function showChupaiTips() {
        this.chupaiTipsN.active = true;
        this.chupaiTipsN.opacity = 0;
        var self = this;
        setTimeout(function() {
          self.chupaiTipsN.runAction(cc.fadeIn(.3));
        }, 500);
      },
      hideChupaiTips: function hideChupaiTips() {
        this.chupaiTipsN.active = false;
      },
      setCaiShenPai: function setCaiShenPai(caishenList) {
        var paiID = caishenList[0];
        var paiSprite = this.getPaiSprite(paiID);
        var setCaiShen = function setCaiShen(paiN) {
          var contentN = paiN.getChildByName("content");
          contentN.getComponent(cc.Sprite).spriteFrame = paiSprite;
        };
        var paiNode = this.lunpanN.getChildByName("pai");
        paiNode.active = true;
        setCaiShen(paiNode.getChildByName("pai_2d"));
        setCaiShen(paiNode.getChildByName("pai_3d"));
      },
      showCaiShenAnim: function showCaiShenAnim() {
        var animManager = this.lunpanN.getComponent(cc.Animation);
        animManager.playAdditive("caishenshineIn");
        var spineAnim = this.caiShenShineN.getComponent(sp.Skeleton);
        this.caiShenShineN.active = true;
        var self = this;
        var completeFunc = function completeFunc(event) {
          self.caiShenShineN.active = false;
          self.checkEatUI();
          self.showAnimEffect("AnimKaishi");
          require("Audio").playEffect("mahjong", "start.mp3");
        };
        spineAnim.setCompleteListener(completeFunc);
        var magicName = mjDataMgr.get(mjDataMgr.KEYS.CFG).MagicName;
        spineAnim.setAnimation(0, magicName, false);
        require("Audio").playEffect("mahjong", "caishen.mp3");
      },
      showReduceNode: function showReduceNode() {
        this.reduceNode.active = true;
      },
      hdieReduceNode: function hdieReduceNode() {
        this.reduceNode.active = false;
      },
      initGameManager: function initGameManager() {
        mjDataMgr.init(gameReplayMgr.isReplayPai());
        mjNetMgr.init();
        this.initPaiDirection();
        var deskType = GameDefine.DESKPOS_TYPE;
        var playerList = {};
        playerList[deskType.SHANG] = this.playerN.getChildByName("shang");
        playerList[deskType.XIA] = this.playerN.getChildByName("xia");
        playerList[deskType.ZUO] = this.playerN.getChildByName("zuo");
        playerList[deskType.YOU] = this.playerN.getChildByName("you");
        gameManager.initGame(playerList, this);
        this.gameNameN.getComponent(cc.Label).string = mjDataMgr.get("CfgData").gameName;
      },
      getPaiSprite: function getPaiSprite(paiID) {
        var spriteName = "pj_" + mjDataMgr.getInstance().getLocalPaiID(paiID);
        var spriteFrame = this.paiAltas.getSpriteFrame(spriteName);
        return spriteFrame;
      },
      gameStart: function gameStart() {
        this.lunpanN.active = true;
        this.btnRuleN.active = true;
      },
      roDirectionNode: function roDirectionNode(rota) {
        this.directN.getChildByName("content").rotation = rota;
        this.direct3DN.children.forEach(function(item) {
          item.active = false;
          item.children.forEach(function(cItem) {
            cItem.active = false;
          });
        });
        this.cur3DDirNode = this.direct3DN.getChildByName("bg_" + rota / 90);
        this.cur3DDirNode.active = true;
      },
      initPaiDirection: function initPaiDirection() {
        var DirectionType = GameDefine.DIRECTION_TYPE;
        var nodeList = {};
        nodeList[DirectionType.DONG] = "dong";
        nodeList[DirectionType.XI] = "xi";
        nodeList[DirectionType.NAN] = "nan";
        nodeList[DirectionType.BEI] = "bei";
        this.directionNodeList = nodeList;
      },
      setCurPaiDirection: function setCurPaiDirection(dir) {
        var setDirectVisi = function() {
          var dirName = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "dong";
          var visi = arguments[1];
          this.directN.getChildByName("content").getChildByName(dirName).active = visi;
          this.cur3DDirNode.getChildByName(dirName).active = visi;
        }.bind(this);
        var dirName = this.directionNodeList[dir];
        setDirectVisi(this.lastDirName, false);
        setDirectVisi(dirName, true);
        this.lastDirName = dirName;
      },
      hidePaiHitzone: function hidePaiHitzone() {
        this.paiHitzone.active = false;
      },
      showPaiHitzone: function showPaiHitzone() {
        this.paiHitzone.active = true;
      },
      onUserVoted: function onUserVoted(data) {
        if (!this._mjVotingPopUi) return;
        this._mjVotingPopUi.getComponent("mjVotingPopUI").showVoteChoice(data.UserId, data.code);
      },
      updateVotingData: function updateVotingData(data) {
        if (!this._mjVotingPopUi) {
          this._mjVotingPopUi = cc.instantiate(this.mjVotingPopUiPrefab);
          this._mjVotingPopUi.parent = cc.director.getScene().getChildByName("Canvas");
        }
        this._mjVotingPopUi.getComponent("mjVotingPopUI").updateData(data);
      },
      removeVotingPop: function removeVotingPop() {
        if (!this._mjVotingPopUi) return;
        this._mjVotingPopUi.getComponent("mjVotingPopUI").close();
        this._mjVotingPopUi = void 0;
      },
      setBtnBackVisi: function setBtnBackVisi(visi) {
        this.btnBack.active = visi;
      },
      initReadyNode: function initReadyNode() {
        this.readyN.active = false;
        if (gameReplayMgr.isReplayPai()) return;
        this.readyUI.getComponent("mjReadyUI").refreRoomData();
        this.showReadyNode();
      },
      showReadyNode: function showReadyNode() {
        this.lunpanN.active = false;
        this.btnRuleN.active = false;
        this.readyN.active = true;
      },
      hideReadyNode: function hideReadyNode() {
        this.readyUI.getComponent("mjReadyUI").onEveryOneReady();
      },
      hideRoomOptBtn: function hideRoomOptBtn() {
        this.readyUI.getComponent("mjReadyUI").hideRoomOptBtn();
      },
      startReady: function startReady() {
        this.readyUI.getComponent("mjReadyUI").prepareToPlay();
      },
      onBtnHintClicked: function onBtnHintClicked() {},
      onBtnGuoChilcked: function onBtnGuoChilcked() {
        this.hideEatPaiN();
        gameManager.guoPaiToServer();
      },
      hideMoreChiUI: function hideMoreChiUI() {
        this.eatMoreOptN.getChildByName("content").removeAllChildren();
        this.eatMoreOptN.active = false;
      },
      showMoreChiUI: function showMoreChiUI(eatPaiData) {
        this.eatMoreOptN.active = true;
        for (var i = 0; i < eatPaiData.Comb.length; i++) {
          var paiGroupN = cc.instantiate(this.eatPaiDetailPrefab);
          this.eatMoreOptN.getChildByName("content").addChild(paiGroupN);
          paiGroupN.setPosition(cc.p(-200 * i - 100, 5));
          paiGroupN.getComponent("mjChiDetailUI").init(this, eatPaiData.Comb[i], eatPaiData);
        }
        var bgN = this.eatMoreOptN.getChildByName("bg");
        var tipsN = this.eatMoreOptN.getChildByName("bg_0");
        tipsN.setPosition(-200 * eatPaiData.Comb.length, 0);
        bgN.width = 200 * eatPaiData.Comb.length + 85;
      },
      onBtnChiChilcked: function onBtnChiChilcked(eatobj, eatPaiData) {
        this.hideEatPaiN();
        if (eatPaiData.Comb.length > 1) {
          eatPaiData.Comb.sort(function(a, b) {
            var aSort = gameManager.getSortId(a[1]);
            var bSort = gameManager.getSortId(b[1]);
            return bSort - aSort;
          });
          this.showMoreChiUI(eatPaiData);
        } else gameManager.chiPaiToServer(eatPaiData, eatPaiData.Comb[0]);
      },
      onBtnEatChilcked: function onBtnEatChilcked(eatobj, eatData) {
        this.hideEatPaiN();
        gameManager.eatPaiToServer(eatobj, eatData);
      },
      refreResidue: function refreResidue(left) {
        this.reduceNode.getComponent(cc.Label).string = left;
      },
      showEatPaiN: function showEatPaiN() {
        this.eatOptN.active = true;
        this.cleanEatNodeList();
      },
      cleanEatNodeList: function cleanEatNodeList() {
        this.addEatNodeList.forEach(function(item) {
          item.removeFromParent();
        });
        this.addEatNodeList = [];
      },
      hideEatPaiN: function hideEatPaiN() {
        this.eatOptN.active = false;
        this.cleanEatNodeList();
      },
      initEatListPrefab: function initEatListPrefab() {
        this.EatPaiObj = [];
        this.addEatNodeList = [];
        this.hideEatPaiN();
        var self = this;
        var creatEatList = function creatEatList(cb, msName, listIndex) {
          var eatObj = {
            cb: cb,
            msName: msName,
            dataIndex: listIndex
          };
          self.EatPaiObj[listIndex] = eatObj;
        };
        creatEatList(this.onBtnEatChilcked, "PuTongHuPaiMessageNum", 0);
        creatEatList(this.onBtnEatChilcked, "MingGang2PaiMessageNum", 1);
        creatEatList(this.onBtnEatChilcked, "PengPaiMessageNum", 2);
        creatEatList(this.onBtnChiChilcked, "ChiPaiMessageNum", 3);
        creatEatList(this.onBtnEatChilcked, "ZiMoHuPaiMessageNum", 4);
        creatEatList(this.onBtnEatChilcked, "AnGangPaiMessageNum", 5);
        creatEatList(this.onBtnEatChilcked, "MingGang1PaiMessageNum", 6);
        creatEatList(this.onBtnEatChilcked, "QiangGangMessageNum", 7);
        creatEatList(this.onBtnGuoChilcked, "", 8);
      },
      checkEatUI: function checkEatUI() {
        if (this.eatPaiVisi) {
          this.eeatPaiVisi = void 0;
          this.eatOptN.active = true;
        }
      },
      showCanEatUI: function showCanEatUI(eatList) {
        this.showEatPaiN();
        for (var i = 0; i < eatList.length; i++) {
          var eatTag = eatList[i].Op;
          var eatObj = this.EatPaiObj[eatTag];
          eatObj.paiID = eatList[i].Atile;
          var eatNode = cc.instantiate(this.paiOptsPrefab);
          this.eatOptN.addChild(eatNode);
          eatNode.setPosition(cc.p(-240 * (i + 1) + 50 * eatList.length, 120));
          eatNode.getComponent("mjOptsUI").init(this, eatObj, eatList[i]);
          this.addEatNodeList.push(eatNode);
        }
        if (this.caiShenShineN.active) {
          this.eatOptN.active = false;
          this.eatPaiVisi = true;
          return;
        }
      },
      cleanEatUI: function cleanEatUI() {
        this.hideEatPaiN();
        this.hideMoreChiUI();
      },
      showSingleReport: function showSingleReport(reportData) {
        this.EndUI.getComponent("mjEndUI").setSingleReportData(reportData, this);
        this.EndUI.getComponent("mjEndUI").showSingleReport();
        this.hideDeskStatusUI();
        this.hideChupaiTips();
      },
      setTotalReport: function setTotalReport(reportData) {
        this.EndUI.getComponent("mjEndUI").setTotalReportData(reportData, this);
      },
      showTotalReport: function showTotalReport() {
        this.EndUI.getComponent("mjEndUI").showTotalReport();
        this.hideDeskStatusUI();
      },
      cleanAlert: function cleanAlert() {
        var voteAlert = this.popWindowN.getChildByName("voteFaile");
        voteAlert && voteAlert.destroy();
      },
      showVoteFaile: function showVoteFaile(playername) {
        var content = "玩家 [" + playername + "] 拒绝,解散房间失败";
        fun.event.dispatch("MinSingleButtonPop", {
          contentStr: content
        });
      },
      showShengPaiKuang: function showShengPaiKuang() {
        this.ShengpaiKuang.active = true;
      },
      hideDeskStatusUI: function hideDeskStatusUI() {
        this.lunpanN.getChildByName("pai").active = false;
        this.ShengpaiKuang.active = false;
      },
      initAnimEffect: function initAnimEffect() {
        var animList = {};
        animList["AnimShengpai"] = this.showShengPaiKuang.bind(this);
        animList["AnimLiuju"] = gameManager.checkResultAnim.bind(gameManager);
        animList["AnimKaishi"] = gameManager.onKaishiAnimEnd.bind(gameManager);
        this.AnimEffectList = animList;
      },
      showAnimEffect: function showAnimEffect(animName) {
        cc.log("--showAnimEffect---", animName);
        var animNode = cc.instantiate(this.shengPaiPrefab);
        this.overallEffN.addChild(animNode);
        var animHelper = animNode.getComponent("mjAnimHelper");
        animHelper.showCommonAnim(animName, this.AnimEffectList[animName]);
      },
      showLiujuEffect: function showLiujuEffect() {
        cc.log("showLiujuEffect");
        this.liujuN.active = true;
        var spAnim = this.liujuN.getComponent(sp.Skeleton);
        spAnim.setAnimation(0, "AnimLiuju", false);
        var completeFunc = function(event) {
          this.liujuN.active = false;
          gameManager.checkResultAnim();
        }.bind(this);
        spAnim.setCompleteListener(completeFunc);
      },
      newRound: function newRound() {
        var roundData = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        this.showSaiziAnim(roundData.saizi);
        this.hideReadyNode();
      },
      onSaiZiPlayEnd: function onSaiZiPlayEnd() {
        var child = this.overallEffN.getChildByName("saizi");
        this.overallEffN.removeChild(child);
        this.showReduceNode();
        gameManager.faPaiWithAnim();
      },
      showSaiziAnim: function showSaiziAnim(saiziData) {
        var saiZiNode = cc.instantiate(this.saiziPrefab);
        saiZiNode.name = "saizi";
        saiZiNode.setPosition(cc.p(0, 0));
        this.overallEffN.addChild(saiZiNode);
        saiZiNode.getComponent("mjSaiziUI").play(saiziData, this.onSaiZiPlayEnd, this);
        require("Audio").playEffect("mahjong", "touzi.mp3");
      },
      batteryStatus: function batteryStatus(msg) {
        var isCharge = this.phoneStatusN.getChildByName("charge");
        var progress = this.phoneStatusN.getChildByName("battery");
        isCharge.active = 0 !== msg.status && 1 !== msg.status;
        progress.getComponent(cc.ProgressBar).progress = msg.level / 100;
      },
      netStatus: function netStatus(msg) {
        var wifi = this.phoneStatusN.getChildByName("wifi");
        var signal = this.phoneStatusN.getChildByName("signal");
        if (5 === msg.status) {
          wifi.active = true;
          signal.active = false;
        } else {
          wifi.active = false;
          signal.active = true;
        }
      },
      netDelayTime: function netDelayTime(time) {
        this._timeDelay.string = time;
        var state = fun.utils.getNetDelayTime(time);
        if (this._state) {
          if (this._state === state.rgb) return;
          this._state = state.rgb;
        } else this._state = state.rgb;
        var wifi = this.phoneStatusN.getChildByName("wifi");
        var signal = this.phoneStatusN.getChildByName("signal");
        for (var i = 1; i <= 5; ++i) {
          signal.getChildByName("pk_signal_" + i).color = new cc.Color(state.rgb);
          signal.getChildByName("pk_signal_" + i).active = false;
          if (i < 5) {
            wifi.getChildByName("pk_wifi_" + i).color = new cc.Color(state.rgb);
            wifi.getChildByName("pk_wifi_" + i).active = false;
          }
        }
        wifi.getChildByName("pk_wifi_" + (state.idx + 1)).active = true;
        signal.getChildByName("pk_signal_" + (state.idx + 2)).active = true;
      },
      scheduleTime: function scheduleTime() {
        var time = this.phoneStatusN.getChildByName("time");
        var date = new Date();
        this.lastMinutes = this.lastMinutes || date.getMinutes();
        var minutesStr = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes();
        var systemTime = date.getHours() + ":" + minutesStr;
        this.lastMinutes < date.getMinutes() && 1 == this.refreTimeCount && (this.refreTimeCount = 30);
        this.lastMinutes = date.getMinutes();
        time.getComponent(cc.Label).string = systemTime;
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio",
    JSPhoneNetBattery: "JSPhoneNetBattery",
    mjDataMgr: "mjDataMgr",
    mjGameDefine: "mjGameDefine",
    mjGameManager: "mjGameManager",
    mjNetMgr: "mjNetMgr",
    mjReconnectMgr: "mjReconnectMgr",
    mjReplayMgr: "mjReplayMgr"
  } ],
  mjHuAnimUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bb3e9H6yD9ILb5Q0OCp+nUO", "mjHuAnimUI");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        spineNode: cc.Node,
        contentNode: cc.Node,
        paiNode: cc.Node
      },
      onLoad: function onLoad() {
        this.animanager = this.spineNode.getComponent(sp.Skeleton);
        var self = this;
        var completeFunc = function completeFunc() {
          self.onAnimCompleted();
        };
        this.animanager.setCompleteListener(completeFunc);
      },
      onAnimCompleted: function onAnimCompleted() {
        this.node.removeFromParent();
        setTimeout(function() {
          var gameManager = require("mjGameManager");
          gameManager.checkResultAnim();
        }, 700);
      },
      show: function show() {
        this.animanager.setAnimation(0, "Hu", false);
      }
    });
    cc._RF.pop();
  }, {
    mjGameManager: "mjGameManager"
  } ],
  mjInteractUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "be92fDzCLNOJ5Foszg7oUHD", "mjInteractUI");
    "use strict";
    var log = cc.log;
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {},
      show: function show(idx, chatData) {
        var data = chatData.split("|||");
        var endIdx = data[0];
        var startPlayer = gameManager.playerList[idx];
        var endPlayer = gameManager.playerList[endIdx];
        var startWorldPos = startPlayer.getInteractPos();
        var endWorldPos = endPlayer.getInteractPos();
        var startLocalPos = this.node.convertToNodeSpaceAR(startWorldPos);
        var endLocalPos = this.node.convertToNodeSpaceAR(endWorldPos);
        var interactData = this.getInteractData(data[1]);
        this.animaNode = this.node.getChildByName(interactData.nodeName);
        this.animaNode.active = true;
        this.animaNode.setPosition(startLocalPos);
        this.animaNode.getChildByName("content").active = true;
        this.spAnim = this.animaNode.getChildByName("content").getComponent(sp.Skeleton);
        this.spAnim.setAnimation(0, interactData.animaName + "_fei", true);
        var self = this;
        this.interactData = interactData;
        var moveTime = cc.pDistance(startLocalPos, endLocalPos) / 1500;
        var moveAction = cc.sequence(cc.moveTo(moveTime, endLocalPos), cc.callFunc(function() {
          self.onMoveEnd();
        }));
        this.animaNode.runAction(moveAction);
      },
      getInteractData: function getInteractData(id) {
        var data;
        var interactList = GameDefine.CHATINTERACT;
        for (var k in interactList) interactList[k].id == id && (data = interactList[k]);
        return data;
      },
      onMoveEnd: function onMoveEnd() {
        var self = this;
        var endFunc = function endFunc() {
          self.node.removeFromParent();
        };
        this.spAnim.setCompleteListener(endFunc);
        var animaName = this.interactData.animaName;
        this.spAnim.setAnimation(0, animaName + "_dao", false);
      }
    });
    cc._RF.pop();
  }, {} ],
  mjMenuUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5382ct8W2xD4IO4LyGARelU", "mjMenuUI");
    "use strict";
    var gameManager = require("mjGameManager");
    var mjNetMgr = require("mjNetMgr");
    var mjDataMgr = require("mjDataMgr");
    var BgPathName = "mahjong/background/yxmj_zhuomian";
    var open3D = false;
    cc.Class({
      extends: cc.Component,
      properties: {
        menuParentN: cc.Node,
        menuP: cc.Prefab,
        settingP: cc.Prefab,
        mjVotingUIP: cc.Prefab,
        gameBg: cc.Node,
        mjSkinP: cc.Prefab
      },
      onLoad: function onLoad() {
        this.defautSkin = 1;
        this.refreGameBg();
        fun.event.add("mjViewMenu", "mjViewChange", this.refreGameBg.bind(this));
      },
      onDestroy: function onDestroy() {
        this.voteNode = void 0;
        fun.event.remove("mjViewMenu");
      },
      start: function start() {},
      refreGameBg: function refreGameBg() {
        var curBgIndex = cc.sys.localStorage.getItem("MJBgIndex") || this.defautSkin;
        var is3D = "3D" == cc.sys.localStorage.getItem("mjEyeView");
        curBgIndex = is3D ? "3d" : curBgIndex;
        cc.loader.loadRes(BgPathName + curBgIndex, cc.SpriteFrame, function(err, frame) {
          this.gameBg.getComponent(cc.Sprite).spriteFrame = frame;
        }.bind(this));
      },
      onBtnMenuOpened: function onBtnMenuOpened() {
        require("Audio").playEffect("hall", "button_nomal.mp3");
        var menuN = cc.instantiate(this.menuP);
        menuN.setPosition(cc.p(471, 0));
        this.MenuNode = menuN;
        this.menuParentN.addChild(menuN);
        var btnCloseN = this.MenuNode.getChildByName("btn_f");
        var btnExit = this.MenuNode.getChildByName("btn_c");
        var btnSkin = this.MenuNode.getChildByName("btn_b");
        var btnSetting = this.MenuNode.getChildByName("btn_a");
        this.btn2D = this.MenuNode.getChildByName("btn_2d");
        this.btn3D = this.MenuNode.getChildByName("btn_3d");
        btnCloseN.on("touchend", this.onBtnClose, this);
        btnExit.on("touchend", this.onBtnExit, this);
        btnSkin.on("touchend", this.onBtnSkin, this);
        this.btnSkin = btnSkin;
        btnSetting.on("touchend", this.onBntSetting, this);
        this.btn2D.on("touchend", function() {
          this.onViewChange("2d");
        }, this);
        this.btn3D.on("touchend", function() {
          this.onViewChange("3d");
        }, this);
        this.refreViewBtn();
        menuN.getChildByName("hitzone").on("touchend", this.onBtnClose, this);
      },
      onViewChange: function onViewChange(curView) {
        if (require("mjGameManager").inFaPai) return;
        if (this.isChangeing) return;
        this.isChangeing = true;
        var newView = "2d" == curView ? "2D" : "3D";
        cc.sys.localStorage.setItem("mjEyeView", newView);
        fun.event.dispatch("mjViewChange");
        this.refreViewBtn();
        fun.utils.setBtnEnabled(this.btn2D, false);
        fun.utils.setBtnEnabled(this.btn3D, false);
      },
      refreViewBtn: function refreViewBtn() {
        var is3dView = "3D" == cc.sys.localStorage.getItem("mjEyeView") && open3D;
        this.btn2D.active = is3dView && open3D;
        this.btn3D.active = !is3dView && open3D;
        fun.utils.setBtnEnabled(this.btnSkin, !is3dView);
        setTimeout(function() {
          this.isChangeing = false;
          fun.utils.setBtnEnabled(this.btn2D, true);
          fun.utils.setBtnEnabled(this.btn3D, true);
        }.bind(this), 2e3);
      },
      onBtnClose: function onBtnClose(event) {
        require("Audio").playEffect("hall", "button_close.mp3");
        this.MenuNode.removeFromParent();
      },
      onBtnExit: function onBtnExit(event) {
        require("Audio").playEffect("hall", "button_nomal.mp3");
        var mjVotingUi = cc.instantiate(this.mjVotingUIP);
        mjVotingUi.parent = cc.director.getScene().getChildByName("Canvas");
        var roomInfo = mjDataMgr.get(mjDataMgr.KEYS.ROOMINFO);
        roomInfo.Round < 1 && mjDataMgr.getInstance().isRoomMaster() && mjVotingUi.getComponent("mjVotingUI").setTips("确定解散房间?");
        this.onBtnClose();
      },
      onBtnSkin: function onBtnSkin(event) {
        if ("3D" == cc.sys.localStorage.getItem("mjEyeView")) return;
        require("Audio").playEffect("hall", "button_nomal.mp3");
        this.skinN = cc.instantiate(this.mjSkinP);
        this.menuParentN.addChild(this.skinN);
        this.initSkin(this.skinN);
      },
      onBntSetting: function onBntSetting(event) {
        require("Audio").playEffect("hall", "button_nomal.mp3");
        this.settingN = cc.instantiate(this.settingP);
        this.menuParentN.addChild(this.settingN);
        this.settingN.getComponent("set").hideWriteOffBtn();
      },
      initSkin: function initSkin() {
        var _this = this;
        var curBgIndex = cc.sys.localStorage.getItem("MJBgIndex") || this.defautSkin;
        var backN = this.skinN.getChildByName("back");
        var btnClose = backN.getChildByName("btnQuit");
        btnClose.on("touchend", function() {
          var animation = this.skinN.getComponent(cc.Animation);
          animation.play(animation.getClips()[1].name).once("finished", function() {
            this.skinN.removeFromParent();
          }, this);
        }, this);
        backN.refreshData = function() {
          for (var i = 1; i < 5; i++) {
            var skinChild = backN.getChildByName("skin" + i);
            skinChild.getChildByName("choose").active = curBgIndex == i;
          }
        };
        var _loop = function _loop(i) {
          var skinChild = backN.getChildByName("skin" + i);
          skinChild.on("touchend", function() {
            curBgIndex = i;
            cc.sys.localStorage.setItem("MJBgIndex", i);
            this.refreGameBg();
            backN.refreshData();
          }, _this);
        };
        for (var i = 1; i < 5; i++) _loop(i);
        backN.refreshData();
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio",
    mjDataMgr: "mjDataMgr",
    mjGameManager: "mjGameManager",
    mjNetMgr: "mjNetMgr"
  } ],
  mjNetMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0c53cEZfWNEXL1BMf+CvH0b", "mjNetMgr");
    "use strict";
    var mjNetMgrSys = function mjNetMgrSys() {
      this.reqCB = function(moduleName, netName, cb) {
        fun.net.listen(netName, cb);
        this.messageList[moduleName].push(netName);
      };
      this.reqPCB = function(moduleName, netName, cb) {
        fun.net.pListen(netName, cb);
        this.pMessageList[moduleName].push(netName);
      };
      this.init = function(KEYS) {
        this.KEYS = KEYS;
        var messageList = {};
        var pMessageList = {};
        for (var k in this.KEYS) {
          var value = this.KEYS[k];
          messageList[value] = [];
          pMessageList[value] = [];
        }
        this.messageList = messageList;
        this.pMessageList = pMessageList;
      };
      this.rmNet = function(gameType) {
        cc.log("------rmNet---------, gameType", gameType);
        this.messageList[gameType].forEach(function(meName) {
          fun.net.rmListen(meName);
        });
        this.messageList[gameType] = [];
        this.pMessageList[gameType].forEach(function(meName) {
          fun.net.rmPListen(meName);
        });
        this.pMessageList[gameType] = [];
      };
    };
    var curMgr;
    module.exports = {
      init: function init() {
        var definedList = {};
        definedList[gameConst.gameType.maJiangWenLing] = require("wlmjNetMgr").new();
        definedList[gameConst.gameType.maJiangHuangYan] = require("hymjNetMgr").new();
        definedList[gameConst.gameType.scMahjong] = require("scmjNetMgr").new();
        var curGameType = fun.db.getData("RoomInfo").GameType;
        var mgrSys = definedList[curGameType];
        if (mgrSys) {
          mgrSys.prototype = new mjNetMgrSys();
          curMgr = new mgrSys();
          curMgr.init(this.KEYS);
          fun.net.setGameMsgCfg(curMgr.getNetCfg());
        } else fun.log("mj", "mjNetMgr init: this curGameType has no defined :" + curGameType);
      },
      getIns: function getIns() {
        return curMgr;
      },
      KEYS: {
        GAME: "GameMgr",
        MENU: "MenuUI",
        REB: "Reconnect_before",
        REA: "Reconnect_after",
        CHAT: "chatUI"
      },
      cSend: function cSend(key, data, handler) {
        if (curMgr[key]) {
          var argumentList = [];
          for (var i = 0; i < arguments.length; i++) 0 != i && argumentList.push(arguments[i]);
          curMgr[key].apply(curMgr, argumentList);
        } else fun.log("mj", "mjNetMgr cSend : --------key not  registe in mjNetMgr ---- key : " + key);
      }
    };
    cc._RF.pop();
  }, {
    hymjNetMgr: "hymjNetMgr",
    scmjNetMgr: "scmjNetMgr",
    wlmjNetMgr: "wlmjNetMgr"
  } ],
  mjOptsUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8d9c9JwrVZEwp4a0aqCsR1h", "mjOptsUI");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {
        var tagList = [];
        tagList[0] = "btnHu";
        tagList[1] = "btnGang";
        tagList[2] = "btnPeng";
        tagList[3] = "btnChi";
        tagList[4] = "btnHu";
        tagList[5] = "btnGang";
        tagList[6] = "btnGang";
        tagList[7] = "btnHu";
        tagList[8] = "btnGuo";
        this.ShowTagNodeList = tagList;
      },
      onDestroy: function onDestroy() {
        cc.log(" this opts prefab ui  destroy ");
      },
      getIsShowPai: function getIsShowPai(showTag) {
        var isShow = !(0 === showTag || 4 === showTag || 7 === showTag || 8 === showTag);
        return isShow;
      },
      init: function init(gameUI, eatObj, eatData) {
        var showTag = eatObj.dataIndex;
        this.gameUI = gameUI;
        this.eatObj = eatObj;
        var childName = this.ShowTagNodeList[showTag];
        var showNode = this.node.getChildByName(childName);
        this.eatData = eatData;
        var GameDefine = require("mjGameDefine");
        showNode.active = true;
        if (this.getIsShowPai(showTag)) {
          var mjNode = showNode.getChildByName("mj");
          var xiaType = GameDefine.DESKPOS_TYPE.XIA;
          var paiSprite = this.gameUI.getPaiSprite(eatObj.paiID);
          mjNode.getComponent(cc.Sprite).spriteFrame = paiSprite;
        }
      },
      onMeChilcked: function onMeChilcked() {
        this.eatObj.cb.call(this.gameUI, this.eatObj, this.eatData);
      }
    });
    cc._RF.pop();
  }, {
    mjGameDefine: "mjGameDefine"
  } ],
  mjPaiUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cf789vRTClG47F5WMshaagb", "mjPaiUI");
    "use strict";
    var log = cc.log;
    var normalColor = new cc.Color(255, 255, 255);
    var caiShengColor = new cc.Color(233, 217, 177);
    var chooseColor = new cc.Color(255, 185, 249);
    var GameDefine = require("mjGameDefine");
    var mjDataMgr = require("mjDataMgr");
    cc.Class({
      extends: cc.Component,
      properties: {
        paiAltas: cc.SpriteAtlas,
        pai3dAltas: cc.SpriteAtlas
      },
      init: function init() {
        var paiInfo = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        this.shouN = this.node.getChildByName("shou");
        this.pengN = this.node.getChildByName("peng");
        this.pengByN = this.node.getChildByName("pengBy");
        this.endN = this.node.getChildByName("end");
        this.gaiN = this.node.getChildByName("gai");
        this.gaiShouN = this.node.getChildByName("gaiShou");
        this.newTagN = this.node.getChildByName("newTag");
        this.effectZoneN = this.node.getChildByName("effect");
        var _norScale = mjDataMgr.get(mjDataMgr.KEYS.CFG).paiScale || 1;
        var paiScale = paiInfo.curScale || _norScale;
        this.node.scale = paiScale;
        var ShowType = GameDefine.PAISHOWTYPE;
        var nodeList = {};
        nodeList[ShowType.PENGBY] = this.pengByN;
        nodeList[ShowType.PENG] = this.pengN;
        nodeList[ShowType.SHOU] = this.shouN;
        nodeList[ShowType.END] = this.endN;
        nodeList[ShowType.GAI] = this.gaiN;
        nodeList[ShowType.SHOUGAI] = this.gaiShouN;
        this.TypeNodeList = nodeList;
      },
      initPaiSprite: function initPaiSprite(pai) {},
      refreshPaiNode: function refreshPaiNode(item, pai) {
        var paiInfo = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
        var contentN = item.getChildByName("content");
        if (contentN) {
          contentN.getComponent(cc.Sprite).spriteFrame = this.getPaiSprite(pai.getLocalId());
          contentN.skewX = paiInfo.skewX || 0;
          contentN.skewY = paiInfo.skewY || 0;
          contentN.scale = paiInfo.sfScale || 1;
          paiInfo.contentPos && contentN.setPosition(paiInfo.contentPos);
        }
        var caishengN = item.getChildByName("caisheng");
        var caishen3DN = item.getChildByName("caisheng3d");
        caishengN && (caishengN.active = pai.isCaiShen && !paiInfo.is3DView);
        caishen3DN && (caishen3DN.active = pai.isCaiShen && paiInfo.is3DView);
        var bgN = item.getChildByName("bg");
        if (bgN) {
          bgN.color = pai.isMagic ? caiShengColor : normalColor;
          if (paiInfo.bgFrameName) {
            var sf = this.getSpriteByInfo(paiInfo).getSpriteFrame(paiInfo.bgFrameName);
            bgN.getComponent(cc.Sprite).spriteFrame = sf;
            bgN.width = sf.getRect().width;
            bgN.height = sf.getRect().height;
          }
        }
      },
      getPaiSprite: function getPaiSprite(paiID) {
        var spriteName = "pj_" + paiID;
        var spriteFrame = this.paiAltas.getSpriteFrame(spriteName);
        return spriteFrame;
      },
      refresh: function refresh(pai, paiInfo) {
        this.init(paiInfo);
        this.pai = pai;
        this.hideAll();
        this.curPaiNode = this.TypeNodeList[pai.showType];
        this.curPaiNode.active = true;
        this.refreshPaiNode(this.curPaiNode, pai, paiInfo);
        this.newTagN.active = pai.isChuPai;
        this.curBgColor = pai.isMagic ? caiShengColor : normalColor;
      },
      hideAll: function hideAll() {
        for (var type in this.TypeNodeList) this.TypeNodeList[type].active = false;
      },
      showSamePaiTips: function showSamePaiTips(paiID) {
        var isChoose = paiID == this.pai.id;
        var curBgNode = this.curPaiNode.getChildByName("bg");
        curBgNode && (curBgNode.color = isChoose ? chooseColor : this.curBgColor);
      },
      addEffect: function addEffect(effNode, huTag) {
        this.effectZoneN.active = true;
        "dp" == huTag ? this.effectZoneN.getChildByName("dp").addChild(effNode) : "hu" == huTag && this.effectZoneN.getChildByName("hu").addChild(effNode);
      },
      setPengBgColor: function setPengBgColor(color) {
        this.curPaiNode.getChildByName("bg") && (this.curPaiNode.getChildByName("bg").color = color);
      },
      getSpriteByInfo: function getSpriteByInfo(paiInfo) {
        return paiInfo.is3DView ? this.pai3dAltas : this.paiAltas;
      }
    });
    cc._RF.pop();
  }, {
    mjDataMgr: "mjDataMgr",
    mjGameDefine: "mjGameDefine"
  } ],
  mjPaijuMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "996c1bIhUhPU7TgprP4fv4Z", "mjPaijuMgr");
    "use strict";
    var log = cc.log;
    var UIControlData = function UIControlData() {
      this.superInitRound = function() {
        this.showLen = 0;
        this.pengGangLen = 0;
      };
      this.initPaiNode = function(playerUI) {
        this.totalPaiPool = 20;
        this.playerUI = playerUI;
        var paiListNode = playerUI.paiListNode;
        this.pengGangPaiN = paiListNode.getChildByName("pengGang");
        this.shouPaiN = paiListNode.getChildByName("shouPai");
        this.dachuPaiN = paiListNode.getChildByName("dachuPai");
        this.faPaiAnimN = paiListNode.getChildByName("shouAnim");
        this.buhuaPaiN = paiListNode.getChildByName("buHua");
        this.gameUI = playerUI.gameUI;
        this.pengStartPos = this.pengGangPaiN.getPosition();
        this.paiListNode = paiListNode;
        this.setNodePool(playerUI.eyeType);
        this.init(paiListNode);
        var showType = require("mjGameDefine").PAISHOWTYPE;
        var zoneList = {};
        zoneList[showType.GAI] = this.pengGangHeng;
        zoneList[showType.SHOU] = this.shouWidth;
        zoneList[showType.END] = this.ENDWidth;
        zoneList[showType.PENG] = this.pengGangHeng;
        zoneList[showType.PENGBY] = this.pengGangZhi;
        zoneList[showType.SHOUGAI] = this.shouWidth;
        this.paiZoneList = zoneList;
      };
      this.getPaiPrefabByView = function(eyeType) {
        var paiPrefab = this.playerUI.pai2DPrefab;
        "3d" == eyeType && (paiPrefab = this.playerUI.pai3DPrefab);
        return paiPrefab;
      };
      this.setNodePool = function(eyeType) {
        this.cleanNodePool();
        this.eyeType = eyeType;
        var paiPrefab = this.getPaiPrefabByView(eyeType);
        this.paiPoolList = new cc.NodePool();
        for (var i = 0; i < this.totalPaiPool; i++) {
          var paiNode = cc.instantiate(paiPrefab);
          this.paiPoolList.put(paiNode);
        }
        this.curPaiPrefab = paiPrefab;
      };
      this.getPaiNode = function(pai) {
        var paiNode;
        if (this.paiPoolList.size() > 0) {
          paiNode = this.paiPoolList.get();
          paiNode.isIns = false;
        } else {
          paiNode = cc.instantiate(this.curPaiPrefab);
          paiNode.isIns = true;
        }
        paiNode.name = pai.udid;
        paiNode.defaultPos = paiNode.defaultPos || paiNode.getPosition();
        paiNode.setPosition(paiNode.defaultPos);
        paiNode.pai = pai;
        paiNode.active = true;
        paiNode.instance = this;
        return paiNode;
      };
      this.putPaiNode = function(paiNode) {
        this.OutPaiNode && paiNode == this.OutPaiNode && delete this.OutPaiNode;
        paiNode.active = false;
        paiNode.isIns ? paiNode.removeFromParent() : this.paiPoolList.put(paiNode);
      };
      this.cleanNodePool = function(curPaiPrefab) {
        this.paiPoolList && this.paiPoolList.clear();
      };
      this.onDestroy = function() {
        this.cleanNodePool();
        this._OnDestroy && this._OnDestroy();
      };
      this.checkPaiNode = function(parentN, paiList) {
        var self = this;
        fun.utils.forEach(paiList, function(pai) {
          var paiNode = parentN.getChildByName(pai.udid);
          if (!paiNode) {
            paiNode = self.getPaiNode(pai);
            parentN.addChild(paiNode);
          }
          paiNode.getComponent("mjPaiUI").refresh(pai);
        });
      };
      this.addShouPai = function(addPai) {
        this.addShouPaiData(addPai, this.shouPaiN);
        this.refreShouPai();
      };
      this.addShouPaiData = function(addPai, targetN) {
        var self = this;
        fun.utils.forEach(addPai, function(pai, index) {
          var paiNode = self.getPaiNode(pai);
          self.addTouchEvent && self.addTouchEvent(paiNode);
          targetN.addChild(paiNode);
        });
      };
      this.addFaPai = function(addPai) {
        this.addShouPaiData(addPai, this.faPaiAnimN);
        this.refreFaPai();
      };
      this.moPai = function(pai) {
        var paiNode = this.getPaiNode(pai);
        this.shouPaiN.addChild(paiNode);
        this.addTouchEvent && this.addTouchEvent(paiNode);
        var info = this.getShouPaiInfo(pai, this.shouLen, true, this.getPaiData().shouShangPai.length, paiNode);
        this.shouLen = info.shouLen;
        paiNode.getComponent("mjPaiUI").refresh(pai, info);
        paiNode.setPosition(info.pos);
        paiNode.setLocalZOrder(info.zOrder);
        this.refreRelativePos();
      };
      this.addOutPai = function(pai) {
        this.refreDachuPai();
      };
      this.updateBuHua = function() {
        this.refreBuhua();
      };
      this.refreBuhua = function() {
        this.checkPaiNode(this.buhuaPaiN, this.getPaiData().puhuaList);
        this.getPaiData().puhuaList.forEach(function(pai, index) {
          var paiNode = this.buhuaPaiN.getChildByName(pai.udid);
          var info = this.getBuhuaInfo(paiNode, index);
          paiNode.getComponent("mjPaiUI").refresh(pai, info);
          paiNode.setPosition(info.pos);
          paiNode.setLocalZOrder(info.zOrder);
        }.bind(this));
      };
      this.refreShouPai = function() {
        var shouPaiList = this.getPaiData().shouShangPai;
        this.shouLen = this.refreHandNode(shouPaiList, this.shouPaiN);
      };
      this.refreFaPai = function() {
        var faPaiList = this.getPaiData().faPaiList;
        this.refreHandNode(faPaiList, this.faPaiAnimN);
      };
      this.refreHandNode = function(paiList, handN) {
        var len = 0;
        fun.utils.forEach(paiList, function(pai, index) {
          var paiNode = handN.getChildByName(pai.udid);
          var info = this.getShouPaiInfo(pai, len, false, index, paiNode);
          paiNode.getComponent("mjPaiUI").refresh(pai, info);
          paiNode.setPosition(info.pos);
          paiNode.setLocalZOrder(info.zOrder);
          len = info.shouLen;
        }.bind(this));
        return len;
      };
      this.refreDachuPai = function() {
        var paiList = this.getPaiData().daPaiOutList;
        this.checkPaiNode(this.dachuPaiN, paiList);
        fun.utils.forEach(paiList, function(pai, index) {
          var paiNode = this.dachuPaiN.getChildByName(pai.udid);
          var info = this.getDachuInfo(index);
          paiNode.setPosition(info.pos);
          paiNode.getComponent("mjPaiUI").refresh(pai, info);
          paiNode.setLocalZOrder(info.zOrder);
        }.bind(this));
      };
      this.getPaiData = function() {
        return this.player.getPaiData.call(this.player);
      };
      this.initPlayer = function(player) {
        this.player = player;
      };
      this.refrePengGangPos = function() {
        var self = this;
        var GameDefine = require("mjGameDefine");
        fun.utils.forEach(this.getPaiData().pengGangPai.peng, function(item, index) {
          self.checkPaiNode(self.pengGangPaiN, item);
        });
        fun.utils.forEach(this.getPaiData().pengGangPai.gang, function(item, index) {
          self.checkPaiNode(self.pengGangPaiN, item);
        });
        var len = 0;
        var gangList = this.getPaiData().pengGangPai.gang;
        var pIndex = 0;
        gangList.forEach(function(item, index) {
          for (var i = 0; i < 4; i++) {
            var pai = item[i];
            var paiNode = self.pengGangPaiN.getChildByName(pai.udid);
            var info = self.getPengGangInfo(pai, len, i, pIndex);
            paiNode.setPosition(info.pos);
            paiNode.setLocalZOrder(info.zOrder);
            paiNode.getComponent("mjPaiUI").refresh(pai, info);
            len = info.len;
            3 != i && (pIndex += 1);
          }
          len += self.is3DView ? .8 * self.gangDiff : self.gangDiff * self.paiScale;
        });
        var pengList = this.getPaiData().pengGangPai.peng;
        pengList.forEach(function(item, index) {
          for (var i = 0; i < 3; i++) {
            var pai = item[i];
            var paiNode = self.pengGangPaiN.getChildByName(pai.udid);
            var info = self.getPengGangInfo(pai, len, i, pIndex);
            paiNode.setPosition(info.pos);
            paiNode.setLocalZOrder(info.zOrder);
            paiNode.getComponent("mjPaiUI").refresh(pai, info);
            len = info.len;
            pIndex += 1;
          }
          len += self.is3DView ? .8 * self.gangDiff : self.gangDiff * self.paiScale;
        });
        this.pengGangLen = len;
        this.refreRelativePos();
      };
      this.onFaPaiStart = function() {
        this.shouPaiN.opacity = 0;
        this.pengGangPaiN.opacity = 0;
      };
      this.onFaPaiEnd = function() {
        this.shouPaiN.opacity = 255;
        this.pengGangPaiN.opacity = 255;
      };
      this.refreRelativePos = function() {
        this.removeNodeChild(this.faPaiAnimN);
        this.setShouRelativePos(this.pengGangLen, this.shouLen);
      };
      this.showSamePaiTips = function(paiID) {
        fun.utils.forEach(this.dachuPaiN.children, function(item) {
          item.getComponent("mjPaiUI").showSamePaiTips(paiID);
        });
        fun.utils.forEach(this.pengGangPaiN.children, function(item) {
          item.getComponent("mjPaiUI").showSamePaiTips(paiID);
        });
      };
      this.rmShouPai = function(pai) {
        var paiNode = this.shouPaiN.getChildByName(pai.udid);
        this.putPaiNode(paiNode);
        this.refreShouPai();
      };
      this.daPai = function(pai) {
        var self = this;
        var paiNode = this.shouPaiN.getChildByName(pai.udid);
        var worldPos = this.shouPaiN.convertToWorldSpaceAR(paiNode.getPosition());
        var localPos = this.dachuPaiN.convertToNodeSpaceAR(worldPos);
        this.putPaiNode(paiNode);
        var daPaiNode = this.getPaiNode(pai);
        pai.setShowType(require("mjGameDefine").PAISHOWTYPE.END);
        daPaiNode.getComponent("mjPaiUI").refresh(pai);
        daPaiNode.setPosition(localPos);
        this.dachuPaiN.addChild(daPaiNode);
        var posIndex = this.dachuPaiN.children.length - 1;
        var targetInfo = this.getDachuInfo(posIndex);
        var moveTime = cc.pDistance(localPos, targetInfo.pos) / 2e3;
        var moveAct = cc.moveTo(moveTime, targetInfo.pos);
        var changeAct = cc.sequence(moveAct, cc.callFunc(function() {
          pai.isChuPai = true;
          daPaiNode.getComponent("mjPaiUI").refresh(pai, targetInfo);
          self.refreShouPai();
          self.refreDachuPai();
          self.playerUI.player.daPaiAnimEnd();
        }));
        daPaiNode.setLocalZOrder(999);
        daPaiNode.runAction(changeAct);
      };
      this.pengGangPai = function(spliceList) {
        var self = this;
        fun.utils.forEach(spliceList, function(pai) {
          self.removePaiNode(self.shouPaiN, pai.udid);
        });
        this.refreShouPai();
        this.refrePengGangPos();
      };
      this.removePaiNode = function(targetN, udid) {
        var paiNode = targetN.getChildByName(udid);
        paiNode && this.putPaiNode(paiNode);
      };
      this.removeDachuPai = function(udid) {
        this.removePaiNode(this.dachuPaiN, udid);
      };
      this.removeShouPai = function(udid) {
        this.removePaiNode(this.shouPaiN, udid);
        this.refreShouPai();
      };
      this.removeNodeChild = function(rmNode) {
        var self = this;
        fun.utils.forEach(rmNode.children, function(item) {
          self.putPaiNode(item);
        });
        rmNode && rmNode.children && rmNode.children.length && rmNode.removeAllChildren();
        rmNode._children = [];
      };
      this.removeAll = function() {
        this.removeNodeChild(this.shouPaiN);
        this.removeNodeChild(this.pengGangPaiN);
        this.removeNodeChild(this.dachuPaiN);
        this.removeNodeChild(this.buhuaPaiN);
      };
      this.showDpAnim = function(pai) {
        var dpNode = cc.instantiate(this.gameUI.dianpaoPrefab);
        var paiNode = this.dachuPaiN.getChildByName(pai.udid);
        paiNode.getComponent("mjPaiUI").addEffect(dpNode, "dp");
        paiNode.setLocalZOrder(999);
        dpNode.getComponent("mjDpaoUI").show(this, pai.udid);
      };
      this.rmZimoPai = function(udid) {
        this.removeShouPai(udid);
      };
      this.addHupai = function(pai) {
        pai.setShowType(require("mjGameDefine").PAISHOWTYPE.PENG);
        this.moPai(pai);
        var paiNode = this.shouPaiN.getChildByName(pai.udid);
        var animanager = paiNode.getComponent(cc.Animation);
        animanager.playAdditive("mjHuAnim");
        var huNode = cc.instantiate(this.gameUI.hupaiPrefab);
        paiNode.getComponent("mjPaiUI").addEffect(huNode, "hu");
        huNode.getComponent("mjHuAnimUI").show();
      };
      this.setPaiEnd = function(isEated, pai) {
        isEated ? this.removeDachuPai(pai.udid) : this.refreDachuPai();
      };
    };
    module.exports = {
      init: function init() {
        var deskDefine = require("mjGameDefine").DESKPOS_TYPE;
        var deskList = {};
        deskList[deskDefine.XIA] = require("mjPaijuXia");
        deskList[deskDefine.SHANG] = require("mjPaijuShang");
        deskList[deskDefine.ZUO] = require("mjPaijuZuo");
        deskList[deskDefine.YOU] = require("mjPaijuYou");
        this.deskList = deskList;
      },
      newChild: function newChild(deskType) {
        this.deskList || this.init();
        var child = this.deskList[deskType].instance;
        child.prototype = new UIControlData();
        return new child();
      }
    };
    cc._RF.pop();
  }, {
    mjGameDefine: "mjGameDefine",
    mjPaijuShang: "mjPaijuShang",
    mjPaijuXia: "mjPaijuXia",
    mjPaijuYou: "mjPaijuYou",
    mjPaijuZuo: "mjPaijuZuo"
  } ],
  mjPaijuShang: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b41d7Jo5nRD2Youv8fUlAS+", "mjPaijuShang");
    "use strict";
    var mjDataMgr = require("mjDataMgr");
    var shangControl = function shangControl() {
      this.init = function() {
        this.paiScale = mjDataMgr.get(mjDataMgr.KEYS.CFG).paiScale || 1;
        this.pengGangHeng = 41 * this.paiScale;
        this.pengGangZhi = 58 * this.paiScale;
        this.gangDiff = 10;
        this.EndWidth = 40;
        this.EndHeight = 50;
        this.shouWidth = 33 * this.paiScale;
        this.paiListNode.defX = this.paiListNode.defX || this.paiListNode.x;
        this.dachuPaiN.defX = this.dachuPaiN.defX || this.dachuPaiN.x;
        this.is3DView = "3D" == cc.sys.localStorage.getItem("mjEyeView");
        fun.event.add("mjViewChangeShang", "mjViewChange", this.onViewChange.bind(this));
        this.refrePaiNode();
      };
      this.initRound = function() {
        this.superInitRound();
        this.shouPaiN.x = this.pengStartPos.x;
        this.pengGangPaiN.x = this.pengStartPos.x;
      };
      this._OnDestroy = function() {
        fun.event.remove("mjViewChangeShang");
      };
      this.onViewChange = function() {
        this.is3DView = "3D" == cc.sys.localStorage.getItem("mjEyeView");
        if (!require("mjGameManager").isPlaying) return;
        this.refreDachuPai();
        this.refrePaiNode();
      };
      this.refrePaiNode = function() {
        this.shouPaiN.scaleX = this.is3DView ? .9 : 1;
        this.shouPaiN.scaleY = this.is3DView ? .8 : 1;
        this.pengGangPaiN.scaleX = this.is3DView ? .9 : 1;
        this.pengGangPaiN.scaleY = this.is3DView ? .8 : 1;
        this.buhuaPaiN.scaleX = this.is3DView ? .63 : .7;
        this.buhuaPaiN.scaleY = this.is3DView ? .63 : .7;
        this.paiListNode.x = this.is3DView ? this.paiListNode.defX - 40 : this.paiListNode.defX;
        this.dachuPaiN.x = this.is3DView ? this.dachuPaiN.defX + 40 : this.dachuPaiN.defX;
      };
      this.getPengGangInfo = function(pai, pengGangLen, index) {
        var info = {};
        info.zOrder = index;
        if (3 == index) {
          info.zOrder = 100;
          info.pos = cc.p(0 - pengGangLen + this.paiZoneList[pai.showType] + this.pengGangHeng, 10);
          info.len = pengGangLen;
        } else {
          info.pos = cc.p(0 - pengGangLen, 0);
          info.len = pengGangLen + this.paiZoneList[pai.showType];
        }
        return info;
      };
      this.setShouRelativePos = function(pengGangLen) {
        this.shouPaiN.x = this.pengGangPaiN.x - pengGangLen - 10;
      };
      this.setShouPaiPos = function(paiNode, pai, shouLen, isMo) {
        var width = this.paiZoneList[pai.showType];
        shouLen = isMo ? shouLen + width / 2 : shouLen;
        paiNode.setPosition(cc.p(0 - shouLen, 0));
        return shouLen + width;
      };
      this.getShouPaiInfo = function(pai, shouLen, isMo, index) {
        var info = {};
        info.zOrder = index;
        shouLen = isMo ? shouLen + this.shouWidth / 2 : shouLen;
        info.pos = cc.p(0 - shouLen, 0);
        info.shouLen = shouLen + this.shouWidth;
        var PaiType = require("mjGameDefine").PAISHOWTYPE;
        shouLen = isMo ? shouLen + this.shouWidth / 2 : shouLen;
        info.pos = cc.p(0 - shouLen, 0);
        pai.showType == PaiType.PENG ? info.shouLen = shouLen + 1.26 * this.shouWidth : info.shouLen = shouLen + this.shouWidth;
        return info;
      };
      this.getDachuInfo = function(index) {
        var horizontal = 11;
        var honIndex = index % horizontal;
        var verIndex = Math.floor(index / horizontal);
        var info = {};
        var startScale = .7;
        var zoomScale = .972;
        info.is3DView = this.is3DView;
        var mj3DLen = [ 0, 46, 92, 137, 184, 229, 275.5, 320, 365.5, 409.5, 454 ];
        if (this.is3DView) {
          info.bgFrameName = "s_d_" + (10 - honIndex);
          var curScale = startScale * Math.pow(zoomScale, verIndex);
          var len = -4.8 * verIndex - 60 + mj3DLen[honIndex] * curScale * -1;
          info.pos = cc.p(len, 53 * Math.pow(.978, verIndex) * startScale * verIndex - 10);
          info.curScale = curScale;
          info.zOrder = -20 * verIndex + honIndex * (honIndex > 5 ? -1 : 1);
          info.skewX = 1.5 * (honIndex - 5) * curScale;
          info.sfScale = .9;
          info.contentPos = cc.p(-22.7 - honIndex / 8, 10);
        } else {
          info.pos = cc.p(0 - honIndex * this.EndWidth, verIndex * this.EndHeight);
          info.bgFrameName = "pz_tang";
          info.zOrder = 100 - index;
          info.curScale = .84;
          info.sfScale = 1.1;
          info.contentPos = cc.p(-25, 10);
        }
        return info;
      };
      this.getBuhuaInfo = function(paiNode, index) {
        var info = {};
        info.zOrder = index;
        var startScale = .7;
        var zoomScale = .972;
        var mj3DLen = [ 0, 46, 92, 137, 184, 229, 275.5, 320, 365.5, 409.5, 454 ];
        info.pos = cc.p(-40 * index, 0);
        info.bgFrameName = "pz_tang";
        info.curScale = .84;
        return info;
      };
    };
    module.exports = {
      instance: shangControl
    };
    cc._RF.pop();
  }, {
    mjDataMgr: "mjDataMgr",
    mjGameDefine: "mjGameDefine",
    mjGameManager: "mjGameManager"
  } ],
  mjPaijuXia: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ebbf50agXZPTZHvwW91qnQt", "mjPaijuXia");
    "use strict";
    var mjDataMgr = require("mjDataMgr");
    var log = cc.log;
    var xiaControl = function xiaControl() {
      this.init = function(paiListNode) {
        this.paiScale = mjDataMgr.get(mjDataMgr.KEYS.CFG).paiScale || 1;
        this.pengGangHeng = 60 * this.paiScale;
        this.pengGangZhi = 80 * this.paiScale;
        this.shouWidth = 84 * this.paiScale;
        this.EndWidth = 40;
        this.EndHeight = -53;
        this.gangDiff = 20;
        this.outPaiDis = 10 * this.paiScale;
        this.paiBackHitzoneN = paiListNode.getChildByName("paiBackHitzone");
        this.paiBackHitzoneN.on("touchend", this.showPaiBack, this);
        this.is3DView = "3D" == cc.sys.localStorage.getItem("mjEyeView");
        fun.event.add("mjViewChangeXia", "mjViewChange", this.onViewChange.bind(this));
        this.refrePaiNode();
      };
      this._OnDestroy = function() {
        fun.event.remove("mjViewChangeXia");
      };
      this.onViewChange = function() {
        this.is3DView = "3D" == cc.sys.localStorage.getItem("mjEyeView");
        if (!require("mjGameManager").isPlaying) return;
        this.refreDachuPai();
        this.refrePaiNode();
      };
      this.refrePaiNode = function() {
        this.buhuaPaiN.scaleX = this.is3DView ? .72 : .8;
        this.buhuaPaiN.scaleY = this.is3DView ? .72 : .8;
      };
      this.initRound = function() {
        this.superInitRound();
        this.OutPaiNode = void 0;
        this.shouPaiN.x = this.pengStartPos.x;
        this.pengGangPaiN.x = this.pengStartPos.x;
      };
      this.superPutPaiNode = this.putPaiNode;
      this.putPaiNode = function(paiNode) {
        this.rmTouchEvent(paiNode);
        this.superPutPaiNode(paiNode);
      };
      this.getShouPaiInfo = function(pai, shouLen, isMo, index, paiNode) {
        var PaiType = require("mjGameDefine").PAISHOWTYPE;
        var info = {};
        info.zOrder = index;
        shouLen = isMo ? shouLen + this.shouWidth / 2 : shouLen;
        info.pos = cc.p(shouLen, paiNode.y);
        info.shouLen = shouLen + this.shouWidth;
        info.curScale = this.paiScale;
        pai.showType == PaiType.PENG && (info.curScale = 1.4 * info.curScale);
        return info;
      };
      this.getPengGangInfo = function(pai, pengGangLen, index) {
        var info = {};
        info.zOrder = index;
        if (3 == index) {
          info.zOrder = 100;
          info.pos = cc.p(pengGangLen - this.paiZoneList[pai.showType] - this.pengGangHeng, 18);
          info.len = pengGangLen;
        } else {
          info.pos = cc.p(pengGangLen, 0);
          info.len = pengGangLen + this.paiZoneList[pai.showType];
        }
        return info;
      };
      this.setShouRelativePos = function(pengGangLen, shouLen) {
        var totalLen = this.paiListNode.width * this.paiScale;
        this.pengGangPaiN.x = (totalLen - shouLen * this.paiScale - pengGangLen * this.paiScale) / 2;
        this.shouPaiN.x = this.pengGangPaiN.x + pengGangLen;
      };
      this.getDachuInfo = function(index) {
        var horizontal = 11;
        var honIndex = index % horizontal;
        var verIndex = Math.floor(index / horizontal);
        var info = {};
        var startScale = .73;
        var zoomScale = 1.03;
        info.is3DView = this.is3DView;
        var mj3Ddis = [ 0, 56, 112, 166.5, 223, 277.5, 332, 384.5, 438.5, 490.5, 544.5, 598 ];
        if (this.is3DView) {
          info.bgFrameName = "x_d_" + honIndex;
          var curScale = startScale * Math.pow(zoomScale, verIndex);
          var len = -7 * verIndex + mj3Ddis[honIndex] * curScale - 15;
          info.pos = cc.p(len, -43 * Math.pow(1.016, verIndex) * verIndex);
          info.curScale = 1.2 * curScale;
          info.zOrder = 20 * verIndex + honIndex * (honIndex > 5 ? -1 : 1);
          info.sfScale = .84;
          if (honIndex > 5) {
            info.skewX = 5 - honIndex;
            info.contentPos = cc.p(20.5 + .9 * honIndex, 12);
          } else {
            info.skewX = 7.5 - 1.5 * honIndex;
            info.contentPos = cc.p(27.5 - .5 * honIndex, 12);
          }
        } else {
          info.pos = cc.p(honIndex * this.EndWidth, verIndex * this.EndHeight);
          info.bgFrameName = "pz_tang";
          info.zOrder = index;
          info.curScale = 1;
          info.sfScale = .84;
          info.contentPos = cc.p(25, 9);
        }
        return info;
      };
      this.getBuhuaInfo = function(paiNode, index) {
        var info = {};
        info.zOrder = index;
        var startScale = .73;
        var zoomScale = 1.03;
        var mj3Ddis = [ 0, 56, 112, 166.5, 223, 277.5, 332, 384.5, 438.5, 490.5, 544.5, 598 ];
        var horizontal;
        var honIndex;
        var verIndex;
        var curScale;
        var len;
        info.pos = cc.p(40 * index, 0);
        info.bgFrameName = "pz_tang";
        info.sfScale = .84;
        info.curScale = 1;
        info.contentPos = cc.p(25, 9);
        return info;
      };
      this.addTouchEvent = function(paiNode) {
        paiNode.on("touchend", this.onPaiNodeClicked, paiNode);
        paiNode.on("touchcancel", this.onPaiNodeClicked, paiNode);
        paiNode.on("touchmove", this.onPaiNodeMove, paiNode);
        paiNode.on("touchstart", this.onPaiNodeStart, paiNode);
      };
      this.rmTouchEvent = function(paiNode) {
        paiNode.off("touchend", this.onPaiNodeClicked, paiNode);
        paiNode.off("touchcancel", this.onPaiNodeClicked, paiNode);
        paiNode.off("touchmove", this.onPaiNodeMove, paiNode);
        paiNode.off("touchstart", this.onPaiNodeStart, paiNode);
      };
      this.onPaiNodeMove = function(event) {
        var self = this.instance;
        var paiNode = this;
        if (!self.playerUI.player.isTrunToMe()) return;
        self.paiMovePos.x += event.getDelta().x;
        self.paiMovePos.y += event.getDelta().y;
        if (self.dragPai) self.updateDragPos(); else {
          var moveDistance = Math.abs(cc.pDistance(self.dragDefaultPos, self.paiMovePos));
          if (moveDistance > 10) {
            var pai = paiNode.pai;
            pai.setShowType(require("mjGameDefine").PAISHOWTYPE.SHOU);
            self.dragPai = self.getPaiNode(pai);
            self.dragPai.getComponent("mjPaiUI").refresh(pai);
            self.playerUI.player.showChoosePai(paiNode.pai);
            self.shouPaiN.addChild(self.dragPai);
            self.dragPai.setLocalZOrder(999);
            self.updateDragPos();
          }
        }
      };
      this.onPaiNodeStart = function() {
        log("-this.onPaiNodeStart---");
        var self = this.instance;
        var paiNode = this;
        self.paiMovePos = paiNode.getPosition();
        self.dragDefaultPos = paiNode.getPosition();
      };
      this.updateDragPos = function() {
        log("-this.onPaiNodeStart---");
        this.dragPai.setPosition(this.paiMovePos);
      };
      this.onPaiNodeClicked = function() {
        var self = this.instance;
        var paiNode = this;
        if (self.dragPai) self.onDragEnd(paiNode); else if (self.OutPaiNode) if (paiNode.name == self.OutPaiNode.name) {
          self.lastTime = self.lastTime || 0;
          var nowTime = new Date().getTime();
          if (nowTime - self.lastTime > 1e3) {
            self.playerUI.player.turnToDaPai(paiNode.pai);
            self.lastTime = nowTime;
          }
          self.showPaiBack();
        } else {
          self.showPaiBack();
          self.showPaiOut(paiNode);
        } else self.showPaiOut(paiNode);
      };
      this.showPaiOut = function(paiNode) {
        this.OutPaiNode = paiNode;
        paiNode.y += this.outPaiDis;
        this.playerUI.player.showChoosePai(paiNode.pai);
        this.paiBackHitzoneN.active = true;
      };
      this.showPaiBack = function() {
        this.paiBackHitzoneN.active = false;
        this.OutPaiNode && (this.OutPaiNode.y -= this.outPaiDis);
        delete this.OutPaiNode;
        this.playerUI.player.showChoosePai(-999);
      };
      this.onDragEnd = function(paiNode) {
        var moveDistance = this.paiMovePos.y - this.dragDefaultPos.y;
        this.putPaiNode(this.dragPai);
        this.dragPai = void 0;
        this.playerUI.player.showChoosePai(-999);
        moveDistance > 100 && this.playerUI.player.turnToDaPai(paiNode.pai);
      };
      this.getNewMoveAction = function(newPos, curPos) {
        var moveX = newPos.x - curPos.x;
        var action1 = cc.moveBy(.1, cc.p(0, 70));
        var action2 = cc.moveBy(this.getDisTime(newPos, curPos), cc.p(moveX, 0));
        var action3 = cc.moveBy(.1, cc.p(0, -70));
        return cc.sequence(action1, action2, action3);
      };
    };
    module.exports = {
      instance: xiaControl
    };
    cc._RF.pop();
  }, {
    mjDataMgr: "mjDataMgr",
    mjGameDefine: "mjGameDefine",
    mjGameManager: "mjGameManager"
  } ],
  mjPaijuYou: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "26be4Uvv8xHCqHPaCnznT0C", "mjPaijuYou");
    "use strict";
    var mjDataMgr = require("mjDataMgr");
    var youControl = function youControl() {
      this.init = function() {
        this.paiScale = mjDataMgr.get(mjDataMgr.KEYS.CFG).paiScale || 1;
        this.pengGangHeng = 28 * this.paiScale;
        this.pengGangZhi = 41 * this.paiScale;
        this.gangDiff = 20;
        this.shouWidth = 26 * this.paiScale;
        this.EndWidth = 49;
        this.EndHeight = 28;
        this.is3DView = "3D" == cc.sys.localStorage.getItem("mjEyeView");
        fun.event.add("mjViewChangeYou", "mjViewChange", this.onViewChange.bind(this));
      };
      this.initRound = function() {
        this.superInitRound();
        this.shouPaiN.y = this.pengStartPos.y;
        this.pengGangPaiN.y = this.pengStartPos.y;
      };
      this._OnDestroy = function() {
        fun.event.remove("mjViewChangeYou");
      };
      this.onViewChange = function() {
        this.is3DView = "3D" == cc.sys.localStorage.getItem("mjEyeView");
        if (!require("mjGameManager").isPlaying) return;
        this.refreDachuPai();
        this.checkPaiNode(this.shouPaiN, this.getPaiData().shouShangPai);
        this.refreShouPai();
        this.refreBuhua();
        this.refrePengGangPos();
      };
      this.setShouPaiPos = function(paiNode, pai, shouLen, isMo, index) {
        var width = this.paiZoneList[pai.showType];
        shouLen = isMo ? shouLen + width / 2 : shouLen;
        paiNode.setPosition(cc.p(0, shouLen));
        paiNode.setLocalZOrder(100 - index);
        return shouLen + width;
      };
      this.getShouPaiInfo = function(pai, shouLen, isMo, index) {
        var info = {};
        info.zOrder = 100 - index;
        info.is3DView = this.is3DView;
        info.bgFrameName = this.getBgFrame(pai);
        if (this.is3DView) {
          var gangList = this.getPaiData().pengGangPai.gang;
          var pengList = this.getPaiData().pengGangPai.peng;
          var pIndex = 3 * (gangList.length + pengList.length) + index;
          shouLen = isMo ? shouLen + this.shouWidth / 2 : shouLen;
          info = this.getPai3dInfo(pai, pIndex, shouLen, info);
          var width = 26 * info.posScale * .9;
          info.shouLen = shouLen + width;
        } else {
          shouLen = isMo ? shouLen + this.shouWidth / 2 : shouLen;
          info.pos = cc.p(0, shouLen);
          info.shouLen = shouLen + this.shouWidth;
        }
        return info;
      };
      this.getBgFrame = function(pai) {
        var PaiType = require("mjGameDefine").PAISHOWTYPE;
        var bgFrameName = "";
        pai.showType == PaiType.PENG ? bgFrameName = this.is3DView ? "y_p_0" : "zy_heng" : pai.showType == PaiType.PENGBY ? bgFrameName = this.is3DView ? "y_pb_0" : "zy_tang" : pai.showType == PaiType.SHOUGAI ? bgFrameName = this.is3DView ? "y_gai" : "zy_gai" : pai.showType == PaiType.SHOU ? bgFrameName = this.is3DView ? "y_s_0" : "zy_shou" : pai.showType == PaiType.END ? bgFrameName = this.is3DView ? "y_d_" : "zy_heng" : pai.showType == PaiType.GAI && (bgFrameName = this.is3DView ? "y_gai" : "zy_gai");
        return bgFrameName;
      };
      this.getPai3dInfo = function(pai, index, shouLen, info) {
        var PaiType = require("mjGameDefine").PAISHOWTYPE;
        var startScale = .64;
        var zoomScale = .988;
        info.posScale = .94 * Math.pow(.99, index);
        info.is3DView = this.is3DView;
        info.pos = cc.p(-7 * index * info.posScale - 20, shouLen);
        info.curScale = startScale * Math.pow(zoomScale, index);
        if (pai.showType == PaiType.SHOUGAI) info.curScale = 1.2 * info.curScale; else if (pai.showType == PaiType.PENG) {
          info.curScale = 1.288 * info.curScale;
          info.posScale = .98 * Math.pow(.992, index);
          info.skewY = 15;
          info.contentPos = cc.p(-30, 32);
        } else if (pai.showType == PaiType.PENGBY) {
          info.curScale = 1.288 * info.curScale;
          info.skewX = -16;
          info.contentPos = cc.p(-22, 34);
          info.posScale = .828 * Math.pow(.992, index);
          index % 3 == 0 && (info.pos.x += 2 * info.posScale);
        } else if (pai.showType == PaiType.GAI) {
          info.curScale = startScale * Math.pow(zoomScale, index) * 1.196;
          info.posScale = .828 * info.posScale;
          info.pos = cc.p(-7 * index * info.posScale - 20, shouLen);
        }
        return info;
      };
      this.getDachuInfo = function(index) {
        var horizontal = 11;
        var honIndex = index % horizontal;
        var verIndex = Math.floor(index / horizontal);
        var info = {};
        var startScale = .64;
        var zoomScale = .984;
        info.zOrder = Math.floor(100 - 20 * verIndex - honIndex);
        info.is3DView = this.is3DView;
        if (this.is3DView) {
          info.bgFrameName = "y_d_" + verIndex;
          var curScale = startScale * Math.pow(zoomScale, honIndex);
          info.pos = cc.p(verIndex * (64 * startScale) - 7.2 * startScale * honIndex - verIndex * Math.pow(1.24, honIndex) - 18, 46 * honIndex * startScale * Math.pow(.992, honIndex) - 5);
          info.curScale = curScale;
          info.skewY = 10;
          info.sfScale = 1.2;
          info.contentPos = cc.p(-32, 40);
        } else {
          info.pos = cc.p(verIndex * this.EndWidth, honIndex * this.EndHeight);
          info.bgFrameName = "zy_heng";
          info.curScale = .86;
          info.contentPos = cc.p(-28, 35);
        }
        return info;
      };
      this.getBuhuaInfo = function(paiNode, index) {
        var info = {};
        info.zOrder = 100 - index;
        info.is3DView = this.is3DView;
        if (this.is3DView) {
          var startScale = .64;
          var zoomScale = .984;
          info.bgFrameName = "y_d_2";
          var curScale = startScale * Math.pow(zoomScale, index);
          info.pos = cc.p(-12 * index * curScale - 40, 46 * index * curScale * Math.pow(1.008, index));
          info.curScale = curScale;
          info.contentPos = cc.p(-32, 40);
          info.skewY = 10;
          info.sfScale = 1.2;
        } else {
          info.pos = cc.p(0, 28 * index);
          info.bgFrameName = "zy_heng";
          info.contentPos = cc.p(-28, 35);
        }
        return info;
      };
      this.getPengGangInfo = function(pai, pengGangLen, index, pIndex) {
        var PaiType = require("mjGameDefine").PAISHOWTYPE;
        var info = {};
        info.zOrder = 100 - pIndex;
        var width = this.paiZoneList[pai.showType];
        info.is3DView = this.is3DView;
        info.len = pengGangLen;
        info.bgFrameName = this.getBgFrame(pai);
        if (this.is3DView) {
          info = this.getPai3dInfo(pai, pIndex, pengGangLen, info);
          width *= info.posScale;
          if (3 == index) {
            info.zOrder = 100;
            info.pos.y -= 1.6 * this.pengGangHeng * info.posScale;
            info.pos.x += 22 * info.posScale;
          }
        } else {
          if (3 == index) {
            info.zOrder = 100;
            info.pos = cc.p(0, pengGangLen - this.pengGangZhi - 4);
          } else info.pos = cc.p(0, pengGangLen);
          if (pai.showType == PaiType.PENG) {
            info.curScale = .98 * this.paiScale;
            info.contentPos = cc.p(-30, 34);
          } else if (pai.showType == PaiType.PENGBY) {
            info.curScale = .92 * this.paiScale;
            info.contentPos = cc.p(-22, 39);
          } else pai.showType == PaiType.GAI && (info.curScale = .94 * this.paiScale);
        }
        info.len = 3 != index ? info.len + width : info.len;
        return info;
      };
      this.setShouRelativePos = function(pengGangLen, shouLen) {
        var totalLen = this.paiListNode.height;
        this.pengGangPaiN.y = (totalLen - shouLen - pengGangLen) / 2;
        this.shouPaiN.y = this.pengGangPaiN.y + pengGangLen;
      };
    };
    module.exports = {
      instance: youControl
    };
    cc._RF.pop();
  }, {
    mjDataMgr: "mjDataMgr",
    mjGameDefine: "mjGameDefine",
    mjGameManager: "mjGameManager"
  } ],
  mjPaijuZuo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7d5c49LokBBmbt9jW/T1VMh", "mjPaijuZuo");
    "use strict";
    var mjDataMgr = require("mjDataMgr");
    var zuoControl = function zuoControl() {
      this.init = function() {
        this.paiScale = mjDataMgr.get(mjDataMgr.KEYS.CFG).paiScale || 1;
        this.pengGangHeng = 28 * this.paiScale;
        this.pengGangZhi = 41 * this.paiScale;
        this.gangDiff = 20;
        this.shouWidth = 26 * this.paiScale;
        this.EndWidth = -48.5;
        this.EndHeight = -28;
        this.is3DView = "3D" == cc.sys.localStorage.getItem("mjEyeView");
        fun.event.add("mjViewChangZuo", "mjViewChange", this.onViewChange.bind(this));
      };
      this._OnDestroy = function() {
        fun.event.remove("mjViewChangZuo");
      };
      this.initRound = function() {
        this.superInitRound();
        this.shouPaiN.y = this.pengStartPos.y;
        this.pengGangPaiN.y = this.pengStartPos.y;
      };
      this.onViewChange = function() {
        this.is3DView = "3D" == cc.sys.localStorage.getItem("mjEyeView");
        if (!require("mjGameManager").isPlaying) return;
        this.refreDachuPai();
        this.checkPaiNode(this.shouPaiN, this.getPaiData().shouShangPai);
        this.refreShouPai();
        this.refreBuhua();
        this.refrePengGangPos();
      };
      this.getBgFrame = function(pai) {
        var PaiType = require("mjGameDefine").PAISHOWTYPE;
        var bgFrameName = "";
        pai.showType == PaiType.PENG ? bgFrameName = this.is3DView ? "z_p_0" : "zy_heng" : pai.showType == PaiType.PENGBY ? bgFrameName = this.is3DView ? "z_pb_0" : "zy_tang" : pai.showType == PaiType.SHOUGAI ? bgFrameName = this.is3DView ? "z_gai" : "zy_gai" : pai.showType == PaiType.SHOU ? bgFrameName = this.is3DView ? "z_s_0" : "zy_shou" : pai.showType == PaiType.END ? bgFrameName = this.is3DView ? "z_d_" : "zy_heng" : pai.showType == PaiType.GAI && (bgFrameName = this.is3DView ? "z_gai" : "zy_gai");
        return bgFrameName;
      };
      this.getPengGangInfo = function(pai, pengGangLen, index, pIndex) {
        var PaiType = require("mjGameDefine").PAISHOWTYPE;
        var info = {};
        info.zOrder = index;
        var width = this.paiZoneList[pai.showType];
        info.is3DView = this.is3DView;
        info.len = pengGangLen;
        info.bgFrameName = this.getBgFrame(pai);
        if (this.is3DView) {
          info = this.getPai3dInfo(pai, pIndex, pengGangLen, info);
          width *= info.posScale;
          if (3 == index) {
            info.pos.y += 2.2 * this.pengGangHeng * info.posScale;
            info.pos.x += 8 * info.posScale;
          }
        } else {
          info.pos = 3 == index ? cc.p(5, 0 - pengGangLen + width + this.pengGangHeng) : cc.p(0, 0 - pengGangLen);
          if (pai.showType == PaiType.PENG) {
            info.contentPos = cc.p(-1, -16);
            info.curScale = .98 * this.paiScale;
          } else pai.showType == PaiType.GAI && (info.curScale = .92 * this.paiScale);
          pai.showType == PaiType.PENGBY && (info.contentPos = cc.p(0, -20));
        }
        info.len = 3 != index ? info.len + width : info.len;
        return info;
      };
      this.getShouPaiInfo = function(pai, shouLen, isMo, index) {
        var info = {};
        info.zOrder = index;
        info.is3DView = this.is3DView;
        info.bgFrameName = this.getBgFrame(pai);
        if (this.is3DView) {
          var gangList = this.getPaiData().pengGangPai.gang;
          var pengList = this.getPaiData().pengGangPai.peng;
          var pIndex = 3 * (gangList.length + pengList.length) + index;
          shouLen = isMo ? shouLen + this.shouWidth / 2 : shouLen;
          info = this.getPai3dInfo(pai, pIndex, shouLen, info);
          var width = 23.5 * info.posScale;
          info.shouLen = shouLen + width;
        } else {
          shouLen = isMo ? shouLen + this.shouWidth / 2 : shouLen;
          info.pos = cc.p(0, 0 - shouLen);
          info.shouLen = shouLen + this.shouWidth;
        }
        return info;
      };
      this.getPai3dInfo = function(pai, index, shouLen, info) {
        var PaiType = require("mjGameDefine").PAISHOWTYPE;
        var startScale = .5;
        var zoomScale = 1.022;
        info.posScale = .76 * Math.pow(1.018, index);
        info.pos = cc.p(-5 * index * info.posScale + 70, 0 - shouLen);
        info.curScale = startScale * Math.pow(zoomScale, index);
        if (pai.showType == PaiType.SHOUGAI) info.curScale = 1.4 * info.curScale; else if (pai.showType == PaiType.PENG) {
          info.curScale = 1.2 * info.curScale;
          info.skewY = -15;
          info.contentPos = cc.p(-4, -13);
          info.posScale = .64 * Math.pow(1.026, index);
          info.pos = cc.p(-6.5 * index * info.posScale * this.paiScale + 76, 0 - shouLen);
        } else if (pai.showType == PaiType.PENGBY) {
          info.skewX = 15;
          info.contentPos = cc.p(-4, -17.5);
          info.curScale = 1.3 * info.curScale;
          info.posScale = .6 * Math.pow(1.028, index);
          info.pos = cc.p(-6 * index * info.posScale * this.paiScale + 78 - index * this.paiScale, 0 - shouLen);
          index % 3 == 2;
        } else if (pai.showType == PaiType.GAI) {
          info.curScale = 1.1 * info.curScale;
          info.posScale = .7 * Math.pow(1.018, index);
          info.pos = cc.p(-6 * index * info.posScale + 78 - index, 0 - shouLen);
        }
        return info;
      };
      this.setDachuPaiPos = function(paiNode, index) {
        paiNode.setPosition(this.getDachuInfo(index).pos);
        paiNode.setLocalZOrder(index + 11);
      };
      this.getBuhuaInfo = function(paiNode, index) {
        var info = {};
        info.zOrder = index + 10;
        info.is3DView = this.is3DView;
        if (this.is3DView) {
          var startScale = .5446;
          var zoomScale = 1.0166;
          info.bgFrameName = "z_d_2";
          var curScale = startScale * Math.pow(zoomScale, index);
          info.pos = cc.p(-8 * index * curScale + 80, -46 * index * curScale * Math.pow(.99, index));
          info.curScale = curScale;
          info.skewY = -15;
          info.contentPos = cc.p(0, -2);
          info.sfScale = 1.3;
        } else {
          info.pos = cc.p(0, -28 * index);
          info.bgFrameName = "zy_heng";
          info.contentPos = cc.p(0, -4);
        }
        return info;
      };
      this.getDachuInfo = function(index) {
        var horizontal = 11;
        var honIndex = index % horizontal;
        var verIndex = Math.floor(index / horizontal);
        var info = {};
        var startScale = .5446;
        var zoomScale = 1.0166;
        info.is3DView = this.is3DView;
        info.zOrder = Math.floor(100 - 20 * verIndex + honIndex);
        if (this.is3DView) {
          info.bgFrameName = "z_d_" + verIndex;
          var curScale = startScale * Math.pow(zoomScale, honIndex);
          info.pos = cc.p(-64 * verIndex * curScale - 4 * honIndex + 20, -44 * honIndex * curScale * Math.pow(.992, honIndex) - 22);
          info.curScale = curScale;
          info.contentPos = cc.p(0, -2);
          info.skewY = -10;
          info.sfScale = 1.3;
        } else {
          info.pos = cc.p(verIndex * this.EndWidth, honIndex * this.EndHeight);
          info.bgFrameName = "zy_heng";
          info.curScale = .86;
          info.contentPos = cc.p(0, -4);
        }
        return info;
      };
      this.setShouRelativePos = function(pengGangLen, shouLen) {
        var totalLen = this.paiListNode.height;
        this.pengGangPaiN.y = (shouLen + pengGangLen - totalLen) / 2;
        this.shouPaiN.y = this.pengGangPaiN.y - pengGangLen;
      };
      this.getNewMoveAction = function(newPos, curPos) {
        var moveY = newPos.y - curPos.y;
        var action1 = cc.moveBy(.1, cc.p(20, 0));
        var action2 = cc.moveBy(this.getDisTime(newPos, curPos), cc.p(0, moveY));
        var action3 = cc.moveBy(.1, cc.p(-20, 0));
        return cc.sequence(action1, action2, action3);
      };
    };
    module.exports = {
      instance: zuoControl
    };
    cc._RF.pop();
  }, {
    mjDataMgr: "mjDataMgr",
    mjGameDefine: "mjGameDefine",
    mjGameManager: "mjGameManager"
  } ],
  mjPai: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fc927Qc5vpKOKgrmgkGbZt7", "mjPai");
    "use strict";
    var udidTag = 0;
    var Pai = function Pai(id) {
      this.id = id || 0;
      this.rotate = 0;
      this.sortId = id;
      this.udid = "pai_" + udidTag++;
      this.isCaiShen = false;
      this.isBaiDa = false;
      this.isGai = false;
      this.showIndex = 0;
      this.showType = require("mjGameDefine").PAISHOWTYPE.SHOU;
      this.refreshCaiShen = function() {
        var gameManager = require("mjGameManager");
        var caiShenInfo = gameManager.isCaiShenPai(this.id);
        this.isCaiShen = caiShenInfo.isCaiShen;
        this.isBaiDa = caiShenInfo.isBaiDa;
        this.isMagic = caiShenInfo.isMagic;
      };
      this.setRotate = function(rotate) {
        this.rotate = rotate;
      };
      this.refreshSort = function() {
        var gameManager = require("mjGameManager");
        this.sortId = gameManager.getSortId(id);
      };
      this.setIsGai = function(gai) {
        this.isGai = gai;
      };
      this.setShowType = function(showType) {
        this.showType = showType;
      };
      this.getLocalId = function() {
        return require("mjDataMgr").getInstance().getLocalPaiID(this.id);
      };
      this.refreshCaiShen();
    };
    module.exports = {
      new: function _new(id) {
        return new Pai(id);
      }
    };
    cc._RF.pop();
  }, {
    mjDataMgr: "mjDataMgr",
    mjGameDefine: "mjGameDefine",
    mjGameManager: "mjGameManager"
  } ],
  mjPlayerPai: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a8b3fDbHOlI15rfQ0EE4lp1", "mjPlayerPai");
    "use strict";
    var GameDefine = require("mjGameDefine");
    var log = cc.log;
    var gameManager = require("mjGameManager");
    var mjPai = require("mjPai");
    var paiObjCls = function paiObjCls() {
      this.setDeskType = function(posType) {
        this.desPosType = posType;
      };
      this.createPai = function(id) {
        return mjPai.new(id);
      };
      this.createFullPai = function(id) {
        var pai = this.createPai(id);
        pai.refreshCaiShen();
        pai.refreshSort();
        return pai;
      };
      this.creatPengGangPai = function(id) {
        var pai = this.createFullPai(id);
        pai.setShowType(GameDefine.PAISHOWTYPE.PENG);
        return pai;
      };
      this.spliceShouShangPai = function(targetID) {
        var splicePai;
        var handPaiList = this.getShouPaiList();
        for (var i = handPaiList.length - 1; i > -1; i--) {
          var curPai = handPaiList[i];
          if (curPai.id == targetID) {
            splicePai = handPaiList.splice(i, 1)[0];
            break;
          }
        }
        return splicePai;
      };
      this.chi = function(paiData) {
        var chiData = paiData.d;
        var isSelf = paiData.s;
        var paiID = paiData.card;
        var isSheng = paiData.sheng;
        log("THIS IS OLD chi", chiData, paiID);
        var rotateData = this.getEatPaiRotate(gameManager.lastChuPaiDir);
        var pai = this.creatPengGangPai(paiID);
        var pengList = [];
        this.pengGangPai.all.push(pai);
        for (var i = 0; i < 3; i++) {
          if (chiData[i] == paiID) continue;
          var spliceID = this.getSlipceID(isSelf, chiData[i]);
          var splicePai = this.spliceShouShangPai(spliceID);
          splicePai.id = chiData[i];
          this.pengGangPai.all.push(splicePai);
          splicePai.setShowType(GameDefine.PAISHOWTYPE.PENG);
          pengList.push(splicePai);
        }
        0 == rotateData.index ? pengList.unshift(pai) : pengList.push(pai);
        pengList[rotateData.index].setShowType(GameDefine.PAISHOWTYPE.PENGBY);
        this.addPengList(pengList);
        return pengList;
      };
      this.getCanChiData = function(paiid) {
        var chiData = [];
        var shouPaiList = this.getShouPaiList().slice();
        shouPaiList.push({
          id: paiid
        });
        for (var id = paiid - 2; id < paiid + 1; id++) {
          var count = 0;
          for (var i = 0; i < 3; i++) {
            var curID = id + i;
            var isExit = shouPaiList.some(function(pai) {
              return pai.id == curID;
            });
            isExit && (count += 1);
          }
          3 == count && chiData.push([ id, id + 1, id + 2 ]);
        }
        return chiData;
      };
      this.addPengList = function(pengList) {
        this.pengGangPai.peng.push(pengList);
      };
      this.peng = function(paiID, isSelf) {
        var rotateData = this.getEatPaiRotate(gameManager.lastChuPaiDir);
        var pai = this.creatPengGangPai(paiID);
        var pengList = [ pai ];
        var targetID = this.getSlipceID(isSelf, pai.id);
        log("--targetID-------", targetID);
        this.pengGangPai.all.push(pai);
        for (var i = 0; i < 2; i++) {
          var curPai = this.spliceShouShangPai(targetID);
          curPai.id = pai.id;
          curPai.setShowType(GameDefine.PAISHOWTYPE.PENG);
          pengList.push(curPai);
          this.pengGangPai.all.push(curPai);
        }
        0 != rotateData.rotate && pengList[rotateData.index].setShowType(GameDefine.PAISHOWTYPE.PENGBY);
        this.addPengList(pengList);
        this.pengCount += 1;
        return pengList;
      };
      this.gang_0 = function(id, isSelf) {
        var pai = this.creatPengGangPai(id);
        var gangList = [];
        this.pengGangPai.all.push(pai);
        for (var i = 0; i < this.pengGangPai.peng.length; i++) {
          var pengList = this.pengGangPai.peng[i];
          if (pengList[0].id === pai.id) {
            gangList = pengList;
            gangList.forEach(function(item) {
              item.setRotate(0);
            });
            var targetID = this.getSlipceID(isSelf, pai.id);
            var curPai = this.spliceShouShangPai(targetID);
            curPai.setShowType(GameDefine.PAISHOWTYPE.PENG);
            curPai.id = pai.id;
            gangList.push(curPai);
            this.pengGangPai.peng.splice(i, 1);
          }
        }
        this.pengGangPai.gang.push(gangList);
        return gangList;
      };
      this.gang_1 = function(id, isSelf) {
        var gangList = [];
        var targetID = this.getSlipceID(isSelf, id);
        for (var i = 0; i < 4; i++) {
          var curPai = this.spliceShouShangPai(targetID);
          curPai.id = id;
          var showTp = i < 3 ? GameDefine.PAISHOWTYPE.GAI : GameDefine.PAISHOWTYPE.PENG;
          curPai.setShowType(showTp);
          gangList.push(curPai);
          this.pengGangPai.all.push(curPai);
        }
        this.pengGangPai.gang.push(gangList);
        return gangList;
      }, this.gang_2 = function(id, isSelf) {
        var rotateData = this.getEatPaiRotate(gameManager.lastChuPaiDir);
        var pai = this.creatPengGangPai(id);
        var gangList = [ pai ];
        var targetID = this.getSlipceID(isSelf, pai.id);
        this.pengGangPai.all.push(pai);
        for (var i = 0; i < 3; i++) {
          var curPai = this.spliceShouShangPai(targetID);
          curPai.id = pai.id;
          curPai.setShowType(GameDefine.PAISHOWTYPE.PENG);
          gangList.push(curPai);
          this.pengGangPai.all.push(curPai);
        }
        var changeIndex = 0 == rotateData.rotate ? 3 : rotateData.index;
        gangList[changeIndex].setShowType(GameDefine.PAISHOWTYPE.PENGBY);
        this.pengGangPai.gang.push(gangList);
        return gangList;
      };
      this.addPai = function(id) {
        cc.log("---this.addPai--" + id);
        var pai = this.createFullPai(id);
        var shouPaiList = this.getShouPaiList();
        shouPaiList.push(pai);
        return pai;
      };
      this.getEatPaiRotate = function(chupaiDeskType) {
        var rotate = 90;
        for (var i = 1; i < 4; i++) {
          var targetDest = (this.desPosType + i) % 4;
          if (targetDest == chupaiDeskType) break;
          rotate -= 90;
        }
        var index = rotate > 0 ? 2 : 0;
        return {
          rotate: rotate,
          index: index
        };
      };
      this.checkPai = function(pai) {
        pai = pai || {};
        pai.id = pai.id || 0;
        pai.sortId = pai.sortId || 0;
      }, this.sortMajiang = function() {
        var shouPaiList = this.getShouPaiList();
        for (var i = 0; i < shouPaiList.length; i++) {
          var pai = shouPaiList[i];
          pai.refreshSort();
          pai.refreshCaiShen();
        }
        this.sortGroupPai(shouPaiList);
      };
      this.cleanReplayData = function() {};
      this.sortPengGangPai = function() {
        var gangList = this.pengGangPai.gang;
        for (var i = 0; i < gangList.length; i++) this.sortGroupPai(gangList[i]);
        var pengList = this.pengGangPai.peng;
        for (var _i = 0; _i < pengList.length; _i++) this.sortGroupPai(pengList[_i]);
      };
      this.sortGroupPai = function(groupPai) {
        var self = this;
        groupPai.sort(function(a, b) {
          self.checkPai(a);
          self.checkPai(b);
          return a.sortId - b.sortId;
        });
      };
      this.setShouPai = function(paiList, isGai) {
        var shouPaiList = this.getShouPaiList();
        var addShoupai = [];
        for (var i = 0; i < paiList.length; i++) {
          var pai = this.createPai(paiList[i]);
          shouPaiList.push(pai);
          pai.showType = isGai ? GameDefine.PAISHOWTYPE.SHOUGAI : pai.showType;
          addShoupai.push(pai);
        }
        return addShoupai;
      };
      this.faPai = function(paiList, isGai) {
        var addShoupai = [];
        for (var i = 0; i < paiList.length; i++) {
          var pai = this.createPai(paiList[i]);
          this.faPaiList.push(pai);
          pai.showType = isGai ? GameDefine.PAISHOWTYPE.SHOUGAI : pai.showType;
          addShoupai.push(pai);
        }
        return addShoupai;
      };
      this.uprightPai = function() {
        for (var i = 0; i < this.faPaiList.length; i++) this.faPaiList[i].showType = GameDefine.PAISHOWTYPE.SHOU;
      };
      this.gaiAllPai = function() {
        for (var i = 0; i < this.faPaiList.length; i++) {
          var pai = this.faPaiList[i];
          pai.refreshSort();
          pai.refreshCaiShen();
          this.faPaiList[i].showType = GameDefine.PAISHOWTYPE.SHOUGAI;
        }
        this.sortGroupPai(this.faPaiList);
      };
      this.cleanFaPaiList = function() {
        this.faPaiList = [];
      };
      this.resetPengGangPai = function(gangList, pengList) {
        this.resetPengGang("gang", gangList);
        this.resetPengGang("peng", pengList);
      };
      this.resetPengGang = function(name, paiList) {
        paiList = paiList || [];
        var self = this;
        var changeList = [];
        paiList.forEach(function(item) {
          item.type == GameDefine.EATPAI_TYPE.AnGang ? changeList.push(self.resetAngang(item)) : changeList.push(self.resetNorGangPeng(item));
        });
        this.pengGangPai[name] = changeList;
      };
      this.resetNorGangPeng = function(item) {
        var self = this;
        var mjDataMgr = require("mjDataMgr");
        var s = mjDataMgr.get(mjDataMgr.KEYS.POSIDS);
        var chuPaiDesk = mjDataMgr.get(mjDataMgr.KEYS.POSIDS)[item.pId];
        var rotateData = self.getEatPaiRotate(chuPaiDesk);
        var temList = [];
        item.data.forEach(function(id) {
          var pai = self.creatPengGangPai(id);
          temList.push(pai);
          self.pengGangPai.all.push(pai);
        });
        0 != rotateData.rotate && temList[rotateData.index].setShowType(GameDefine.PAISHOWTYPE.PENGBY);
        return temList;
      };
      this.resetAngang = function(item) {
        var self = this;
        var temList = [];
        item.data.forEach(function(id, index) {
          var pai = self.createFullPai(id);
          var showType = index < 3 ? GameDefine.PAISHOWTYPE.GAI : GameDefine.PAISHOWTYPE.PENG;
          pai.setShowType(showType);
          temList.push(pai);
          self.pengGangPai.all.push(pai);
        });
        return temList;
      };
      this.showPai = function(paiid) {
        var handPaiList = this.getShouPaiList();
        var spliceIndex = handPaiList.findIndex(function(item) {
          return item.id == paiid;
        });
        var chuPai = handPaiList.splice(spliceIndex, 1)[0];
        return chuPai;
      };
      this.buHuapai = function(idList) {
        idList.forEach(function(id) {
          var pai = this.createFullPai(id);
          pai.setShowType(GameDefine.PAISHOWTYPE.END);
          this.puhuaList.push(pai);
        }.bind(this));
      }, this.chuPai = function(udid, paiid) {
        var handPaiList = this.getShouPaiList();
        var spliceIndex = handPaiList.findIndex(function(item) {
          return item.udid == udid;
        });
        var randomIndex = Math.floor(Math.random() * handPaiList.length);
        spliceIndex = -1 == spliceIndex ? randomIndex : spliceIndex;
        var chuPai = handPaiList.splice(spliceIndex, 1)[0];
        this.daPaiOutList.push(chuPai);
        return chuPai;
      };
      this.getShouPaiList = function() {
        return this.shouShangPai;
      };
      this.init = function() {
        this.pengCount = 0;
        this.shouShangPai = [];
        this.faPaiList = [];
        this.pengGangPai = {};
        this.pengGangPai.all = [];
        this.pengGangPai.peng = [];
        this.pengGangPai.gang = [];
        this.daPaiOutList = [];
        this.puhuaList = [];
      };
    };
    var hymjPai = function hymjPai() {
      this.puhuaList = [];
      this.getSlipceID = function(isSelf, chiID) {
        return isSelf ? chiID : 0;
      };
    };
    var wlmjPai = function wlmjPai() {
      this.getSlipceID = function(isSelf, chiID) {
        return isSelf ? chiID : 0;
      };
      this.peng = function(paiID, isSelf) {
        var pai = this.creatPengGangPai(paiID);
        var pengList = [ pai ];
        var targetID = this.getSlipceID(isSelf, pai.id);
        this.pengGangPai.all.push(pai);
        for (var i = 0; i < 2; i++) {
          var curPai = this.spliceShouShangPai(targetID);
          curPai.id = pai.id;
          curPai.setShowType(GameDefine.PAISHOWTYPE.PENG);
          pengList.push(curPai);
          this.pengGangPai.all.push(curPai);
        }
        this.addPengList(pengList);
        this.pengCount += 1;
        return pengList;
      };
      this.gang_2 = function(id, isSelf) {
        var pai = this.creatPengGangPai(id);
        var gangList = [ pai ];
        var targetID = this.getSlipceID(isSelf, pai.id);
        this.pengGangPai.all.push(pai);
        for (var i = 0; i < 3; i++) {
          var curPai = this.spliceShouShangPai(targetID);
          curPai.id = pai.id;
          curPai.setShowType(GameDefine.PAISHOWTYPE.PENG);
          gangList.push(curPai);
          this.pengGangPai.all.push(curPai);
        }
        this.pengGangPai.gang.push(gangList);
        return gangList;
      };
      this.resetNorGangPeng = function(item) {
        var isChi = item.data[0] != item.data[1];
        if (isChi) return this.__proto__.resetNorGangPeng.call(this, item);
        var self = this;
        var mjDataMgr = require("mjDataMgr");
        var chuPaiDesk = mjDataMgr.get(mjDataMgr.KEYS.POSIDS)[item.pId];
        var rotateData = self.getEatPaiRotate(chuPaiDesk);
        var temList = [];
        item.data.forEach(function(id) {
          var pai = self.creatPengGangPai(id);
          temList.push(pai);
          self.pengGangPai.all.push(pai);
        });
        return temList;
      };
    };
    var hymjReplayPai = function hymjReplayPai() {
      this.puhuaList = [];
      this.getSlipceID = function(isSelf, chiID) {
        return chiID;
      };
      this.replayChupai = function(paiID) {
        var handPaiList = this.getShouPaiList();
        var spliceIndex = handPaiList.findIndex(function(item) {
          return item.id == paiID;
        });
        spliceIndex = -1 == spliceIndex ? 0 : spliceIndex;
        var chuPai = handPaiList.splice(spliceIndex, 1)[0];
        this.daPaiOutList.push(chuPai);
        return chuPai;
      };
      this.chuPai = function(udid, paiID) {
        return this.replayChupai(paiID);
      };
      this.cleanReplayData = function() {};
      this.setShouPai = function(paiList) {
        var shouPaiList = this.getShouPaiList();
        var addShoupai = [];
        for (var i = 0; i < paiList.length; i++) {
          var pai = this.createPai(paiList[i]);
          pai.setShowType(GameDefine.PAISHOWTYPE.PENG);
          shouPaiList.push(pai);
          addShoupai.push(pai);
        }
        return addShoupai;
      };
      this.addPai = function(id) {
        var pai = this.createFullPai(id);
        pai.setShowType(GameDefine.PAISHOWTYPE.PENG);
        var shouPaiList = this.getShouPaiList();
        shouPaiList.push(pai);
        return pai;
      };
    };
    var wlmjReplayPai = function wlmjReplayPai() {
      this.puhuaList = [];
      this.getSlipceID = function(isSelf, chiID) {
        return chiID;
      };
      this.replayChupai = function(paiID) {
        var handPaiList = this.getShouPaiList();
        var spliceIndex = handPaiList.findIndex(function(item) {
          return item.id == paiID;
        });
        spliceIndex = -1 == spliceIndex ? 0 : spliceIndex;
        var chuPai = handPaiList.splice(spliceIndex, 1)[0];
        this.daPaiOutList.push(chuPai);
        return chuPai;
      };
      this.chuPai = function(udid, paiID) {
        return this.replayChupai(paiID);
      };
      this.cleanReplayData = function() {};
      this.setShouPai = function(paiList) {
        var shouPaiList = this.getShouPaiList();
        var addShoupai = [];
        for (var i = 0; i < paiList.length; i++) {
          var pai = this.createPai(paiList[i]);
          pai.setShowType(GameDefine.PAISHOWTYPE.PENG);
          shouPaiList.push(pai);
          addShoupai.push(pai);
        }
        return addShoupai;
      };
      this.addPai = function(id) {
        var pai = this.createFullPai(id);
        pai.setShowType(GameDefine.PAISHOWTYPE.PENG);
        var shouPaiList = this.getShouPaiList();
        shouPaiList.push(pai);
        return pai;
      };
    };
    hymjPai.prototype = new paiObjCls();
    wlmjPai.prototype = new paiObjCls();
    hymjReplayPai.prototype = new paiObjCls();
    wlmjReplayPai.prototype = new wlmjPai();
    module.exports = {
      new: function _new() {
        var isReplay = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
        var dfDataList = {};
        dfDataList[gameConst.gameType.maJiangWenLing + "false"] = wlmjPai;
        dfDataList[gameConst.gameType.maJiangHuangYan + "false"] = hymjPai;
        dfDataList[gameConst.gameType.maJiangWenLing + "true"] = wlmjReplayPai;
        dfDataList[gameConst.gameType.maJiangHuangYan + "true"] = hymjReplayPai;
        var curGameType = fun.db.getData("RoomInfo").GameType;
        isReplay += "";
        var curMjSys = dfDataList[curGameType + isReplay];
        var paiObj;
        if (curMjSys) {
          paiObj = new curMjSys();
          paiObj.init();
        } else fun.log("mj", "mjPlayerPai new : curGameType: " + curGameType + "isReplay:" + isReplay + " has no defined");
        return paiObj;
      }
    };
    cc._RF.pop();
  }, {
    mjDataMgr: "mjDataMgr",
    mjGameDefine: "mjGameDefine",
    mjGameManager: "mjGameManager",
    mjPai: "mjPai"
  } ],
  mjPlayerUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2db50+WXphEJIPu080Bm706", "mjPlayerUI");
    "use strict";
    var GameDefine = require("mjGameDefine");
    var gameManager = require("mjGameManager");
    cc.Class({
      extends: cc.Component,
      properties: {
        pai2DPrefab: cc.Prefab,
        pai3DPrefab: cc.Prefab
      },
      onLoad: function onLoad() {},
      onDestroy: function onDestroy() {
        if (this.UIControl) {
          this.UIControl.onDestroy();
          this.UIControl = void 0;
        }
      },
      init: function init() {
        this.initNodeList();
        this.initChat();
      },
      initNodeList: function initNodeList() {
        this.paiListNode = this.node.getChildByName("paiNode");
        this.playerInfoN = this.node.getChildByName("info");
        this.chatN = this.node.getChildByName("chat");
        this.waitN = this.node.getChildByName("wait");
        this.statusTagN = this.playerInfoN.getChildByName("status");
        this.quanN = this.node.getChildByName("Quan");
        this.offLineNode = this.node.getChildByName("offLine");
        this.directN = this.node.getChildByName("direct");
        this.effectZoneN = this.node.getChildByName("effectZone");
        this.playerInfoN.on("touchend", this.onPlayerInfoClicked, this);
        this.chatN.active = true;
        this.playerInfoN.active = false;
        this.quanN.active = false;
        this.quanN.active = false;
        this.offLineNode.active = false;
        this.directN.active = false;
        this.totalDt = 0;
      },
      hideWaitName: function hideWaitName() {
        this.node.getChildByName("wait").getChildByName("label").active = false;
      },
      update: function update(dt) {
        this.totalDt += dt;
        if (this.totalDt > 1) {
          this.updateSecond();
          this.totalDt -= 1;
        }
      },
      updateSecond: function updateSecond() {
        this.chatN.updatTime();
      },
      initChat: function initChat() {
        this.hideAllChat();
        var handerList = {};
        handerList["emoji"] = this.showEmoji;
        handerList["text"] = this.showText;
        handerList["voice"] = this.showVoice;
        this.chatN.updatTime = function() {
          this.children.forEach(function(child) {
            child.time = child.time || 0;
            child.time -= 1;
            child.active = child.time > 0;
          });
        };
        this.handerList = handerList;
      },
      showChat: function showChat(data) {
        var hander = this.handerList[data.chatType];
        hander.call(this, data);
      },
      showEmoji: function showEmoji(data) {
        var emojiN = this.chatN.getChildByName("emoji");
        emojiN.active = true;
        var spAnim = emojiN.getComponent(sp.Skeleton);
        spAnim.setAnimation(0, data.content, true);
        emojiN.time = 4;
      },
      showText: function showText(data) {
        var textN = this.chatN.getChildByName("text");
        textN.active = true;
        var contentN = textN.getChildByName("content");
        contentN.getComponent(cc.Label).string = data.content;
        var Audio = require("Audio");
        var idx = data.index + 1 < 10 ? "0" + (data.index + 1) : data.index + 1;
        var talk = void 0, language = void 0, gameType = fun.db.getData("RoomInfo").GameType;
        var isWenLing = gameType === gameConst.gameType.maJiangWenLing;
        var isMandarin = parseInt(fun.gameCfg.voiceLanguage) === gameConst.voiceLanguage.mandarin;
        if (isWenLing) if (isMandarin) {
          talk = "_talk1";
          language = "mandarin";
        } else {
          language = "wlmj";
          talk = "_talk0";
        } else {
          talk = "_talk0";
          language = isMandarin ? "mandarin" : "hymj";
        }
        var voiceName = talk + idx + ".mp3";
        var sex = 2 == require("mjDataMgr").getInstance().getPlayerData(this.player.PlayerIdx).Sex ? "female" : "male";
        var voicePath = language + "/" + sex + voiceName;
        Audio.playEffect("mahjong", voicePath);
        textN.time = 4;
      },
      showVoice: function showVoice(data) {
        var voiceN = this.chatN.getChildByName("voice");
        voiceN.active = true;
        voiceN.time = data.length || 2;
      },
      hideAllChat: function hideAllChat() {
        this.chatN.children.forEach(function(item, index) {
          item.active = false;
        });
      },
      addBuhua: function addBuhua(buhuaList) {
        this.UIControl.addBuhua(buhuaList);
      },
      refreshPlayerData: function refreshPlayerData(playerData) {
        this.playerInfoN.active = void 0 !== playerData;
        this.waitN.active = void 0 === playerData;
        if (!playerData) return;
        var nameNode = this.playerInfoN.getChildByName("name");
        var scoreNode = this.playerInfoN.getChildByName("sore");
        var scoreLabel = scoreNode.getChildByName("content").getComponent(cc.Label);
        scoreLabel.string = playerData.xdhs || 0;
        nameNode.getComponent(cc.Label).string = playerData.showName;
        var imgNode = this.playerInfoN.getChildByName("icon");
        fun.utils.loadUrlRes(playerData.Icon, imgNode);
      },
      refrePlayerStatus: function refrePlayerStatus(status) {
        var noCardN = this.statusTagN.getChildByName("noCard");
        var readyN = this.statusTagN.getChildByName("ready");
        readyN.active = status == GameDefine.PLAYER_READY.READY;
        noCardN.active = status == GameDefine.PLAYER_READY.NO_CARD;
        this.offLineNode.active = status === GameDefine.PLAYER_READY.OFFLINE;
      },
      refreGameStatus: function refreGameStatus(status) {
        this.quanN.active = status == GameDefine.TURN_STATUS.TURNTOPLAY;
      },
      setDirection: function setDirection(direction) {
        this.directN.active = direction == GameDefine.DIRECTION_TYPE.DONG;
      },
      cleanPaiNode: function cleanPaiNode() {
        this.UIControl.removeAll();
      },
      showHuPaiAnim: function showHuPaiAnim(pai, hupaiData) {
        this.showPaiEndAnim(hupaiData);
        this.UIControl.addHupai(pai);
      },
      showPaiEndAnim: function showPaiEndAnim(hupaiData) {
        var animNode = cc.instantiate(this.paiEffectPrefab);
        this.effectZoneN.addChild(animNode);
        animNode.getComponent("mjAnimHelper").showSpeacilEndAnim(hupaiData);
      },
      initDeskPosType: function initDeskPosType(deskType, gameUI, player, paijuUIMgr) {
        this.deskType = deskType;
        this.gameUI = gameUI;
        this.paiEffectPrefab = gameUI.optEffectPrefab;
        this.player = player;
        this.paijuUIMgr = paijuUIMgr;
        this.eatType = "2d";
        var mjPaijuMgr = require("mjPaijuMgr");
        this.UIControl = mjPaijuMgr.newChild(deskType);
        this.UIControl.initPaiNode(this);
      },
      initRound: function initRound() {
        this.cleanPaiNode();
        this.UIControl.initRound();
      },
      onPlayerInfoClicked: function onPlayerInfoClicked() {
        this.player.showPlayerInfo();
      },
      showOptPaiAnim: function showOptPaiAnim(eatType) {
        var animNode = cc.instantiate(this.paiEffectPrefab);
        this.effectZoneN.addChild(animNode);
        animNode.getComponent("mjAnimHelper").showOptPaiAnim(eatType);
      },
      getInteractPos: function getInteractPos() {
        return this.playerInfoN.convertToWorldSpaceAR(cc.p(0, 0));
      },
      getPaiMgr: function getPaiMgr() {
        return this.UIControl;
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio",
    mjDataMgr: "mjDataMgr",
    mjGameDefine: "mjGameDefine",
    mjGameManager: "mjGameManager",
    mjPaijuMgr: "mjPaijuMgr"
  } ],
  mjPlayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e640cFixwhG7KzQXJybC/rW", "mjPlayer");
    "use strict";
    var GameDefine = require("mjGameDefine");
    var mjDataMgr = require("mjDataMgr");
    var gameManager = require("mjGameManager");
    var playerCls = function playerCls() {};
    playerCls.prototype.init = function(playerNode, desPosType, gameUI) {
      this.udidTag = 0;
      this.desPosType = desPosType;
      this.playerNode = playerNode;
      this.playerUI = playerNode.getComponent("mjPlayerUI");
      this.playerUI.init();
      this.playerUI.initDeskPosType(desPosType, gameUI, this);
      this.getPaiMgr().initPlayer(this);
    };
    playerCls.prototype.setPlayerIdx = function(idxs) {
      this.PlayerIdx = idxs;
    };
    playerCls.prototype.refreshData = function() {
      var playerData = mjDataMgr.getInstance().getPlayerData(this.PlayerIdx);
      this.playerUI.refreshPlayerData(playerData);
      this.UserId = playerData ? playerData.UserId : void 0;
    };
    playerCls.prototype.initPlayerStatus = function() {
      var playerData = mjDataMgr.getInstance().getPlayerData(this.PlayerIdx);
      var status = playerData ? playerData.Status : GameDefine.PLAYER_READY.NO_READY;
      status == GameDefine.PLAYER_READY.READY && gameManager.isPlaying && (status = GameDefine.PLAYER_READY.DAPAIING);
      this.setPlayerStatus(status);
      playerData && !playerData.OnLine && this.offLine();
    };
    playerCls.prototype.getCanChiData = function(paiID) {
      return this.paiDataObj.getCanChiData(paiID);
    };
    playerCls.prototype.getPaiData = function() {
      return this.paiDataObj;
    };
    playerCls.prototype.setPlayerStatus = function(status) {
      cc.log("---ayerCls.prototype.setPlayerStatus-----", status);
      this.playerStatus = status;
      this.playerUI.refrePlayerStatus(status);
    };
    playerCls.prototype.setGameStatus = function(status) {
      this.dapaiStatus = status;
      this.playerUI.refreGameStatus(status);
    };
    playerCls.prototype.offLine = function() {
      this.playerUI.refrePlayerStatus(GameDefine.PLAYER_READY.OFFLINE);
    };
    playerCls.prototype.isTrunToMe = function() {
      return this.dapaiStatus == GameDefine.TURN_STATUS.TURNTOPLAY;
    };
    playerCls.prototype.showPaiOnBegin = function(huaData) {
      for (var i = 0; i < huaData.showData.length; i++) {
        this.showPai(huaData.showData[i].Card);
        this.buPai(huaData.buData[i].Card);
      }
      this.showBuHuaAnim();
      setTimeout(function() {
        this.paiDataObj.sortMajiang();
        this.getPaiMgr().refreShouPai();
      }.bind(this), 800);
    };
    playerCls.prototype.showPai = function(paiID) {
      if (this.isXiaDesk() || this.isReplay) {
        var pai = this.paiDataObj.showPai(paiID);
        this.getPaiMgr().rmShouPai(pai);
      }
      this.paiDataObj.buHuapai([ paiID ]);
      this.getPaiMgr().refreBuhua();
    };
    playerCls.prototype.showBuHuaAnim = function() {
      this.playerUI.showOptPaiAnim(GameDefine.EATPAI_TYPE.BuHua);
      this.playEffect("buhua");
    };
    playerCls.prototype.buPai = function(paiID, isSelf) {
      if (!this.isXiaDesk() && !this.isReplay) return;
      this.moPai(paiID);
    };
    playerCls.prototype.resetFanPai = function() {
      var fanList = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      this.paiDataObj.buHuapai(fanList);
      this.getPaiMgr().refreBuhua();
    };
    playerCls.prototype.showPlayerInfo = function() {
      var playerData = mjDataMgr.getInstance().getPlayerData(this.PlayerIdx);
      fun.event.dispatch("mjPlayerDetail", {
        d: playerData,
        pos: this.desPosType
      });
    };
    playerCls.prototype.setDirection = function(direction) {
      var GameDefine = require("mjGameDefine");
      var dirIndex = 0;
      for (var k in GameDefine.DIRECTION_TYPE) {
        if (GameDefine.DIRECTION_TYPE[k] == direction) break;
        dirIndex += 1;
      }
      this.direction = direction;
      this.dirIndex = dirIndex;
      this.playerUI.setDirection(direction);
    };
    playerCls.prototype.getDirection = function() {
      return this.direction;
    };
    playerCls.prototype.isZhuangJia = function() {
      return this.direction == GameDefine.DIRECTION_TYPE.DONG;
    };
    playerCls.prototype.isXiaDesk = function() {
      return this.PlayerIdx == mjDataMgr.get(mjDataMgr.KEYS.SELFID);
    };
    playerCls.prototype.cleanPaiData = function() {
      this.playerUI.cleanPaiNode();
      this.paiDataObj = void 0;
      this.outPaiAnimdList = {};
    };
    playerCls.prototype.showDpAnim = function() {
      var dachuList = this.paiDataObj.daPaiOutList;
      var isExit = false;
      dachuList.forEach(function(pai) {
        pai == this.curDaPai && (isExit = true);
      }.bind(this));
      if (isExit) this.getPaiMgr().showDpAnim(this.curDaPai); else {
        cc.log("----showDpAnim-----show DP Anim");
        gameManager.checkResultAnim();
      }
    };
    playerCls.prototype.showHuPaiAnim = function(hupaiData) {
      var voiceName = hupaiData.iszm ? "zimo" : "hu";
      require("Audio").playEffect("mahjong", "mahjong.mp3");
      this.playEffect(voiceName);
      if (!hupaiData.hp) return;
      var pai = this.paiDataObj.createFullPai(hupaiData.hp);
      hupaiData.iszm || this.paiDataObj.getShouPaiList().push(pai);
      this.playerUI.showHuPaiAnim(pai, hupaiData);
    };
    playerCls.prototype.reSetDapaiData = function(paiID, paiTag) {
      if (this.dapaiStatus == GameDefine.TURN_STATUS.WAITOPT) {
        var pai = this.paiDataObj.createFullPai(paiID);
        pai.isChuPai = true;
        pai.setShowType(GameDefine.PAISHOWTYPE.END);
        gameManager.chuPaiCount = paiTag;
        this.curDaPai = pai;
        this.isDaAnimEnd = true;
        this.isTurnNext = false;
        this.paiDataObj.daPaiOutList.push(this.curDaPai);
        this.getPaiMgr().refreDachuPai();
      }
    };
    playerCls.prototype.showChoosePai = function(pai) {
      gameManager.showChoosePai(pai.id);
    };
    playerCls.prototype.showSamePaiTips = function(paiID) {
      this.getPaiMgr().showSamePaiTips(paiID);
    };
    playerCls.prototype.setDaPaiResult = function(isEat) {
      this.isTurnNext = true;
      this.paiIsEated = isEat;
      this.checkPaiEnd();
    };
    playerCls.prototype.checkPaiEnd = function() {
      if (this.isTurnNext && this.isDaAnimEnd) {
        this.paiIsEated && this.paiDataObj.daPaiOutList.pop();
        this.curDaPai.isChuPai = false;
        this.getPaiMgr().setPaiEnd(this.paiIsEated, this.curDaPai);
        this.cleanDaPaiStatus();
      }
    };
    playerCls.prototype.cleanDaPaiStatus = function() {
      this.isDaAnimEnd = false;
      this.isTurnNext = false;
      this.paiIsEated = false;
    };
    playerCls.prototype.addPaiOutList = function(paiList) {
      for (var i = 0; i < paiList.length; i++) {
        var paiID = paiList[i];
        var pai = this.paiDataObj.createFullPai(paiID);
        pai.setShowType(GameDefine.PAISHOWTYPE.END);
        this.paiDataObj.daPaiOutList.push(pai);
        this.getPaiMgr().refreDachuPai();
      }
    };
    playerCls.prototype.initRound = function() {
      this.paiDataObj = void 0;
      var gameReplayMgr = require("mjReplayMgr");
      this.isReplay = gameReplayMgr.isReplayPai();
      var paiDataMgr = require("mjPlayerPai");
      this.paiDataObj = paiDataMgr.new(this.isReplay);
      this.paiDataObj.setDeskType(this.desPosType);
      this.cleanDaPaiStatus();
      this.setGameStatus(GameDefine.TURN_STATUS.NOTURN);
      this.playerUI.initRound();
    };
    playerCls.prototype.faPai = function(paiData, isGai) {
      var addPaiList = this.paiDataObj.faPai(paiData, isGai);
      this.getPaiMgr().addFaPai(addPaiList);
    };
    playerCls.prototype.onFaPaiStart = function() {
      this.getPaiMgr().onFaPaiStart();
    };
    playerCls.prototype.setShouPai = function(paiData) {
      cc.log("---setShouPai-", paiData);
      var addPaiList = this.paiDataObj.setShouPai(paiData);
      this.getPaiMgr().addShouPai(addPaiList);
    };
    playerCls.prototype.faPaiEnd = function() {
      this.paiDataObj.sortMajiang();
      this.paiDataObj.cleanFaPaiList();
      this.getPaiMgr().refreShouPai();
      this.getPaiMgr().refreRelativePos();
      this.getPaiMgr().onFaPaiEnd();
    };
    playerCls.prototype.uprightPai = function() {
      this.paiDataObj.uprightPai();
      this.getPaiMgr().refreFaPai(this.paiDataObj);
    };
    playerCls.prototype.gaiAllPai = function() {
      this.paiDataObj.sortMajiang();
      this.paiDataObj.gaiAllPai();
      this.getPaiMgr().refreFaPai(this.paiDataObj);
    };
    playerCls.prototype.moPai = function(id) {
      require("Audio").playEffect("mahjong", "mahjong.mp3");
      this.paiDataObj.sortMajiang();
      this.getPaiMgr().refreShouPai();
      var pai = this.paiDataObj.addPai(id);
      this.curMoPaiUdid = pai.udid;
      this.getPaiMgr().moPai(pai, this.isReplay);
    };
    playerCls.prototype.rmZiMoPai = function() {
      this.getPaiMgr().rmZimoPai(this.curMoPaiUdid);
    };
    playerCls.prototype.playEffect = function(voiceName) {
      if (!voiceName) return;
      var lan = "mandarin/";
      fun.gameCfg.voiceLanguage == gameConst.voiceLanguage.huangYan && (lan = mjDataMgr.get("CfgData").Dialect);
      var sex = 2 == mjDataMgr.getInstance().getPlayerData(this.PlayerIdx).Sex ? "female" : "male";
      var name = sex + "_" + voiceName + ".mp3";
      var more = [ "", "_1", "_2" ][Math.floor(2.999 * Math.random())];
      require("Audio").playEffect("mahjong", name, lan, more);
    };
    playerCls.prototype.getPaiVoice = function(paiID) {
      var commonType = {
        1: "tong",
        2: "tiao",
        3: "wan"
      };
      var voiceName = "";
      if (paiID < 40) voiceName = paiID % 10 + commonType[Math.floor(paiID / 10)]; else {
        var localID = mjDataMgr.getInstance().getLocalPaiID(paiID);
        voiceName = require("mjGameDefine").SP_PAIVOICE[localID];
      }
      return voiceName;
    };
    playerCls.prototype.chuPai = function(paiID, paiUdid, paiTag) {
      var pai;
      this.playEffect(this.getPaiVoice(paiID));
      require("Audio").playEffect("mahjong", "mahjong.mp3");
      pai = this.paiDataObj.chuPai(paiUdid, paiID);
      pai.id = paiID;
      pai.refreshCaiShen();
      this.curDaPai = pai;
      this.paiDataObj.sortMajiang();
      this.cleanDaPaiStatus();
      this.getPaiMgr().daPai(pai);
    };
    playerCls.prototype.daPaiAnimEnd = function() {
      this.isDaAnimEnd = true;
      this.checkPaiEnd();
    };
    playerCls.prototype.peng = function(paiID, isSelf, eatType) {
      var spliceList = this.paiDataObj.peng(paiID, isSelf);
      this.paiDataObj.sortMajiang();
      this.getPaiMgr().pengGangPai(spliceList);
      this.playerUI.showOptPaiAnim(GameDefine.EATPAI_TYPE.PengPai);
      require("Audio").playEffect("mahjong", "mahjong.mp3");
      this.playEffect("peng");
    };
    playerCls.prototype.resetPengGangPai = function(gangList, pengList) {
      this.paiDataObj.resetPengGangPai(gangList, pengList);
      this.getPaiMgr().pengGangPai([]);
    };
    playerCls.prototype.gang = function(paiID, isSelf, gangType) {
      gameManager.addLiujuCount();
      var spliceList = [];
      spliceList = gangType === GameDefine.EATPAI_TYPE.MingGang1 ? this.paiDataObj.gang_0(paiID, isSelf) : gangType === GameDefine.EATPAI_TYPE.AnGang ? this.paiDataObj.gang_1(paiID, isSelf) : this.paiDataObj.gang_2(paiID, isSelf);
      this.getPaiMgr().pengGangPai(spliceList);
      this.playerUI.showOptPaiAnim(GameDefine.EATPAI_TYPE.MingGang1);
      require("Audio").playEffect("mahjong", "mahjong.mp3");
      this.playEffect("gang");
    };
    playerCls.prototype.chi = function(paiData) {
      var spliceList = this.paiDataObj.chi(paiData);
      this.getPaiMgr().pengGangPai(spliceList);
      this.playerUI.showOptPaiAnim(GameDefine.EATPAI_TYPE.ChiPai);
      require("Audio").playEffect("mahjong", "mahjong.mp3");
      this.playEffect("chi");
    };
    playerCls.prototype.showChat = function(content) {
      this.playerUI.showChat(content);
    };
    playerCls.prototype.getInteractPos = function() {
      return this.playerUI.getInteractPos();
    };
    playerCls.prototype.getPaiMgr = function() {
      return this.playerUI.getPaiMgr();
    };
    playerCls.prototype.turnToDaPai = function(pai) {
      this.dapaiStatus == GameDefine.TURN_STATUS.TURNTOPLAY && gameManager.turnToChupai(pai);
    };
    module.exports = {
      new: function _new() {
        return new playerCls();
      }
    };
    cc._RF.pop();
  }, {
    Audio: "Audio",
    mjDataMgr: "mjDataMgr",
    mjGameDefine: "mjGameDefine",
    mjGameManager: "mjGameManager",
    mjPlayerPai: "mjPlayerPai",
    mjReplayMgr: "mjReplayMgr"
  } ],
  mjReadyUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1f0b2UmZpdLBZa+PHASGTtx", "mjReadyUI");
    "use strict";
    var mjDataMgr = require("mjDataMgr");
    var gameManager = require("mjGameManager");
    var GameDefine = require("mjGameDefine");
    var log = cc.log;
    var mjNetMgr = require("mjNetMgr");
    cc.Class({
      extends: cc.Component,
      properties: {
        readyN: cc.Node,
        typeConentN: cc.Node,
        reportN: cc.Node,
        reportTipsN: cc.Node,
        mjVotingUIP: cc.Prefab,
        roomIdN: cc.Node
      },
      onLoad: function onLoad() {
        fun.event.add("selfReady", "selfReady", this.refreBtnReady.bind(this));
        this.roomIdN.getChildByName("content").getComponent(cc.Label).string = mjDataMgr.get(mjDataMgr.KEYS.ROOMID);
      },
      onDestroy: function onDestroy() {
        fun.event.remove("selfReady");
      },
      initUI: function initUI(roomInfo) {
        var isHy = fun.db.getData("RoomInfo").GameType == gameConst.gameType.maJiangHuangYan;
        var iss = require("mjReplayMgr").isReplayPai();
        this.reportTipsN.active = isHy && !iss;
        var isMaster = mjDataMgr.getInstance().isRoomMaster();
        this.readyN.getChildByName("btnUnReady").active = false;
        this.readyN.getChildByName("btnDissolve").active = isMaster;
        this.readyN.getChildByName("btnOut").active = !isMaster;
        this.readyN.getChildByName("btnInvite").active = !(fun.gameCfg.releaseType === gameConst.releaseType.apple);
        var isGamePlayed = roomInfo.Round > 0;
        this.roomIdN.active = isGamePlayed;
        if (isGamePlayed) {
          this.hideRoomOptBtn();
          this.reportTipsN.active = false;
        }
      },
      onBtnWxShareRoomInfo: function onBtnWxShareRoomInfo() {
        var roomShowList = mjDataMgr.get(mjDataMgr.KEYS.ROOMINFO).showList;
        var content = "";
        roomShowList.forEach(function(itemData, index) {
          content += " " + itemData.name + ":" + itemData.content;
        });
        var info = {
          content: content
        };
        info.title = mjDataMgr.get("CfgData").gameName + "-房间号：" + mjDataMgr.get(mjDataMgr.KEYS.ROOMID);
        require("JSPhoneWeChat").WxShareFriend(info);
      },
      onEveryOneReady: function onEveryOneReady() {
        var self = this;
        var moveAct = cc.moveTo(.3, cc.p(0, -800));
        this.readyN.runAction(cc.sequence(moveAct, cc.callFunc(function() {
          self.readyN.active = false;
          self.reportTipsN.active = false;
        })));
      },
      onBtnDissolveClicked: function onBtnDissolveClicked() {
        var mjVotingUi = cc.instantiate(this.mjVotingUIP);
        mjVotingUi.parent = cc.director.getScene().getChildByName("Canvas");
        mjVotingUi.getComponent("mjVotingUI").setTips("确定解散房间？");
      },
      onBtnExitClicked: function onBtnExitClicked() {
        var mjVotingUi = cc.instantiate(this.mjVotingUIP);
        mjVotingUi.parent = cc.director.getScene().getChildByName("Canvas");
      },
      onBtnReadyClicked: function onBtnReadyClicked() {
        require("Audio").playEffect("hall", "button_nomal.mp3");
        this.prepareToPlay();
      },
      onBtnUnReadyClicked: function onBtnUnReadyClicked() {
        require("Audio").playEffect("hall", "button_nomal.mp3");
      },
      refreRoomData: function refreRoomData() {
        var roomInfo = mjDataMgr.get(mjDataMgr.KEYS.ROOMINFO);
        this.initUI(roomInfo);
        var centerN = this.readyN.getChildByName("center");
        var roomIdN = centerN.getChildByName("roomNumber").getChildByName("content");
        var roomInfoN = centerN.getChildByName("info");
        roomIdN.getComponent(cc.Label).string = mjDataMgr.get(mjDataMgr.KEYS.ROOMID);
        var roomShowList = mjDataMgr.get(mjDataMgr.KEYS.ROOMINFO).showList;
        this.typeConentN.children.forEach(function(child) {
          child.active = false;
        });
        this.typeConentN.height = 50 * roomShowList.length;
        roomShowList.forEach(function(itemData, index) {
          var itemN = this.typeConentN.getChildByName("item_" + index);
          itemN.active = true;
          var nameN = itemN.getChildByName("title").getChildByName("name");
          var contentN = itemN.getChildByName("content");
          nameN.getComponent(cc.Label).string = itemData.name;
          contentN.getComponent(cc.Label).string = itemData.content;
        }.bind(this));
        this.refreBtnReady();
      },
      refreBtnReady: function refreBtnReady() {
        var mdIdx = mjDataMgr.get(mjDataMgr.KEYS.SELFID);
        var mePlayerData = mjDataMgr.getInstance().getPlayerData(mdIdx);
        var isReady = mePlayerData.Status === GameDefine.PLAYER_READY.READY;
        this.readyN.getChildByName("btnReady").active = !isReady;
      },
      hideRoomOptBtn: function hideRoomOptBtn() {
        this.readyN.getChildByName("btnDissolve").active = false;
        this.readyN.getChildByName("btnOut").active = false;
        this.readyN.getChildByName("btnInvite").active = false;
      },
      checkCanReady: function checkCanReady() {
        var mdIdx = mjDataMgr.get(mjDataMgr.KEYS.SELFID);
        var mePlayerData = mjDataMgr.getInstance().getPlayerData(mdIdx);
        var isNoCard = mePlayerData.Status === GameDefine.PLAYER_READY.NO_CARD;
        isNoCard;
        return !isNoCard;
      },
      prepareToPlay: function prepareToPlay() {
        if (!this.checkCanReady()) return;
        var content = {};
        content.PlayerID = mjDataMgr.get(mjDataMgr.KEYS.UID);
        mjNetMgr.cSend("gotoReady", content, function(rsp) {
          0 == rsp.RetCode;
        }.bind(this));
      },
      dissolvedRoom: function dissolvedRoom() {
        var content = {
          roomID: mjDataMgr.get(mjDataMgr.KEYS.ROOMID)
        };
        mjNetMgr.cSend("dissolvedRoom", content);
      },
      exitOutRoom: function exitOutRoom() {
        var content = {};
        content.roomID = mjDataMgr.get(mjDataMgr.KEYS.ROOMID);
        mjNetMgr.cSend("exitOutRoom", content, function(rsp) {
          rsp.Leave && gameManager.exiteRoom();
        });
      },
      unPrepareToPlay: function unPrepareToPlay(argument) {}
    });
    cc._RF.pop();
  }, {
    Audio: "Audio",
    JSPhoneWeChat: "JSPhoneWeChat",
    mjDataMgr: "mjDataMgr",
    mjGameDefine: "mjGameDefine",
    mjGameManager: "mjGameManager",
    mjNetMgr: "mjNetMgr",
    mjReplayMgr: "mjReplayMgr"
  } ],
  mjReconnectMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cfc4378vqlEEImhNIYypZLk", "mjReconnectMgr");
    "use strict";
    var ReconnectMgr = {};
    var GameDefine = require("mjGameDefine");
    var log = cc.log;
    ReconnectMgr.initLoginData = function(data) {
      this.roomId = data.RoomId || 0;
      this.needEnterRoom = 0 != data.RoomId;
      this.reconneting = 0 != data.RoomId;
    };
    ReconnectMgr.addPaiListener = function() {
      var mjNetMgr = require("mjNetMgr");
      mjNetMgr.getIns().addRebNet(mjNetMgr.KEYS.REB, this);
    };
    ReconnectMgr.rmPaisyncListener = function() {
      var mjNetMgr = require("mjNetMgr");
      mjNetMgr.getIns().rmNet(mjNetMgr.KEYS.REB);
    };
    ReconnectMgr.initDeskPaiData = function(paiData) {
      this.rmPaisyncListener();
      this.needSetPaiju = true;
      this.deskPaiData = paiData.Infos;
    };
    ReconnectMgr.wlReconnected = function(paiData) {
      this.deskPaiData = paiData;
      this.setWLPaiData();
      this.startPlay();
    };
    ReconnectMgr.setWLPaiData = function() {
      var gameManager = require("mjGameManager");
      var mjDataMgr = require("mjDataMgr");
      var GameDefine = require("mjGameDefine");
      var mUid = mjDataMgr.get(mjDataMgr.KEYS.UID);
      var startPai = {};
      var paiData = this.deskPaiData;
      startPai.TileCount = [];
      var dadePai = [];
      var pengPai = [];
      var gangPai = [];
      var fanPai = [];
      for (var UserId in paiData.Players) {
        var idx = parseInt(gameManager.getplayerByUserID(UserId).PlayerIdx);
        var paiInfo = paiData.Players[UserId];
        var len = paiInfo.Hand.shift();
        paiInfo.Mo && paiInfo.Hand.push(paiInfo.Mo);
        startPai.TileCount[idx] = len;
        UserId == mUid && (startPai.Tiles = paiInfo.Hand);
        dadePai[idx] = paiInfo.Da || [];
        fanPai[idx] = paiInfo.Fan || [];
        var pengList = [];
        var gangList = [];
        paiInfo.Chi = paiInfo.Chi || [];
        paiInfo.Peng = paiInfo.Peng || [];
        paiInfo.Chi.forEach(function(chiItem) {
          var lastIdx = (idx + 3) % 4;
          pengList.push({
            pId: lastIdx,
            data: chiItem
          });
        });
        paiInfo.Peng.forEach(function(pengItem) {
          var lastIdx = (idx + 2) % 4;
          pengList.push({
            pId: lastIdx,
            data: [ pengItem, pengItem, pengItem ]
          });
        });
        pengPai[idx] = pengList;
        paiInfo.AnGang = paiInfo.AnGang || [];
        paiInfo.AnGang.forEach(function(gangItem) {
          gangList.push({
            pId: idx,
            data: [ gangItem, gangItem, gangItem, gangItem ],
            type: GameDefine.EATPAI_TYPE.AnGang
          });
        });
        paiInfo.MingGang = paiInfo.MingGang || [];
        paiInfo.MingGang.forEach(function(gangItem) {
          gangList.push({
            pId: idx,
            data: [ gangItem, gangItem, gangItem, gangItem ]
          });
        });
        gangPai[idx] = gangList;
      }
      this.isBegin = false;
      var roomInfo = mjDataMgr.get(mjDataMgr.KEYS.ROOMINFO);
      gameManager.fapaiMo = true;
      gameManager.initStartPai(startPai);
      gameManager.zhuangNotify({
        UserId: paiData.Zhuang,
        Round: roomInfo.Round,
        Quan: roomInfo.Quan
      });
      gameManager.CaiShenPai = paiData.CaiShen;
      gameManager.ReconnentData = {};
      gameManager.ReconnentData.paiOutList = dadePai;
      gameManager.ReconnentData.pengPai = pengPai;
      gameManager.ReconnentData.gangPai = gangPai;
      gameManager.ReconnentData.fanPai = fanPai;
      gameManager.ReconnentData.ChuPlayer = gameManager.getplayerByUserID(paiData.LastCard.UserId).PlayerIdx;
      gameManager.ReconnentData.ChuStatus = paiData.LastCard.Type;
      gameManager.ReconnentData.CurrentChuTile = paiData.LastCard.Card;
      gameManager.ReconnentData.weiCount = 0;
      gameManager.ReconnentData.reSetLeft = paiData.Left;
    };
    ReconnectMgr.setNormalPaiData = function() {
      var gameManager = require("mjGameManager");
      var mjDataMgr = require("mjDataMgr");
      var startPai = {};
      var paiData = this.deskPaiData;
      startPai.TileCount = [];
      startPai.Tiles = paiData.SelfCurrentTiles;
      var dadePai = [];
      var pengPai = [];
      var gangPai = [];
      var totalOutPai = 0;
      for (var k in paiData.TileInfos) {
        var paiInfo = paiData.TileInfos[k];
        startPai.TileCount.push(paiInfo.HandTileCount);
        paiInfo.ChuTilesInfo = paiInfo.ChuTilesInfo || [];
        dadePai.push(paiInfo.ChuTilesInfo);
        totalOutPai += paiInfo.ChuTilesInfo.length;
        var pengList = [];
        if (paiInfo.ZHInfo.chi) {
          totalOutPai += paiInfo.ZHInfo.chi.length;
          pengList = pengList.concat(paiInfo.ZHInfo.chi);
        }
        if (paiInfo.ZHInfo.peng) {
          totalOutPai += paiInfo.ZHInfo.peng.length;
          pengList = pengList.concat(paiInfo.ZHInfo.peng);
        }
        pengList.sort(function(a, b) {
          return a.order - b.order;
        });
        pengPai.push(pengList);
        var gangList = [];
        if (paiInfo.ZHInfo.minggang) {
          totalOutPai += paiInfo.ZHInfo.minggang.length;
          fun.utils.forEach(paiInfo.ZHInfo.minggang, function(item) {
            item.type = GameDefine.EATPAI_TYPE.MingGang1;
          });
          gangList = gangList.concat(paiInfo.ZHInfo.minggang);
        }
        if (paiInfo.ZHInfo.angang) {
          totalOutPai += paiInfo.ZHInfo.angang.length;
          fun.utils.forEach(paiInfo.ZHInfo.angang, function(item) {
            item.type = GameDefine.EATPAI_TYPE.AnGang;
          });
          gangList = gangList.concat(paiInfo.ZHInfo.angang);
        }
        gangList.sort(function(a, b) {
          return a.order - b.order;
        });
        gangPai.push(gangList);
      }
      this.isBegin = false;
      gameManager.initStartPai(startPai);
      gameManager.CaiShenPai = [ paiData.JokerTile ];
      gameManager.meDirection = paiData.SelfFeng;
      gameManager.ReconnentData = {};
      var leftPaiCount = paiData.LeftShuTileCount + paiData.LeftShengTileCount + paiData.LeftGangTileCount;
      gameManager.ReconnentData.reSetLeft = leftPaiCount;
      gameManager.ReconnentData.weiCount = paiData.LeftGangTileCount;
      gameManager.ReconnentData.paiOutList = dadePai;
      gameManager.ReconnentData.pengPai = pengPai;
      gameManager.ReconnentData.gangPai = gangPai;
      gameManager.ReconnentData.ChuPlayer = paiData.ChuPlayer;
      gameManager.ReconnentData.ChuStatus = paiData.ChuStatus;
      gameManager.ReconnentData.CurrentChuTile = paiData.CurrentChuTile;
      var curReportData = this.getReportData(paiData.AllZhanJiInfo);
      var roomInfo = mjDataMgr.get(mjDataMgr.KEYS.ROOMINFO);
      roomInfo.Quan = paiData.FinishGameCount || 0;
      roomInfo.Round = curReportData.length + 1;
      fun.event.dispatch("resetReportData", curReportData);
      gameManager.initGameCount();
      0 == paiData.LeftShuTileCount && gameManager.onPaiTimeChange({
        Time: 1
      });
      gameManager.refrePlayerXdhs(curReportData);
    };
    ReconnectMgr.getDeskPaiData = function() {
      return this.deskPaiData;
    };
    ReconnectMgr.isReconneting = function() {
      return this.reconneting;
    };
    ReconnectMgr.reConnectEnd = function() {
      this.reconneting = false;
      this.needSetPaiju = false;
    };
    ReconnectMgr.isNeedSetPaiju = function() {
      cc.log("----isNeedSetPaiju----this.needSetPaiju;--", this.needSetPaiju);
      return this.needSetPaiju;
    };
    ReconnectMgr.checkGotoRoom = function() {
      return this.needEnterRoom;
    };
    ReconnectMgr.getRoomID = function(sendFucn, env) {
      return this.roomId;
    };
    ReconnectMgr.enteredRoom = function() {
      this.needEnterRoom = false;
    };
    ReconnectMgr.checkPaiData = function() {};
    ReconnectMgr.startPlay = function() {
      var gameManager = require("mjGameManager");
      this.newRound();
      gameManager.reSetResidue();
      gameManager.reSetDadePai();
      gameManager.reSetPengGangPai();
      gameManager.reSetPlayerStatus();
      gameManager.reserFanPai();
    };
    ReconnectMgr.newRound = function() {
      var gameManager = require("mjGameManager");
      gameManager.initRoundData();
      gameManager.gameUICB.setCaiShenPai(gameManager.CaiShenPai);
      gameManager.faPaiNoAnim(this.isBegin);
      gameManager.gameUICB.showReduceNode();
    };
    ReconnectMgr.reConnectInGameUI = function() {};
    ReconnectMgr.addReconentMessageCB = function() {
      var mjNetMgr = require("mjNetMgr");
      mjNetMgr.getIns().addReaNet(mjNetMgr.KEYS.REA, this);
    };
    ReconnectMgr.rmReconentMessageCB = function() {
      var mjNetMgr = require("mjNetMgr");
      mjNetMgr.getIns().rmNet(mjNetMgr.KEYS.REA);
    };
    ReconnectMgr.loginEnd = function(data) {};
    ReconnectMgr.inGmaeEnteredRoom = function(data) {
      var gameManager = require("mjGameManager");
      var mjDataMgr = require("mjDataMgr");
      var roomInfo = data.RoomInformation;
      roomInfo.RoomID = mjDataMgr.get(mjDataMgr.KEYS.ROOMID);
      mjDataMgr.set(mjDataMgr.KEYS.ROOMID, roomInfo.RoomID);
      mjDataMgr.set(mjDataMgr.KEYS.ROOMINFO, roomInfo);
      mjDataMgr.getInstance().initRoomPlayers(data.PlayersInfo);
      for (var destPos = 0; destPos < 4; destPos++) {
        var player = gameManager.playerList[destPos];
        player.refreshData();
        player.initPlayerStatus();
      }
    };
    ReconnectMgr.inGmaeSyncData = function(paiData) {
      cc.log("---//在房间内重连-----", paiData);
      this.deskPaiData = paiData.Infos;
      this.setNormalPaiData();
      this.startPlay();
    };
    ReconnectMgr.getReportData = function(allzj) {
      var gameManager = require("mjGameManager");
      allzj = allzj || [];
      gameManager.gameJuCount = allzj.length;
      if (allzj.length < 1) return allzj;
      var zhuangIndex = 0;
      allzj[0][zhuangIndex].isZhuangJia = true;
      if (allzj.length > 1) for (var i = 1; i < allzj.length; i++) {
        var lastZhuang = allzj[i - 1][zhuangIndex];
        var isWin = lastZhuang.ishu || lastZhuang.iszm;
        isWin || (zhuangIndex = (zhuangIndex + 1) % 4);
        allzj[i][zhuangIndex].isZhuangJia = true;
      }
      return allzj;
    };
    module.exports = ReconnectMgr;
    cc._RF.pop();
  }, {
    mjDataMgr: "mjDataMgr",
    mjGameDefine: "mjGameDefine",
    mjGameManager: "mjGameManager",
    mjNetMgr: "mjNetMgr"
  } ],
  mjReplayMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3d58fAbncdId5MT+4GObS1v", "mjReplayMgr");
    "use strict";
    var mjDataMgr = require("mjDataMgr");
    var log = cc.log;
    var GameDefine = require("mjGameDefine");
    var pregameManager = require("mjGameManager");
    var gameReplayMgr = {};
    var REPLAYOPT = {
      MP: 1,
      GMP: 2,
      CP: 3,
      CHI: 4,
      PENG: 5,
      MGT: 6,
      PTH: 7,
      MGO: 8,
      AG: 9,
      ZM: 10,
      QGH: 11,
      GCHZ: 12,
      GMPZ: 13,
      GQQH: 14
    };
    var hymjReplay = function hymjReplay() {
      this.initData = function(data) {
        this.meDeskIndex = 0;
        this.replayData = data.record;
        this.startPai = [];
        this.zhuangIndex = 0;
        for (var i = 0; i < 4; i++) {
          this.startPai.push(data.record["p" + i]);
          14 == data.record["p" + i].length && (this.zhuangIndex = i);
        }
        var RoomInfo = {
          meIdx: this.meDeskIndex,
          GameType: gameConst.gameType.maJiangHuangYan,
          players: data.record.uif,
          RoomInformation: data.record.room_info,
          RoomId: data.record.room_id
        };
        fun.db.setData("RoomInfo", RoomInfo);
        this.resulteData = data.record.zhanji;
        this.registerOptFunclist();
        this.optList = data.record.opts.slice();
        this.optList.reverse();
        cc.director.loadScene("majiang");
      };
      this.onDestroy = function() {
        this.replayData = void 0;
        this.resulteData = void 0;
        this.meDeskIndex = void 0;
        this.optFuncList = void 0;
        this.optTagList = void 0;
        this.optList = [];
      };
      this.registerOptFunclist = function() {
        var defineList = REPLAYOPT;
        var optFuncList = {};
        optFuncList[defineList.MP] = this.mopaiOpt;
        optFuncList[defineList.GMP] = this.mopaiOpt;
        optFuncList[defineList.CP] = this.chupaiOpt;
        optFuncList[defineList.CHI] = this.chuPaiZuHeOpt;
        optFuncList[defineList.PENG] = this.chuPaiZuHeOpt;
        optFuncList[defineList.MGT] = this.chuPaiZuHeOpt;
        optFuncList[defineList.PTH] = this.showResultOpt;
        optFuncList[defineList.MGO] = this.chuPaiZuHeOpt;
        optFuncList[defineList.AG] = this.chuPaiZuHeOpt;
        optFuncList[defineList.ZM] = this.showResultOpt;
        optFuncList[defineList.QGH] = this.showResultOpt;
        optFuncList[defineList.GCHZ] = this.guoPaiOpt;
        optFuncList[defineList.GMPZ] = this.guoPaiOpt;
        optFuncList[defineList.GQQH] = this.guoPaiOpt;
        this.optFuncList = optFuncList;
        var optTagList = {};
        var eatType = GameDefine.EATPAI_TYPE;
        optTagList[defineList.CHI] = Math.pow(2, eatType.ChiPai);
        optTagList[defineList.PENG] = Math.pow(2, eatType.PengPai);
        optTagList[defineList.MGT] = Math.pow(2, eatType.MingGang2);
        optTagList[defineList.MGO] = Math.pow(2, eatType.MingGang1);
        optTagList[defineList.AG] = Math.pow(2, eatType.AnGang);
        this.optTagList = optTagList;
      };
      this.creatOptData = function(opt) {
        var data = {};
        data.PlayerIdx = opt.i;
        data.Atile = opt.t;
        data.Opts = this.getOptTag(opt.o);
        data.Data = opt.d;
        data.Data && data.Data.push(require("mjGameManager").lastChuPaiID);
        return data;
      };
      this.mopaiOpt = function(opt) {
        require("mjGameManager").MoPaiNotice(this.creatOptData(opt));
      };
      this.chupaiOpt = function(opt) {
        var gameManager = require("mjGameManager");
        gameManager.ChuPaiNotice(this.creatOptData(opt));
      };
      this.guoPaiOpt = function(opt) {
        this.nextOpt();
      };
      this.chuPaiZuHeOpt = function(opt) {
        var gameManager = require("mjGameManager");
        gameManager.ChuPaiZuHeNotice(this.creatOptData(opt));
      };
      this.showResultOpt = function() {
        if (this.ShowResulted) return;
        this.ShowResulted = true;
        var gameManager = require("mjGameManager");
        gameManager.ZhanJiNoticeHy(this.resulteData);
        gameReplayMgr._ReplayUI.hdieReplay();
      };
      this.setStartPai = function() {
        var directionList = [];
        var DirectType = GameDefine.DIRECTION_TYPE;
        directionList.push(DirectType.DONG);
        directionList.push(DirectType.NAN);
        directionList.push(DirectType.XI);
        directionList.push(DirectType.BEI);
        var meDirection;
        for (var i = 0; i < 4; i++) {
          var tempIndex = (i + this.zhuangIndex) % 4;
          if (tempIndex == this.meDeskIndex) {
            meDirection = directionList[i];
            break;
          }
        }
        var gameManager = require("mjGameManager");
        gameManager.initReplayPai(this.startPai);
        gameManager.CaiShenPai = [ this.replayData.cs ];
        gameManager.meDirection = meDirection;
      };
      this.initRound = function() {
        this.setStartPai();
        var gameManager = require("mjGameManager");
        gameManager.initRoundData();
        gameManager.gameUICB.setCaiShenPai(gameManager.CaiShenPai);
        gameManager.faPaiNoAnim(false);
        gameManager.gameUICB.showReduceNode();
        gameManager.setBtnBackVisi(false);
        this.ShowResulted = false;
      };
      this.getOptTag = function(tag) {
        return this.optTagList[tag];
      };
      this.nextOpt = function() {
        if (this.optList.length < 1) {
          this.showResultOpt();
          gameReplayMgr.stop();
          return;
        }
        var opt = this.optList.pop();
        log("cur Opt", opt);
        var optFunc = this.optFuncList[opt.o];
        optFunc.call(this, opt);
      };
    };
    var wlmjReplay = function wlmjReplay() {
      this.initData = function(data) {
        for (var i = 0; i < data.record.length; i++) data.record[i].Data = JSON.parse(fun.base64.decode(data.record[i].Data));
        this.optList = data.record;
        var RoomInfo = this.optList.shift();
        cc.log("RoomInfo     --<", RoomInfo);
        fun.db.setData("RoomInfo", RoomInfo.Data);
        cc.director.loadScene("majiang");
      };
      this.initRound = function() {
        var gameManager = require("mjGameManager");
        gameManager.zhuangNotify(this.optList.shift().Data);
        var startPai = [];
        var paiData = this.optList.shift().Data;
        var moPaiData = this.optList.shift().Data;
        paiData.Players[moPaiData.UserId].Cards.push(moPaiData.Card);
        for (var UserId in paiData.Players) {
          var Idx = gameManager.getplayerByUserID(UserId).PlayerIdx;
          startPai[Idx] = paiData.Players[UserId].Cards;
        }
        gameManager.initReplayPai(startPai);
        gameManager.initRoundData();
        gameManager.caiShengPai(this.optList.shift().Data.Card);
        gameManager.gameUICB.setCaiShenPai(gameManager.CaiShenPai);
        gameManager.gameUICB.showReduceNode();
        gameManager.faPaiNoAnim(false);
        gameManager.fapaiMo = true;
      };
      this.nextOpt = function() {
        if (this.optList.length < 1) return;
        var opt = this.optList.shift();
        opt.data = opt.Cmd + JSON.stringify(opt.Data);
        fun.net._onMessage(opt);
      };
    };
    gameReplayMgr.endReplay = function() {
      this._IsReplay = false;
      var gameManager = require("mjGameManager");
      gameManager.cleanPlayerPaiData();
      gameManager.exiteRoom();
    };
    gameReplayMgr.startPlay = function() {
      this._CurIns.initRound();
      this._ReplayUI.showReplay();
    };
    gameReplayMgr.refreDelayTime = function() {
      this._RealDelayTime = this._OptDelayTime / this._Speed;
    };
    gameReplayMgr.setSpeedScale = function(speed) {
      this._Speed = speed;
      this.refreDelayTime();
    };
    gameReplayMgr.nextOpt = function() {
      this._CurIns.nextOpt();
    };
    gameReplayMgr.stop = function() {
      this._Replaying = false;
    };
    gameReplayMgr.resume = function() {
      this._Replaying = true;
      this._RddDt = 0;
      this.refreDelayTime();
      this.nextOpt();
    };
    gameReplayMgr.update = function(dt) {
      if (!this._Replaying || !this.isReplayPai()) return;
      this._RddDt += dt;
      if (this._RddDt >= this._RealDelayTime) {
        this._RddDt -= this._RealDelayTime;
        this.nextOpt();
      }
    };
    gameReplayMgr.onDestroy = function() {
      this._IsReplay = false;
      this._Replaying = false;
      this._Speed = void 0;
    };
    gameReplayMgr.isReplayPai = function() {
      return this._IsReplay;
    };
    gameReplayMgr.initTypeCfg = function() {
      this._TypeCfg = {};
      this._TypeCfg[gameConst.gameType.maJiangWenLing] = wlmjReplay;
      this._TypeCfg[gameConst.gameType.maJiangHuangYan] = hymjReplay;
    };
    gameReplayMgr.init = function(replayUI) {
      this._ReplayUI = replayUI;
      this._RddDt = 0;
      this._Speed = 1;
      this._RealDelayTime = this._OptDelayTime = 2;
    };
    gameReplayMgr.setReplayData = function(gameType, data) {
      this.initTypeCfg();
      this._CurIns = new this._TypeCfg[gameType]();
      this._CurIns.initData(data);
      this._IsReplay = true;
      this._Replaying = false;
    };
    module.exports = gameReplayMgr;
    cc._RF.pop();
  }, {
    mjDataMgr: "mjDataMgr",
    mjGameDefine: "mjGameDefine",
    mjGameManager: "mjGameManager"
  } ],
  mjReplayUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3f0fexjlrZCLp56ZmNZmZZk", "mjReplayUI");
    "use strict";
    var gameReplayMgr = require("mjReplayMgr");
    var mjDataMgr = require("mjDataMgr");
    cc.Class({
      extends: cc.Component,
      properties: {
        replayNode: cc.Node,
        btnGameContent: cc.Node,
        GameContentN: cc.Node,
        btnMenuN: cc.Node,
        reduceN: cc.Node,
        roomIdN: cc.Node
      },
      onLoad: function onLoad() {
        this.hdieReplay();
        gameReplayMgr.init(this);
        this.btnPlayN = this.replayNode.getChildByName("btnPlay");
        this.btnStopN = this.replayNode.getChildByName("btnStop");
        this.btnSpeed1N = this.replayNode.getChildByName("btnSpeed_1");
        this.curSpeed = this.replayNode.getChildByName("curSpeed");
        this.btnBackN = this.replayNode.getChildByName("btnBack");
        this.btnPlayN.on("touchend", this.onBtnPlayClicked, this);
        this.btnStopN.on("touchend", this.onBtnStopClicked, this);
        this.btnSpeed1N.on("touchend", this.onBtnSpeedClicked, this);
        this.btnBackN.on("touchend", this.onBtnBackClicked, this);
        this.btnSpeed1N.active = true;
        this.btnPlayN.active = true;
        this.btnStopN.active = false;
        this.speedIndex = 0;
        this.speedList = [ 1, 2, 4 ];
        this.refreSpeedScale();
        this.initGameContent();
      },
      update: function update(dt) {
        gameReplayMgr.update(dt);
      },
      onDestroy: function onDestroy() {
        gameReplayMgr.onDestroy();
      },
      initGameContent: function initGameContent() {
        var roomShowList = mjDataMgr.get(mjDataMgr.KEYS.ROOMINFO).showList;
        roomShowList.forEach(function(itemData, index) {
          var cN = this.GameContentN.getChildByName("content" + (index + 1));
          cN.active = true;
          cN.getComponent(cc.Label).string = itemData.content;
        }.bind(this));
        this.GameContentN.getChildByName("hitzone").active = false;
      },
      showReplay: function showReplay() {
        this.replayNode.active = true;
        this.btnMenuN.active = false;
        this.roomIdN.active = true;
      },
      hdieReplay: function hdieReplay() {
        this.replayNode.active = false;
      },
      onBtnGameContentClick: function onBtnGameContentClick() {
        this.GameContentN.active = true;
        var animation = this.GameContentN.getComponent(cc.Animation);
        var clips = animation.getClips();
        animation.play(animation.getClips()[0].name);
        this.btnGameContent.active = false;
        this.GameContentN.getChildByName("hitzone").active = true;
      },
      onBtnGameContentBack: function onBtnGameContentBack() {
        this.GameContentN.getChildByName("hitzone").active = false;
        var animation = this.GameContentN.getComponent(cc.Animation);
        var clips = animation.getClips();
        animation.play(animation.getClips()[1].name).once("finished", function() {
          this.GameContentN.active = false;
          this.btnGameContent.active = true;
        }, this);
      },
      onBtnBackClicked: function onBtnBackClicked() {
        gameReplayMgr.endReplay();
      },
      onBtnPlayClicked: function onBtnPlayClicked() {
        this.btnPlayN.active = false;
        this.btnStopN.active = true;
        this.btn;
        gameReplayMgr.resume();
      },
      onBtnStopClicked: function onBtnStopClicked() {
        this.btnPlayN.active = true;
        this.btnStopN.active = false;
        gameReplayMgr.stop();
      },
      onBtnSpeedClicked: function onBtnSpeedClicked(event) {
        this.speedIndex += 1;
        this.speedIndex = this.speedIndex % this.speedList.length;
        this.refreSpeedScale();
      },
      refreSpeedScale: function refreSpeedScale() {
        var speed = this.speedList[this.speedIndex];
        gameReplayMgr.setSpeedScale(speed);
        this.curSpeed.getComponent(cc.Label).string = " x" + speed;
      }
    });
    cc._RF.pop();
  }, {
    mjDataMgr: "mjDataMgr",
    mjReplayMgr: "mjReplayMgr"
  } ],
  mjReportListUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c485bY9gRhBQqDsUzdOZrj0", "mjReportListUI");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        noDataN: cc.Node,
        listContentN: cc.Node,
        listItemP: cc.Prefab
      },
      onLoad: function onLoad() {
        this.animation = this.node.getComponent(cc.Animation);
        this.clips = this.animation.getClips();
      },
      start: function start() {},
      onEnable: function onEnable() {
        this.animation.play(this.clips[0].name);
      },
      close: function close() {
        require("Audio").playEffect("hall", "button_close.mp3");
        this.animation.play(this.clips[1].name).once("finished", function() {
          this.node.destroy();
        }, this);
      },
      show: function show(reportList) {
        this.noDataN.active = 0 == reportList.length;
        this.listContentN.length = 132 * reportList.length;
        reportList.forEach(function(itemData, index) {
          var itemNode = cc.instantiate(this.listItemP);
          this.updateItem(itemNode, itemData);
          itemNode.getChildByName("jushu").getComponent(cc.Label).string = index + 1;
          this.listContentN.addChild(itemNode);
          itemNode.setPosition(cc.p(0, -170 - 132 * index));
        }.bind(this));
      },
      updateItem: function updateItem(item, data) {
        var mjDataMgr = require("mjDataMgr");
        for (var i = 0; i < 4; i++) {
          var playerNode = item.getChildByName("player_" + i);
          playerNode.active = data[i];
          if (data[i]) {
            var playerData = mjDataMgr.getInstance().getPlayerData(i);
            fun.utils.loadUrlRes(playerData.Icon, playerNode.getChildByName("icon"));
            playerNode.getChildByName("name").getComponent(cc.Label).string = playerData.showName;
            var score = data[i].xdhs > 0 ? "+" + data[i].xdhs : data[i].xdhs;
            playerNode.getChildByName("fenshu").getComponent(cc.Label).string = score;
            playerNode.getChildByName("add").getComponent(cc.Label).string = score;
            playerNode.getChildByName("zhuang").active = data[i].isZhuangJia;
            playerNode.getChildByName("add").active = data[i].xdhs > 0;
            playerNode.getChildByName("fenshu").active = !(data[i].xdhs > 0);
            var tagN = playerNode.getChildByName("tag");
            tagN.getChildByName("hu").active = data[i].ishu;
            tagN.getChildByName("lz").active = false;
            tagN.getChildByName("zm").active = data[i].iszm;
            tagN.getChildByName("by").active = data[i].isby;
            tagN.getChildByName("dp").active = !data[i].isby && data[i].isdp;
          }
        }
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio",
    mjDataMgr: "mjDataMgr"
  } ],
  mjReportUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "46a1d6GHalMjpoqRvqx8fmU", "mjReportUI");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        reportLisP: cc.Prefab,
        popWindow: cc.Node
      },
      onLoad: function onLoad() {
        this.reportList = [];
        fun.event.add("addReportData", "addReportData", this.addReport.bind(this));
        fun.event.add("resetReportData", "resetReportData", this.resetReport.bind(this));
      },
      onDestroy: function onDestroy() {
        fun.event.remove("addReportData");
        fun.event.remove("resetReportData");
      },
      addReport: function addReport(reportList) {
        this.reportList.push(reportList);
      },
      resetReport: function resetReport() {
        var reportList = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
        this.reportList = reportList;
      },
      show: function show() {
        var mjDataMgr = require("mjDataMgr");
        if (fun.db.getData("RoomInfo").GameType != gameConst.gameType.maJiangHuangYan) return;
        require("Audio").playEffect("hall", "button_nomal.mp3");
        var reportPopN = cc.instantiate(this.reportLisP);
        reportPopN.getComponent("mjReportListUI").show(this.reportList);
        this.popWindow.addChild(reportPopN);
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio",
    mjDataMgr: "mjDataMgr"
  } ],
  mjSaiziUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2192bt5kd1KTaStw6QG7wSM", "mjSaiziUI");
    "use strict";
    var GameDefine = require("mjGameDefine");
    cc.Class({
      extends: cc.Component,
      properties: {
        sai1N: cc.Node,
        sai2N: cc.Node
      },
      onLoad: function onLoad() {
        var DefineType = GameDefine.DESKPOS_TYPE;
        this.directionList = {};
        this.directionList[DefineType.SHANG] = "Shang";
        this.directionList[DefineType.XIA] = "Xia";
        this.directionList[DefineType.ZUO] = "Zuo";
        this.directionList[DefineType.YOU] = "You";
        this.spAnim_1 = this.sai1N.getComponent(sp.Skeleton);
        var self = this;
        var completeFunc = function completeFunc(event) {
          self.onAnimFinish(event);
        };
        this.spAnim_1.setCompleteListener(completeFunc);
      },
      onAnimFinish: function onAnimFinish() {
        this.endCB.call(this.gameUI);
      },
      playAnim: function playAnim(saiNode, id, count) {
        var mjDataMgr = require("mjDataMgr");
        var roomID = mjDataMgr.get(mjDataMgr.KEYS.ROOMID);
        var saiNum = (7 * parseInt(id) * count + 13 * roomID) % 6 + 1;
        cc.log(arguments, "saiNum", saiNum, roomID, "end");
        var saiName = saiNum;
        var spAnim = saiNode.getComponent(sp.Skeleton);
        spAnim.setAnimation(0, saiName, false);
      },
      play: function play(saiziData, endCB, gameUI) {
        this.endCB = endCB;
        this.gameUI = gameUI;
        this.playAnim(this.sai1N, saiziData[GameDefine.DIRECTION_TYPE.DONG].PlayerIdx, saiziData.playCount + 13);
        this.playAnim(this.sai2N, saiziData[GameDefine.DIRECTION_TYPE.XI].PlayerIdx, saiziData.playCount + 7);
      },
      wahuaPlayAnim: function wahuaPlayAnim(saiNode, count) {
        var spAnim = saiNode.getComponent(sp.Skeleton);
        spAnim.setAnimation(0, count, false);
      },
      wahuaPlay: function wahuaPlay(point, endCB, gameUI) {
        this.endCB = endCB;
        this.gameUI = gameUI;
        this.wahuaPlayAnim(this.sai1N, point.p1);
        this.wahuaPlayAnim(this.sai2N, point.p2);
      }
    });
    cc._RF.pop();
  }, {
    mjDataMgr: "mjDataMgr",
    mjGameDefine: "mjGameDefine"
  } ],
  mjVotingPopUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1889c8mhwpAx5fMbzGq4zK5", "mjVotingPopUI");
    "use strict";
    var mjDataMgr = require("mjDataMgr");
    var mjNetMgr = require("mjNetMgr");
    cc.Class({
      extends: cc.Component,
      properties: {
        btnAgree: {
          type: cc.Node,
          default: null
        },
        btnDisagree: {
          type: cc.Node,
          default: null
        },
        playerList: {
          type: cc.Node,
          default: null
        },
        timeLabel: {
          type: cc.Label,
          default: null
        },
        titleLabel: {
          type: cc.RichText,
          default: null
        }
      },
      onLoad: function onLoad() {
        this.timeLabel.string = "";
        this.playerList.children.forEach(function(value) {
          value.active = false;
        });
        this._selfUserId = fun.db.getData("UserInfo").UserId;
        this._playerNodes = {};
        this._playersData = mjDataMgr.getInstance().getAllPlayersData();
        var index = -1;
        for (var idx in this._playersData) {
          index += 1;
          var value = this._playersData[idx];
          var id = value.UserId + "";
          this._playerNodes[id] = this.playerList.children[index];
          this._playerNodes[id].active = true;
          var imgNode = this._playerNodes[id].getChildByName("img");
          fun.utils.loadUrlRes(value.Icon, imgNode, id);
          this.showVoteChoice(id, 0);
          this._playerNodes[id].getChildByName("name").getComponent(cc.Label).string = value.showName;
          this._playerNodes[id].showName = value.showName;
        }
        this.animation = this.node.getComponent(cc.Animation);
        this.clips = this.animation.getClips();
        this.btnAgree.on("click", this.onBtnAgreeClick, this);
        this.btnDisagree.on("click", this.onBtnDisagreeClick, this);
        this._currTime = Math.floor(Date.now() / 1e3);
        fun.net.pSend("ServerTime", "", function(rsp) {
          rsp.Now && (this._currTime = rsp.Now);
        }.bind(this));
        this.sumdt = 0;
      },
      updateData: function updateData(data) {
        this._endTime = data.EndTime;
        for (var k in data.VoteInfo) this.showVoteChoice(k, data.VoteInfo[k]);
      },
      onEnable: function onEnable() {
        this.animation.play(this.clips[0].name);
      },
      update: function update(dt) {
        this.sumdt += dt;
        if (this.sumdt < 1) return;
        this._currTime += 1;
        this.sumdt -= 1;
        var showTime = 0;
        showTime = this._endTime ? this._endTime - this._currTime : parseInt(this.timeLabel.string) - 1;
        showTime < 0 && (showTime = 0);
        this.timeLabel.string = showTime;
      },
      showVoteChoice: function showVoteChoice(UserId) {
        var code = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
        cc.log("---showVoteChoice------UserId:" + UserId + " code:" + code, UserId == this._selfUserId + "");
        this._playerNodes[UserId].getChildByName("ok").active = 1 === code || 2 === code;
        this._playerNodes[UserId].getChildByName("no").active = 3 === code;
        if (UserId == this._selfUserId + "" && 0 !== code) {
          this.btnAgree.active = false;
          this.btnDisagree.active = false;
        }
        1 !== code && 2 !== code || (this.titleLabel.string = "玩家" + this._playerNodes[UserId].showName + "申请退出游戏，请投票");
      },
      disbandRoomVoted: function disbandRoomVoted(data) {
        data.RetCode && 0 !== data.RetCode && cc.log("DisbandRoomVote------------ retcode = ", data.RetCode);
      },
      onBtnAgreeClick: function onBtnAgreeClick() {
        mjNetMgr.getIns().disbandRoomVote({
          OP: 2
        }, this.disbandRoomVoted.bind(this));
      },
      onBtnDisagreeClick: function onBtnDisagreeClick() {
        mjNetMgr.getIns().disbandRoomVote({
          OP: 3
        }, this.disbandRoomVoted.bind(this));
      },
      close: function close() {
        this.animation.play(this.clips[1].name).once("finished", function() {
          this.node.destroy();
        }, this);
      }
    });
    cc._RF.pop();
  }, {
    mjDataMgr: "mjDataMgr",
    mjNetMgr: "mjNetMgr"
  } ],
  mjVotingUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "04d293c1IZKvYPebNlNoqa8", "mjVotingUI");
    "use strict";
    var mjDataMgr = require("mjDataMgr");
    var mjNetMgr = require("mjNetMgr");
    cc.Class({
      extends: cc.Component,
      properties: {
        btnAgree: {
          type: cc.Node,
          default: null
        },
        btnAgreeLabel: {
          type: cc.Node,
          default: null
        },
        btnDisagree: {
          type: cc.Node,
          default: null
        },
        nameLabel: {
          type: cc.Label,
          default: null
        }
      },
      onLoad: function onLoad() {
        this._beganFlag = this.hasGameBegan();
        if (!this._beganFlag) {
          this.nameLabel.string = "确定退出房间？";
          this.btnAgreeLabel.string = "确定";
        }
        this.animation = this.node.getComponent(cc.Animation);
        this.clips = this.animation.getClips();
        this.btnAgree.on("click", this.onBtnAgreeClick, this);
        this.btnDisagree.on("click", this.onBtnDisagreeClick, this);
      },
      onEnable: function onEnable() {
        this.animation.play(this.clips[0].name);
      },
      setTips: function setTips(contet) {
        this.nameLabel.string = contet;
      },
      hasGameBegan: function hasGameBegan() {
        cc.log("---------------- round = ", mjDataMgr.get(mjDataMgr.KEYS.ROOMINFO).Round);
        return !(0 === mjDataMgr.get(mjDataMgr.KEYS.ROOMINFO).Round);
      },
      onBtnAgreeClick: function onBtnAgreeClick() {
        if (this._beganFlag) mjNetMgr.cSend("VoteOutRoom", {
          OP: 1
        }, function(data) {
          data.RetCode && 0 !== data.RetCode;
        }.bind(this)); else {
          var exitCb = function(data) {
            data.Leave && require("mjGameManager").exiteRoom();
          }.bind(this);
          if (mjDataMgr.getInstance().isRoomMaster()) {
            var content = {
              roomID: mjDataMgr.get(mjDataMgr.KEYS.ROOMID)
            };
            mjNetMgr.cSend("dissolvedRoom", content, exitCb);
          } else mjNetMgr.cSend("exitOutRoom", {}, exitCb);
        }
        this.onBtnDisagreeClick();
      },
      onBtnDisagreeClick: function onBtnDisagreeClick() {
        this.animation.play(this.clips[1].name).once("finished", function() {
          this.node.destroy();
        }, this);
      }
    });
    cc._RF.pop();
  }, {
    mjDataMgr: "mjDataMgr",
    mjGameManager: "mjGameManager",
    mjNetMgr: "mjNetMgr"
  } ],
  oneAccountWahua: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "064baIoMAxM+qkF1YcQ0jfd", "oneAccountWahua");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        otherNameColor: {
          default: cc.Color.WHITE,
          displayName: "其他人名字颜色"
        },
        otherNameOutLineColor: {
          default: cc.Color.WHITE,
          displayName: "其他人名字描边颜色"
        },
        ownNameColor: {
          default: cc.Color.WHITE,
          displayName: "自己名字颜色"
        },
        ownNameOutLineColor: {
          default: cc.Color.WHITE,
          displayName: "自己名字描边颜色"
        }
      },
      onLoad: function onLoad() {}
    });
    cc._RF.pop();
  }, {} ],
  opsWahua: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "999e1TmWQ9EMYajztKataFd", "opsWahua");
    "use strict";
    var WhUtils = require("whUtils");
    cc.Class({
      extends: cc.Component,
      properties: {
        chiNode: {
          type: cc.Node,
          default: null
        },
        huanNode: {
          type: cc.Node,
          default: null
        },
        gangNode: {
          type: cc.Node,
          default: null
        },
        huNode: {
          type: cc.Node,
          default: null
        }
      },
      onLoad: function onLoad() {
        fun.event.add("wahuaOpsEventListener", "wahuaOpsEvent", this.show.bind(this));
        this.chiNode.getChildByName("btnChi").on("click", this.onBtnChiClick.bind(this, 1));
        this.chiNode.getChildByName("btnGuo").on("click", this.onBtnChiClick.bind(this, 0));
        this.huanNode.getChildByName("btnHuan").on("click", this.onBtnHuanClick, this);
        this.gangNode.getChildByName("btnGang").on("click", this.onBntGangClick, this);
        this.huNode.getChildByName("btnHu").on("click", this.onBtnHuClick, this);
      },
      onDestroy: function onDestroy() {
        fun.event.remove("wahuaOpsEventListener");
      },
      getSpriteFrameByCard: function getSpriteFrameByCard(id) {
        return this.node.parent.getComponent("gameMgrWahua").paiMianAltas.getSpriteFrame(WhUtils.getCardById(id));
      },
      show: function show(data) {
        this._data = data;
        var name = void 0;
        data.isEat ? name = "chiNode" : data.isReplaceWhite ? name = "huanNode" : data.isGang ? name = "gangNode" : data.isHu && (name = "huNode");
        for (var i = 0; i < data.playChess.length; ++i) this[name].getChildByName("card" + (i + 1)).getComponent(cc.Sprite).spriteFrame = this.getSpriteFrameByCard(data.playChess[i]);
        this[name].active = true;
      },
      onBtnChiClick: function onBtnChiClick(num) {
        this.chiNode.active = false;
        fun.net.send("OpsAccept", {
          isEat: num,
          showChess: this._data.playChess
        });
      },
      onBtnHuanClick: function onBtnHuanClick() {
        this.huanNode.active = false;
        fun.net.send("OpsAccept", {
          isReplaceWhite: 1,
          showChess: this._data.playChess
        });
      },
      onBntGangClick: function onBntGangClick() {
        this.gangNode.active = false;
        fun.net.send("OpsAccept", {
          isGang: 1,
          showChess: this._data.playChess
        });
      },
      onBtnHuClick: function onBtnHuClick() {
        this.huNode.active = false;
        fun.net.send("OpsAccept", {
          isHu: 1,
          showChess: this._data.playChess
        });
      }
    });
    cc._RF.pop();
  }, {
    whUtils: "whUtils"
  } ],
  "papaparse.min": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9e2b4lAXJxI4rxiUbHSt6Kp", "papaparse.min");
    "use strict";
    var _typeof = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function(obj) {
      return typeof obj;
    } : function(obj) {
      return obj && "function" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    !function(e) {
      function t(t, r) {
        if (r = r || {}, r.worker && S.WORKERS_SUPPORTED) {
          var n = f();
          return n.userStep = r.step, n.userChunk = r.chunk, n.userComplete = r.complete, 
          n.userError = r.error, r.step = m(r.step), r.chunk = m(r.chunk), r.complete = m(r.complete), 
          r.error = m(r.error), delete r.worker, void n.postMessage({
            input: t,
            config: r,
            workerId: n.id
          });
        }
        var o = null;
        return "string" == typeof t ? o = r.download ? new i(r) : new a(r) : (e.File && t instanceof File || t instanceof Object) && (o = new s(r)), 
        o.stream(t);
      }
      function r(e, t) {
        function r() {
          "object" == ("undefined" === typeof t ? "undefined" : _typeof(t)) && ("string" == typeof t.delimiter && 1 == t.delimiter.length && -1 == S.BAD_DELIMITERS.indexOf(t.delimiter) && (u = t.delimiter), 
          ("boolean" == typeof t.quotes || t.quotes instanceof Array) && (o = t.quotes), "string" == typeof t.newline && (h = t.newline));
        }
        function n(e) {
          if ("object" != ("undefined" === typeof e ? "undefined" : _typeof(e))) return [];
          var t = [];
          for (var r in e) t.push(r);
          return t;
        }
        function i(e, t) {
          var r = "";
          "string" == typeof e && (e = JSON.parse(e)), "string" == typeof t && (t = JSON.parse(t));
          var n = e instanceof Array && e.length > 0, i = !(t[0] instanceof Array);
          if (n) {
            for (var a = 0; a < e.length; a++) a > 0 && (r += u), r += s(e[a], a);
            t.length > 0 && (r += h);
          }
          for (var o = 0; o < t.length; o++) {
            for (var f = n ? e.length : t[o].length, c = 0; f > c; c++) {
              c > 0 && (r += u);
              var d = n && i ? e[c] : c;
              r += s(t[o][d], c);
            }
            o < t.length - 1 && (r += h);
          }
          return r;
        }
        function s(e, t) {
          if ("undefined" == typeof e || null === e) return "";
          e = e.toString().replace(/"/g, '""');
          var r = "boolean" == typeof o && o || o instanceof Array && o[t] || a(e, S.BAD_DELIMITERS) || e.indexOf(u) > -1 || " " == e.charAt(0) || " " == e.charAt(e.length - 1);
          return r ? '"' + e + '"' : e;
        }
        function a(e, t) {
          for (var r = 0; r < t.length; r++) if (e.indexOf(t[r]) > -1) return !0;
          return !1;
        }
        var o = !1, u = ",", h = "\r\n";
        if (r(), "string" == typeof e && (e = JSON.parse(e)), e instanceof Array) {
          if (!e.length || e[0] instanceof Array) return i(null, e);
          if ("object" == _typeof(e[0])) return i(n(e[0]), e);
        } else if ("object" == ("undefined" === typeof e ? "undefined" : _typeof(e))) return "string" == typeof e.data && (e.data = JSON.parse(e.data)), 
        e.data instanceof Array && (e.fields || (e.fields = e.data[0] instanceof Array ? e.fields : n(e.data[0])), 
        e.data[0] instanceof Array || "object" == _typeof(e.data[0]) || (e.data = [ e.data ])), 
        i(e.fields || [], e.data || []);
        throw "exception: Unable to serialize unrecognized input";
      }
      function n(t) {
        function r(e) {
          var t = _(e);
          t.chunkSize = parseInt(t.chunkSize), e.step || e.chunk || (t.chunkSize = null), 
          this._handle = new o(t), this._handle.streamer = this, this._config = t;
        }
        this._handle = null, this._paused = !1, this._finished = !1, this._input = null, 
        this._baseIndex = 0, this._partialLine = "", this._rowCount = 0, this._start = 0, 
        this._nextChunk = null, this.isFirstChunk = !0, this._completeResults = {
          data: [],
          errors: [],
          meta: {}
        }, r.call(this, t), this.parseChunk = function(t) {
          if (this.isFirstChunk && m(this._config.beforeFirstChunk)) {
            var r = this._config.beforeFirstChunk(t);
            void 0 !== r && (t = r);
          }
          this.isFirstChunk = !1;
          var n = this._partialLine + t;
          this._partialLine = "";
          var i = this._handle.parse(n, this._baseIndex, !this._finished);
          if (!this._handle.paused() && !this._handle.aborted()) {
            var s = i.meta.cursor;
            this._finished || (this._partialLine = n.substring(s - this._baseIndex), this._baseIndex = s), 
            i && i.data && (this._rowCount += i.data.length);
            var a = this._finished || this._config.preview && this._rowCount >= this._config.preview;
            if (y) e.postMessage({
              results: i,
              workerId: S.WORKER_ID,
              finished: a
            }); else if (m(this._config.chunk)) {
              if (this._config.chunk(i, this._handle), this._paused) return;
              i = void 0, this._completeResults = void 0;
            }
            return this._config.step || this._config.chunk || (this._completeResults.data = this._completeResults.data.concat(i.data), 
            this._completeResults.errors = this._completeResults.errors.concat(i.errors), this._completeResults.meta = i.meta), 
            !a || !m(this._config.complete) || i && i.meta.aborted || this._config.complete(this._completeResults), 
            a || i && i.meta.paused || this._nextChunk(), i;
          }
        }, this._sendError = function(t) {
          m(this._config.error) ? this._config.error(t) : y && this._config.error && e.postMessage({
            workerId: S.WORKER_ID,
            error: t,
            finished: !1
          });
        };
      }
      function i(e) {
        function t(e) {
          var t = e.getResponseHeader("Content-Range");
          return parseInt(t.substr(t.lastIndexOf("/") + 1));
        }
        e = e || {}, e.chunkSize || (e.chunkSize = S.RemoteChunkSize), n.call(this, e);
        var r;
        this._nextChunk = k ? function() {
          this._readChunk(), this._chunkLoaded();
        } : function() {
          this._readChunk();
        }, this.stream = function(e) {
          this._input = e, this._nextChunk();
        }, this._readChunk = function() {
          if (this._finished) return void this._chunkLoaded();
          if (r = new XMLHttpRequest(), k || (r.onload = g(this._chunkLoaded, this), r.onerror = g(this._chunkError, this)), 
          r.open("GET", this._input, !k), this._config.chunkSize) {
            var e = this._start + this._config.chunkSize - 1;
            r.setRequestHeader("Range", "bytes=" + this._start + "-" + e), r.setRequestHeader("If-None-Match", "webkit-no-cache");
          }
          try {
            r.send();
          } catch (t) {
            this._chunkError(t.message);
          }
          k && 0 == r.status ? this._chunkError() : this._start += this._config.chunkSize;
        }, this._chunkLoaded = function() {
          if (4 == r.readyState) {
            if (r.status < 200 || r.status >= 400) return void this._chunkError();
            this._finished = !this._config.chunkSize || this._start > t(r), this.parseChunk(r.responseText);
          }
        }, this._chunkError = function(e) {
          var t = r.statusText || e;
          this._sendError(t);
        };
      }
      function s(e) {
        e = e || {}, e.chunkSize || (e.chunkSize = S.LocalChunkSize), n.call(this, e);
        var t, r, i = "undefined" != typeof FileReader;
        this.stream = function(e) {
          this._input = e, r = e.slice || e.webkitSlice || e.mozSlice, i ? (t = new FileReader(), 
          t.onload = g(this._chunkLoaded, this), t.onerror = g(this._chunkError, this)) : t = new FileReaderSync(), 
          this._nextChunk();
        }, this._nextChunk = function() {
          this._finished || this._config.preview && !(this._rowCount < this._config.preview) || this._readChunk();
        }, this._readChunk = function() {
          var e = this._input;
          if (this._config.chunkSize) {
            var n = Math.min(this._start + this._config.chunkSize, this._input.size);
            e = r.call(e, this._start, n);
          }
          var s = t.readAsText(e, this._config.encoding);
          i || this._chunkLoaded({
            target: {
              result: s
            }
          });
        }, this._chunkLoaded = function(e) {
          this._start += this._config.chunkSize, this._finished = !this._config.chunkSize || this._start >= this._input.size, 
          this.parseChunk(e.target.result);
        }, this._chunkError = function() {
          this._sendError(t.error);
        };
      }
      function a(e) {
        e = e || {}, n.call(this, e);
        var t, r;
        this.stream = function(e) {
          return t = e, r = e, this._nextChunk();
        }, this._nextChunk = function() {
          if (!this._finished) {
            var e = this._config.chunkSize, t = e ? r.substr(0, e) : r;
            return r = e ? r.substr(e) : "", this._finished = !r, this.parseChunk(t);
          }
        };
      }
      function o(e) {
        function t() {
          if (b && d && (h("Delimiter", "UndetectableDelimiter", "Unable to auto-detect delimiting character; defaulted to '" + S.DefaultDelimiter + "'"), 
          d = !1), e.skipEmptyLines) for (var t = 0; t < b.data.length; t++) 1 == b.data[t].length && "" == b.data[t][0] && b.data.splice(t--, 1);
          return r() && n(), i();
        }
        function r() {
          return e.header && 0 == y.length;
        }
        function n() {
          if (b) {
            for (var e = 0; r() && e < b.data.length; e++) for (var t = 0; t < b.data[e].length; t++) y.push(b.data[e][t]);
            b.data.splice(0, 1);
          }
        }
        function i() {
          if (!b || !e.header && !e.dynamicTyping) return b;
          for (var t = 0; t < b.data.length; t++) {
            for (var r = {}, n = 0; n < b.data[t].length; n++) {
              if (e.dynamicTyping) {
                var i = b.data[t][n];
                b.data[t][n] = "true" == i || "TRUE" == i || "false" != i && "FALSE" != i && o(i);
              }
              e.header && (n >= y.length ? (r.__parsed_extra || (r.__parsed_extra = []), r.__parsed_extra.push(b.data[t][n])) : r[y[n]] = b.data[t][n]);
            }
            e.header && (b.data[t] = r, n > y.length ? h("FieldMismatch", "TooManyFields", "Too many fields: expected " + y.length + " fields but parsed " + n, t) : n < y.length && h("FieldMismatch", "TooFewFields", "Too few fields: expected " + y.length + " fields but parsed " + n, t));
          }
          return e.header && b.meta && (b.meta.fields = y), b;
        }
        function s(t) {
          for (var r, n, i, s = [ ",", "\t", "|", ";", S.RECORD_SEP, S.UNIT_SEP ], a = 0; a < s.length; a++) {
            var o = s[a], h = 0, f = 0;
            i = void 0;
            for (var c = new u({
              delimiter: o,
              preview: 10
            }).parse(t), d = 0; d < c.data.length; d++) {
              var l = c.data[d].length;
              f += l, "undefined" != typeof i ? l > 1 && (h += Math.abs(l - i), i = l) : i = l;
            }
            c.data.length > 0 && (f /= c.data.length), ("undefined" == typeof n || n > h) && f > 1.99 && (n = h, 
            r = o);
          }
          return e.delimiter = r, {
            successful: !!r,
            bestDelimiter: r
          };
        }
        function a(e) {
          e = e.substr(0, 1048576);
          var t = e.split("\r");
          if (1 == t.length) return "\n";
          for (var r = 0, n = 0; n < t.length; n++) "\n" == t[n][0] && r++;
          return r >= t.length / 2 ? "\r\n" : "\r";
        }
        function o(e) {
          var t = l.test(e);
          return t ? parseFloat(e) : e;
        }
        function h(e, t, r, n) {
          b.errors.push({
            type: e,
            code: t,
            message: r,
            row: n
          });
        }
        var f, c, d, l = /^\s*-?(\d*\.?\d+|\d+\.?\d*)(e[-+]?\d+)?\s*$/i, p = this, g = 0, v = !1, k = !1, y = [], b = {
          data: [],
          errors: [],
          meta: {}
        };
        if (m(e.step)) {
          var R = e.step;
          e.step = function(n) {
            if (b = n, r()) t(); else {
              if (t(), 0 == b.data.length) return;
              g += n.data.length, e.preview && g > e.preview ? c.abort() : R(b, p);
            }
          };
        }
        this.parse = function(r, n, i) {
          if (e.newline || (e.newline = a(r)), d = !1, !e.delimiter) {
            var o = s(r);
            o.successful ? e.delimiter = o.bestDelimiter : (d = !0, e.delimiter = S.DefaultDelimiter), 
            b.meta.delimiter = e.delimiter;
          }
          var h = _(e);
          return e.preview && e.header && h.preview++, f = r, c = new u(h), b = c.parse(f, n, i), 
          t(), v ? {
            meta: {
              paused: !0
            }
          } : b || {
            meta: {
              paused: !1
            }
          };
        }, this.paused = function() {
          return v;
        }, this.pause = function() {
          v = !0, c.abort(), f = f.substr(c.getCharIndex());
        }, this.resume = function() {
          v = !1, p.streamer.parseChunk(f);
        }, this.aborted = function() {
          return k;
        }, this.abort = function() {
          k = !0, c.abort(), b.meta.aborted = !0, m(e.complete) && e.complete(b), f = "";
        };
      }
      function u(e) {
        e = e || {};
        var t = e.delimiter, r = e.newline, n = e.comments, i = e.step, s = e.preview, a = e.fastMode;
        if (("string" != typeof t || S.BAD_DELIMITERS.indexOf(t) > -1) && (t = ","), n === t) throw "Comment character same as delimiter";
        !0 === n ? n = "#" : ("string" != typeof n || S.BAD_DELIMITERS.indexOf(n) > -1) && (n = !1), 
        "\n" != r && "\r" != r && "\r\n" != r && (r = "\n");
        var o = 0, u = !1;
        this.parse = function(e, h, f) {
          function c(e) {
            b.push(e), S = o;
          }
          function d(t) {
            return f ? p() : ("undefined" == typeof t && (t = e.substr(o)), w.push(t), o = g, 
            c(w), y && _(), p());
          }
          function l(t) {
            o = t, c(w), w = [], O = e.indexOf(r, o);
          }
          function p(e) {
            return {
              data: b,
              errors: R,
              meta: {
                delimiter: t,
                linebreak: r,
                aborted: u,
                truncated: !!e,
                cursor: S + (h || 0)
              }
            };
          }
          function _() {
            i(p()), b = [], R = [];
          }
          if ("string" != typeof e) throw "Input must be a string";
          var g = e.length, m = t.length, v = r.length, k = n.length, y = "function" == typeof i;
          o = 0;
          var b = [], R = [], w = [], S = 0;
          if (!e) return p();
          if (a || !1 !== a && -1 === e.indexOf('"')) {
            for (var C = e.split(r), E = 0; E < C.length; E++) {
              var w = C[E];
              if (o += w.length, E !== C.length - 1) o += r.length; else if (f) return p();
              if (!n || w.substr(0, k) != n) {
                if (y) {
                  if (b = [], c(w.split(t)), _(), u) return p();
                } else c(w.split(t));
                if (s && E >= s) return b = b.slice(0, s), p(!0);
              }
            }
            return p();
          }
          for (var x = e.indexOf(t, o), O = e.indexOf(r, o); ;) if ('"' != e[o]) if (n && 0 === w.length && e.substr(o, k) === n) {
            if (-1 == O) return p();
            o = O + v, O = e.indexOf(r, o), x = e.indexOf(t, o);
          } else if (-1 !== x && (O > x || -1 === O)) w.push(e.substring(o, x)), o = x + m, 
          x = e.indexOf(t, o); else {
            if (-1 === O) break;
            if (w.push(e.substring(o, O)), l(O + v), y && (_(), u)) return p();
            if (s && b.length >= s) return p(!0);
          } else {
            var I = o;
            for (o++; ;) {
              var I = e.indexOf('"', I + 1);
              if (-1 === I) return f || R.push({
                type: "Quotes",
                code: "MissingQuotes",
                message: "Quoted field unterminated",
                row: b.length,
                index: o
              }), d();
              if (I === g - 1) {
                var D = e.substring(o, I).replace(/""/g, '"');
                return d(D);
              }
              if ('"' != e[I + 1]) {
                if (e[I + 1] == t) {
                  w.push(e.substring(o, I).replace(/""/g, '"')), o = I + 1 + m, x = e.indexOf(t, o), 
                  O = e.indexOf(r, o);
                  break;
                }
                if (e.substr(I + 1, v) === r) {
                  if (w.push(e.substring(o, I).replace(/""/g, '"')), l(I + 1 + v), x = e.indexOf(t, o), 
                  y && (_(), u)) return p();
                  if (s && b.length >= s) return p(!0);
                  break;
                }
              } else I++;
            }
          }
          return d();
        }, this.abort = function() {
          u = !0;
        }, this.getCharIndex = function() {
          return o;
        };
      }
      function h() {
        var e = document.getElementsByTagName("script");
        return e.length ? e[e.length - 1].src : "";
      }
      function f() {
        if (!S.WORKERS_SUPPORTED) return !1;
        if (!b && null === S.SCRIPT_PATH) throw new Error("Script path cannot be determined automatically when Papa Parse is loaded asynchronously. You need to set Papa.SCRIPT_PATH manually.");
        var t = S.SCRIPT_PATH || v;
        t += (-1 !== t.indexOf("?") ? "&" : "?") + "papaworker";
        var r = new e.Worker(t);
        return r.onmessage = c, r.id = w++, R[r.id] = r, r;
      }
      function c(e) {
        var t = e.data, r = R[t.workerId], n = !1;
        if (t.error) r.userError(t.error, t.file); else if (t.results && t.results.data) {
          var i = function i() {
            n = !0, d(t.workerId, {
              data: [],
              errors: [],
              meta: {
                aborted: !0
              }
            });
          }, s = {
            abort: i,
            pause: l,
            resume: l
          };
          if (m(r.userStep)) {
            for (var a = 0; a < t.results.data.length && (r.userStep({
              data: [ t.results.data[a] ],
              errors: t.results.errors,
              meta: t.results.meta
            }, s), !n); a++) ;
            delete t.results;
          } else m(r.userChunk) && (r.userChunk(t.results, s, t.file), delete t.results);
        }
        t.finished && !n && d(t.workerId, t.results);
      }
      function d(e, t) {
        var r = R[e];
        m(r.userComplete) && r.userComplete(t), r.terminate(), delete R[e];
      }
      function l() {
        throw "Not implemented.";
      }
      function p(t) {
        var r = t.data;
        if ("undefined" == typeof S.WORKER_ID && r && (S.WORKER_ID = r.workerId), "string" == typeof r.input) e.postMessage({
          workerId: S.WORKER_ID,
          results: S.parse(r.input, r.config),
          finished: !0
        }); else if (e.File && r.input instanceof File || r.input instanceof Object) {
          var n = S.parse(r.input, r.config);
          n && e.postMessage({
            workerId: S.WORKER_ID,
            results: n,
            finished: !0
          });
        }
      }
      function _(e) {
        if ("object" != ("undefined" === typeof e ? "undefined" : _typeof(e))) return e;
        var t = e instanceof Array ? [] : {};
        for (var r in e) t[r] = _(e[r]);
        return t;
      }
      function g(e, t) {
        return function() {
          e.apply(t, arguments);
        };
      }
      function m(e) {
        return "function" == typeof e;
      }
      var v, k = !e.document && !!e.postMessage, y = k && /(\?|&)papaworker(=|&|$)/.test(e.location.search), b = !1, R = {}, w = 0, S = {};
      if (S.parse = t, S.unparse = r, S.RECORD_SEP = String.fromCharCode(30), S.UNIT_SEP = String.fromCharCode(31), 
      S.BYTE_ORDER_MARK = "\ufeff", S.BAD_DELIMITERS = [ "\r", "\n", '"', S.BYTE_ORDER_MARK ], 
      S.WORKERS_SUPPORTED = !k && !!e.Worker, S.SCRIPT_PATH = null, S.LocalChunkSize = 10485760, 
      S.RemoteChunkSize = 5242880, S.DefaultDelimiter = ",", S.Parser = u, S.ParserHandle = o, 
      S.NetworkStreamer = i, S.FileStreamer = s, S.StringStreamer = a, "undefined" != typeof module && module.exports ? module.exports = S : m(e.define) && e.define.amd ? define(function() {
        return S;
      }) : e.Papa = S, e.jQuery) {
        var C = e.jQuery;
        C.fn.parse = function(t) {
          function r() {
            if (0 == a.length) return void (m(t.complete) && t.complete());
            var e = a[0];
            if (m(t.before)) {
              var r = t.before(e.file, e.inputElem);
              if ("object" == ("undefined" === typeof r ? "undefined" : _typeof(r))) {
                if ("abort" == r.action) return void n("AbortError", e.file, e.inputElem, r.reason);
                if ("skip" == r.action) return void i();
                "object" == _typeof(r.config) && (e.instanceConfig = C.extend(e.instanceConfig, r.config));
              } else if ("skip" == r) return void i();
            }
            var s = e.instanceConfig.complete;
            e.instanceConfig.complete = function(t) {
              m(s) && s(t, e.file, e.inputElem), i();
            }, S.parse(e.file, e.instanceConfig);
          }
          function n(e, r, n, i) {
            m(t.error) && t.error({
              name: e
            }, r, n, i);
          }
          function i() {
            a.splice(0, 1), r();
          }
          var s = t.config || {}, a = [];
          return this.each(function() {
            var t = "INPUT" == C(this).prop("tagName").toUpperCase() && "file" == C(this).attr("type").toLowerCase() && e.FileReader;
            if (!t || !this.files || 0 == this.files.length) return !0;
            for (var r = 0; r < this.files.length; r++) a.push({
              file: this.files[r],
              inputElem: this,
              instanceConfig: C.extend({}, s)
            });
          }), r(), this;
        };
      }
      y ? e.onmessage = p : S.WORKERS_SUPPORTED && (v = h(), document.body ? document.addEventListener("DOMContentLoaded", function() {
        b = !0;
      }, !0) : b = !0), i.prototype = Object.create(n.prototype), i.prototype.constructor = i, 
      s.prototype = Object.create(n.prototype), s.prototype.constructor = s, a.prototype = Object.create(a.prototype), 
      a.prototype.constructor = a;
    }("undefined" != typeof window ? window : void 0);
    cc._RF.pop();
  }, {} ],
  phoneStatusWahua: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bfd6dt7+NdG8KtpGMKcEXgG", "phoneStatusWahua");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        wifiNode: {
          type: cc.Node,
          default: null
        },
        signalNode: {
          type: cc.Node,
          default: null
        },
        isChargerNode: {
          type: cc.Node,
          default: null
        },
        batteryProgress: {
          type: cc.ProgressBar,
          default: null
        },
        timeLabel: {
          type: cc.Label,
          default: null
        }
      },
      onLoad: function onLoad() {
        fun.event.add("PhoneNetPhoneStatusWahua", "PhoneNet", this.onPhoneNetEvent.bind(this));
        fun.event.add("PhoneBatteryPhoneStatusWahua", "PhoneBattery", this.onPhoneBatteryEvent.bind(this));
        require("JSPhoneNetBattery").getNetBatteryStatus();
        this._sumdt = 0;
        this._currTime = Date.now();
        this.formatTime();
      },
      onDestroy: function onDestroy() {
        fun.event.remove("PhoneNetPhoneStatusWahua");
        fun.event.remove("PhoneBatteryPhoneStatusWahua");
      },
      update: function update(dt) {
        this._sumdt += dt;
        if (this._sumdt < 1) return;
        this._sumdt -= 1;
        this._currTime += 1e3;
        this.formatTime();
      },
      onPhoneNetEvent: function onPhoneNetEvent(data) {
        if (5 === data.status) {
          this.wifiNode.active = true;
          this.signalNode.active = false;
          this.setWifiStrength(data.strength);
        } else {
          this.wifiNode.active = false;
          this.signalNode.active = true;
          this.setSingalStrength(data.signal);
        }
      },
      onPhoneBatteryEvent: function onPhoneBatteryEvent(data) {
        this.isChargerNode.active = data.status && data.status > 0;
        this.batteryProgress.progress = data.level;
      },
      setWifiStrength: function setWifiStrength() {
        var num = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
        cc.sys.os === cc.sys.OS_IOS && (num += 1);
        var name = "wifi_" + num;
        this.wifiNode.children.forEach(function(value) {
          value.name === name ? value.active = true : value.active = false;
        });
      },
      setSingalStrength: function setSingalStrength() {
        var num = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
        var name = "xinhao_" + num;
        this.signalNode.children.forEach(function(value) {
          value.name === name ? value.active = true : value.active = false;
        });
      },
      formatTime: function formatTime() {
        var d = new Date(this._currTime);
        var h = d.getHours();
        h < 10 && (h = "0" + h);
        var m = d.getMinutes();
        m < 10 && (m = "0" + m);
        this.timeLabel.string = h + ":" + m;
      }
    });
    cc._RF.pop();
  }, {
    JSPhoneNetBattery: "JSPhoneNetBattery"
  } ],
  playerDataWahua: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "497e0/7VN1OaIxBakc73UrS", "playerDataWahua");
    "use strict";
    var UIPos = cc.Enum({
      xia: 0,
      you: 1,
      shang: 2,
      zuo: 3
    });
    var SeatDir = [ "xia", "you", "shang", "zuo" ];
    cc.Class({
      extends: cc.Component,
      properties: {
        uiPos: {
          type: UIPos,
          default: UIPos.xia
        }
      },
      onLoad: function onLoad() {
        this.playerUi = this.node.getComponent("playerUiWahua");
        this.playerUi.setWait();
        var roomInfo = fun.db.getData("RoomInfo");
        var userMap = roomInfo.userMap;
        var playerNum = roomInfo.roomRule.playerNum;
        var userInfo = fun.db.getData("UserInfo");
        userInfo.userId = userInfo.UserId.toString();
        userInfo.userName = userInfo.UserName;
        userInfo.ip = userInfo.Ip;
        userInfo.imageUrl = userInfo.UserHeadUrl;
        this._userId = userInfo.userId;
        var isUserMap = !(!userMap || !userMap[this._userId]);
        this._sort = 0;
        isUserMap && (this._sort = userMap[this._userId].sort);
        switch (this.uiPos) {
         case UIPos.xia:
          isUserMap ? this.playerUi.setData(userMap[this._userId], this.uiPos) : this.playerUi.setData(userInfo, this.uiPos);
          break;

         case UIPos.you:
          if (2 === playerNum) {
            this.node.destroy();
            return;
          }
          this._sort = this._sort + 1 > playerNum - 1 ? 0 : this._sort + 1;
          break;

         case UIPos.shang:
          this._sort = 2 === playerNum ? this._sort + 1 > playerNum - 1 ? 0 : this._sort + 1 : this._sort + 2 > playerNum - 1 ? this._sort + 2 - playerNum === 2 ? 1 : 0 : this._sort + 2;
          break;

         case UIPos.zuo:
          if (playerNum < 4) {
            this.node.destroy();
            return;
          }
          this._sort = this._sort - 1 < 0 ? 3 : this._sort - 1;
        }
        userMap && this.setPlayerUi(roomInfo);
        this._enterRoomName = "RoomInfo" + fun.event.getSum();
        fun.event.add(this._enterRoomName, "RoomInfo", this.setPlayerUi.bind(this));
        this._offLineStateName = "OffLineState" + fun.event.getSum();
        fun.event.add(this._offLineStateName, "OffLineState", this.onLineStateEvent.bind(this));
      },
      onDestroy: function onDestroy() {
        fun.event.remove(this._enterRoomName);
        fun.event.remove(this._offLineStateName);
      },
      setPlayerUi: function setPlayerUi(data) {
        for (var key in data.userMap) if (data.userMap[key].sort === this._sort) {
          this._userId = parseInt(key);
          this.playerUi.setData(data.userMap[key], this.uiPos);
          return;
        }
      },
      getUserId: function getUserId() {
        return this._userId;
      },
      onLineStateEvent: function onLineStateEvent(data) {
        data.userId === this._userId && this.playerUi.showOffLine(data.flag);
      }
    });
    cc._RF.pop();
  }, {} ],
  playerDetailUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e144cRWbmlGyJL5zs3QOG6f", "playerDetailUI");
    "use strict";
    var Audio = require("Audio");
    cc.Class({
      extends: cc.Component,
      properties: {
        emojiListN: cc.Node
      },
      onLoad: function onLoad() {},
      initNode: function initNode() {
        this.isCdTime = false;
        this.basicInfoN = this.node.getChildByName("back").getChildByName("content");
        this.node.getChildByName("hitzone").on("touchend", this.close, this);
        this.animation = this.node.getComponent(cc.Animation);
        this.clips = this.animation.getClips();
        this.btnLocation = this.basicInfoN.getChildByName("btnPosDetail");
        this.node.getChildByName("hitzone").on("touchend", this.close, this);
        this.btnLocation.on("touchend", this.showLocationDetail, this);
        this.emojiListN.children.forEach(function(child) {
          child.on("touchend", function(event) {
            this.interactData.content = child.name;
            this.sendInteract();
          }, this);
        }.bind(this));
      },
      show: function show(playerData, onMapCB) {
        this.initNode();
        this.initBasicInfo(playerData);
        this.onMapCB = onMapCB;
      },
      close: function close() {
        Audio.playEffect("hall", "button_close.mp3");
        this.animation.play(this.clips[1].name).once("finished", function() {
          this.node.destroy();
        }, this);
      },
      onEnable: function onEnable() {
        this.animation.play(this.clips[0].name);
      },
      initBasicInfo: function initBasicInfo(playerData) {
        var nameL = this.basicInfoN.getChildByName("name").getComponent(cc.Label);
        var idL = this.basicInfoN.getChildByName("id").getComponent(cc.Label);
        var addrL = this.basicInfoN.getChildByName("addr").getComponent(cc.Label);
        nameL.string = playerData.name;
        idL.string = playerData.id;
        addrL.string = playerData.addr;
        this.btnLocation.active = !playerData.isNoLocation;
        this.emojiListN.active = !playerData.isSelf;
        this.interactData = {
          from: playerData.selfUid,
          to: playerData.curUid,
          chatType: "interact"
        };
      },
      sendInteract: function sendInteract() {
        if (this.isCdTime) return;
        this.isCdTime = true;
        setTimeout(function() {
          this.isCdTime = false;
        }.bind(this), 500);
        fun.net.pSend("Chat", this.interactData);
      },
      showLocationDetail: function showLocationDetail() {
        if (!this.onMapCB) return;
        this.onMapCB();
      },
      update: function update(dt) {}
    });
    cc._RF.pop();
  }, {
    Audio: "Audio"
  } ],
  playerMap: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cb219sjjTFLSoM9q6k1SfDN", "playerMap");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {
        this.animation = this.node.getComponent(cc.Animation);
        this.clips = this.animation.getClips();
        this.backN = this.node.getChildByName("back");
      },
      start: function start() {},
      close: function close() {
        this.animation.play(this.clips[1].name).once("finished", function() {
          this.node.destroy();
        }, this);
      },
      getDistance: function getDistance(meIdx, targetIdx) {
        var mData = this.players[meIdx];
        var targetData = this.players[targetIdx];
        var distance = -1;
        var creatDistanceData = function creatDistanceData() {
          var dColor = cc.Color.RED;
          var showDistance = Math.floor(distance) + "米";
          if (distance < 0) {
            showDistance = "距离未知";
            dColor = cc.Color.YELLOW;
          }
          if (distance > 1e3) {
            showDistance = (distance / 1e3).toFixed(2) + "千米";
            dColor = cc.Color.GREEN;
          }
          return {
            color: dColor,
            distance: showDistance
          };
        };
        if (!(mData && targetData && mData.Address && targetData.Address) || !cc.sys.isNative) return creatDistanceData();
        var points = {
          p1: mData.Address,
          p2: targetData.Address
        };
        distance = require("JSPhoneBaiDu").getDistanceByPoints(points);
        return creatDistanceData();
      },
      setDistance: function setDistance(lineN, meIdx, targetIdx) {
        var distanceData = this.getDistance(meIdx, targetIdx);
        var bgN = lineN.getChildByName("bg");
        var contentN = lineN.getChildByName("distance").getChildByName("content");
        bgN.color = distanceData.color;
        contentN.color = distanceData.color;
        contentN.getComponent(cc.Label).string = distanceData.distance;
      },
      show: function show(players) {
        this.players = players;
        for (var i = 0; i < 4; i++) {
          var playerN = this.backN.getChildByName("player_" + i);
          var playerData = players[i];
          var iconN = playerN.getChildByName("icon");
          var mainN = iconN.getChildByName("main");
          var waitN = iconN.getChildByName("wait");
          mainN.active = void 0 != playerData;
          waitN.active = void 0 == playerData;
          if (playerData) {
            var contentN = mainN.getChildByName("content");
            fun.utils.loadUrlRes(playerData.Icon, contentN);
          }
          for (var idx = 0; idx < 4; idx++) {
            if (idx == i) continue;
            var lineN = playerN.getChildByName("line_" + idx);
            lineN && this.setDistance(lineN, i, idx);
          }
        }
      }
    });
    cc._RF.pop();
  }, {
    JSPhoneBaiDu: "JSPhoneBaiDu"
  } ],
  playerUiWahua: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "59578I6fxVCXaPP+EM/zmqP", "playerUiWahua");
    "use strict";
    var _typeof = "function" === typeof Symbol && "symbol" === typeof Symbol.iterator ? function(obj) {
      return typeof obj;
    } : function(obj) {
      return obj && "function" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    var SeatEnum = cc.Enum({
      xia: 0,
      you: 1,
      shang: 2,
      zuo: 3
    });
    var JiaWeiArr = [ "tianjia", "dijia", "yinpai", "changsan" ];
    var WhDefine = require("whDefine");
    var WhUtils = require("whUtils");
    cc.Class({
      extends: cc.Component,
      properties: {
        orignalIcon: {
          type: cc.SpriteFrame,
          default: null
        },
        iconSp: {
          type: cc.Sprite,
          default: null
        },
        nameLabel: {
          type: cc.Label,
          default: null
        },
        scoreLabel: {
          type: cc.Label,
          default: null
        },
        scoreBg: {
          type: cc.Node,
          default: null
        },
        readyNode: {
          type: cc.Node,
          default: null
        },
        noCardNode: {
          type: cc.Node,
          default: null
        },
        quanNode: {
          type: cc.Node,
          default: null
        },
        directNode: {
          type: cc.Node,
          default: null
        },
        emojiNode: {
          type: cc.Node,
          default: null
        },
        textNode: {
          type: cc.Node,
          default: null
        },
        voiceNode: {
          type: cc.Node,
          default: null
        },
        offlineNode: {
          type: cc.Node,
          default: null
        },
        waitNode: {
          type: cc.Node,
          default: null
        },
        buhuaLabel: {
          type: cc.Label,
          default: null
        },
        paiPrefab: {
          type: cc.Prefab,
          default: null
        },
        tangPrefab: {
          type: cc.Prefab,
          default: null
        },
        optCardPrefab: {
          type: cc.Prefab,
          default: null
        },
        huPaiPrefab: {
          type: cc.Prefab,
          default: null
        }
      },
      onLoad: function onLoad() {
        this.setWait();
        var paiNode = this.node.getChildByName("paiNode");
        this.shouPaiNode = paiNode.getChildByName("shouPai");
        this.pengGangNode = paiNode.getChildByName("pengGang");
        this.dachuPaiNode = paiNode.getChildByName("dachuPai");
        this.enableSendN = paiNode.getChildByName("enableSend");
        this._paiArray = new Array();
        this._chiGangArray = new Array();
      },
      setWait: function setWait() {
        this.iconSp.SpriteFrame = this.orignalIcon;
        this.nameLabel.string = "";
        this.scoreLabel.string = "";
        this.scoreBg.active = false;
        this.readyNode.active = false;
        this.offlineNode.active = false;
        this.waitNode.active = true;
        this.buhuaLabel.string = "";
      },
      setData: function setData(data, uipos) {
        this.data = data;
        fun.utils.loadUrlRes(data.imageUrl, this.node.getChildByName("icon"));
        this.nameLabel.string = data.userName + " " + data.userId;
        this.scoreLabel.string = data.score || 0;
        this.node.getChildByName("name").active = true;
        this.node.getChildByName("score").active = true;
        this.scoreBg.active = true;
        this.waitNode.active = false;
        data.onLine && 1 !== data.onLine && (this.offlineNode.active = true);
        1 === data.currentState && this.showReady(true);
        this._uipos = uipos;
        fun.event.dispatch("wahuaInitCompleted", uipos);
      },
      onDestroy: function onDestroy() {
        this._paiArray = [];
        this._cards = [];
        this._chiGangArray = [];
      },
      clearDesk: function clearDesk() {
        this._paiArray = [];
        this._cards = [];
        this._chiGangArray = [];
        this.shouPaiNode.removeAllChildren();
        this.pengGangNode.removeAllChildren();
        this.dachuPaiNode.removeAllChildren();
      },
      moPai: function moPai(cardNumber) {
        cc.log("--- " + this._uipos + " moPai: ", cardNumber);
        switch (this._uipos) {
         case SeatEnum.xia:
          this.setEnableSend(true);
          var paiN = cc.instantiate(this.paiPrefab);
          paiN.parent = this.shouPaiNode;
          paiN.getComponent("whPaiTouch").setCardNumber(cardNumber);
          paiN.setPosition(cc.p(1160, -180));
          this._paiArray[this._paiArray.length] = paiN;
          var pai = WhUtils.getCardById(cardNumber);
          var card = paiN.getChildByName("content").getComponent(cc.Sprite).spriteFrame = this.getSpriteFrameByCard(pai);
          var enable = WhUtils.checkCardEnable(cardNumber, this._cards);
          if (enable) {
            cc.log("--- enable, type: ", enable, "undefined" === typeof enable ? "undefined" : _typeof(enable));
            WhUtils.setPaiEnable(paiN, false, false);
            if (_typeof("boolean" !== enable)) for (var _i = 0; _i < this._cards.cardArr.length; ++_i) this._cards.cardArr[_i] === enable && WhUtils.setPaiEnable(this._paiArray[_i], false, false);
            if ("object" === ("undefined" === typeof enable ? "undefined" : _typeof(enable))) if ("boolean" === typeof enable.song) {
              WhUtils.setPaiEnable(paiN, true, true);
              paiN.getChildByName("song").active = true;
            } else for (var _i2 = 0; _i2 < this._cards.cardArr.length; ++_i2) if (this._cards.cardArr[_i2] === enable.song) {
              WhUtils.setPaiEnable(this._paiArray[_i2], true, true);
              this._paiArray[_i2].getChildByName("song").active = true;
            }
          }
          break;

         case SeatEnum.you:
         case SeatEnum.shang:
         case SeatEnum.zuo:
          this.setCardShow(this._paiLeftNumber + 1);
        }
      },
      chuPai: function chuPai(cardInfo) {
        var flag = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        if (!cardInfo) return;
        var sendCard = cc.instantiate(this.tangPrefab);
        var id = cardInfo.cardNumber ? cardInfo.cardNumber : cardInfo;
        sendCard.getChildByName("content").getComponent(cc.Sprite).spriteFrame = this.getSpriteFrameByCard(WhUtils.getCardById(id));
        sendCard.parent = this.dachuPaiNode;
        var chupaiNum = this.dachuPaiNode.children.length;
        switch (this._uipos) {
         case SeatEnum.xia:
          var posx = 34 * (chupaiNum % 10 === 0 ? 10 : chupaiNum % 10), posy = void 0;
          posy = chupaiNum <= 10 ? 30 : chupaiNum > 10 && chupaiNum <= 20 ? -15 : -60;
          sendCard.setPosition(cc.p(posx + 400, posy));
          if (flag) {
            fun.net.send("PlayCard", {
              showChess: id
            }, function(rsp) {
              rsp.returnStatu && 1 !== rsp.returnStatu && cc.log("--- 出牌错误 ---");
            });
            this.setEnableSend(false);
            for (var _i3 = 0; _i3 < this._cards.cardArr.length; ++_i3) this._cards.cardArr[_i3] === id && this._cards.cardArr.splice(_i3, 1);
            fun.event.dispatch("whNeedReSortCards", this._cards.cardArr);
          }
          break;

         case SeatEnum.you:
          var _posx = void 0, _posy = -20 * (chupaiNum % 10 === 0 ? 10 : chupaiNum % 10);
          _posx = chupaiNum <= 10 ? 60 : chupaiNum > 10 && chupaiNum <= 20 ? 30 : 0;
          sendCard.setPosition(cc.p(_posx, _posy));
          flag && this.setCardShow(this._paiLeftNumber - 1);
          break;

         case SeatEnum.shang:
          var _posx2 = -34 * (chupaiNum % 10 === 0 ? 10 : chupaiNum % 10), _posy2 = void 0, order = 3;
          if (chupaiNum <= 10) {
            _posy2 = -120;
            order = 3;
          } else if (chupaiNum > 10 && chupaiNum <= 20) {
            _posy2 = -75;
            order = 2;
          } else {
            _posy2 = -30;
            order = 1;
          }
          sendCard.setLocalZOrder(order);
          sendCard.setPosition(cc.p(_posx2 - 205, _posy2));
          flag && this.setCardShow(this._paiLeftNumber - 1);
          break;

         case SeatEnum.zuo:
          var _posx3 = void 0, _posy3 = 20 * (chupaiNum % 10 === 0 ? 10 : chupaiNum % 10);
          _posx3 = chupaiNum <= 10 ? 0 : chupaiNum > 10 && chupaiNum <= 20 ? 30 : 60;
          sendCard.setPosition(cc.p(_posx3, _posy3));
          flag && this.setCardShow(this._paiLeftNumber - 1);
        }
      },
      setCardShow: function setCardShow(cards) {
        var flag = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        cc.log("--- setCardShow  cards: ", cards);
        this.shouPaiNode.removeAllChildren();
        this._paiArray = [];
        this._paiLeftNumber = this._uipos === SeatEnum.xia ? cards.cardArr.length : cards;
        switch (this._uipos) {
         case SeatEnum.xia:
          this._cards = cards;
          this._enableNumber = cards.enableNumber;
          for (var _i4 = 0; _i4 < cards.cardArr.length; ++_i4) {
            var posx = void 0, pai = WhUtils.getCardById(cards.cardArr[_i4]);
            if (cards.cardArr.length % 2 === 1) posx = 60 * (_i4 - cards.cardArr.length) + 1200; else {
              posx = 60 * (_i4 - 1 - cards.cardArr.length) + 1200;
              this.setEnableSend(false);
            }
            this._paiArray[_i4] = cc.instantiate(this.paiPrefab);
            this._paiArray[_i4].setPosition(cc.p(posx, -180));
            this._paiArray[_i4].parent = this.shouPaiNode;
            this._paiArray[_i4].getChildByName("song").active = false;
            this._paiArray[_i4].getChildByName("content").getComponent(cc.Sprite).spriteFrame = this.getSpriteFrameByCard(pai);
            this._paiArray[_i4].getComponent("whPaiTouch").setCardNumber(cards.cardArr[_i4]);
            WhUtils.setPaiEnable(this._paiArray[_i4], true, true);
            if (0 !== cards.songCardArr.length) {
              WhUtils.setPaiEnable(this._paiArray[_i4], false, false);
              for (var s = 0; s < cards.songCardArr.length; s++) if (cards.cardArr[_i4] === cards.songCardArr[s]) {
                this._paiArray[_i4].getChildByName("song").active = true;
                WhUtils.setPaiEnable(this._paiArray[_i4], true, true);
                break;
              }
            } else this._enableNumber > _i4 && WhUtils.setPaiEnable(this._paiArray[_i4], false, false);
          }
          break;

         case SeatEnum.you:
          for (var _i5 = 0; _i5 < cards; ++_i5) {
            this._paiArray[_i5] = cc.instantiate(this.paiPrefab);
            var posy = 30 * (_i5 - cards);
            this._paiArray[_i5].setPosition(cc.p(0, posy));
            this._paiArray[_i5].parent = this.shouPaiNode;
          }
          break;

         case SeatEnum.shang:
          for (var _i6 = 0; _i6 < cards; ++_i6) {
            this._paiArray[_i6] = cc.instantiate(this.paiPrefab);
            var _posx4 = void 0;
            _posx4 = cards % 2 === 1 ? 34 * (_i6 - 1) - 750 : 34.5 * _i6 - 750;
            this._paiArray[_i6].setPosition(cc.p(_posx4, 50));
            this._paiArray[_i6].parent = this.shouPaiNode;
          }
          cards % 2 !== 1 || flag || this._paiArray[0].setPositionX(this._paiArray[0].getPositionX() - 10);
          break;

         case SeatEnum.zuo:
          for (var _i7 = 0; _i7 < cards; ++_i7) {
            this._paiArray[_i7] = cc.instantiate(this.paiPrefab);
            var _posx5 = 34 * (-cards - _i7) + 100;
            this._paiArray[_i7].setPosition(cc.p(_posx5, -10));
            this._paiArray[_i7].parent = this.shouPaiNode;
          }
        }
      },
      setChiGang: function setChiGang(cardArr) {
        var flag = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        var type = 3 === cardArr.length ? "gang" : "chi";
        if (this._uipos === SeatEnum.xia && flag) {
          this.setEnableSend(true);
          for (var _i8 = 0; _i8 < this._cards.cardArr.length; ++_i8) for (var j = 0; j < cardArr.length; ++j) this._cards.cardArr[_i8] === cardArr[j] && this._cards.cardArr.splice(_i8, 1);
          "gang" === type && this._paiArray[this._paiArray.length - 1].removeFromParent();
          fun.event.dispatch("whNeedReSortCards", this._cards.cardArr);
        } else flag && this.setCardShow(this._paiLeftNumber - cardArr.length + 1, true);
        var pos = void 0, dir = void 0, opsNum = this.pengGangNode.children.length;
        switch (this._uipos) {
         case SeatEnum.xia:
          dir = "xia";
          pos = cc.p(120 * opsNum - 40, -180);
          break;

         case SeatEnum.you:
          dir = "you";
          pos = cc.p(500, 40 * opsNum + 100);
          break;

         case SeatEnum.shang:
          dir = "shang";
          pos = cc.p(-120 - 70 * opsNum, 50);
          break;

         case SeatEnum.zuo:
          dir = "zuo";
          pos = cc.p(60, 500 - 40 * opsNum);
        }
        var opt = cc.instantiate(this.optCardPrefab);
        opt.setPosition(pos);
        opt.parent = this.pengGangNode;
        this._chiGangArray[this._chiGangArray.length] = cardArr;
        for (var _i9 = 0; _i9 < cardArr.length; ++_i9) {
          var typeN = opt.getChildByName(dir).getChildByName(type);
          typeN.active = true;
          var nd = typeN.getChildByName("card" + (_i9 + 1));
          nd.getChildByName("content").getComponent(cc.Sprite).spriteFrame = this.getSpriteFrameByCard(WhUtils.getCardById(cardArr[_i9]));
        }
      },
      setHuan: function setHuan(cardArr) {
        for (var _i10 = 0; _i10 < this._chiGangArray.length; ++_i10) for (var j; j < cardArr.length; ++j) if (this._chiGangArray[_i10] === cardArr[j]) {
          cc.log("--- 替换白皮: i, j, sameCard: ", _i10, j, cardArr[j]);
          break;
        }
      },
      setHu: function setHu(cardArr) {
        cc.log("--- 胡牌 cardArr: ", cardArr);
        this.shouPaiNode.removeAllChildren();
        var pos = void 0, chiGangPos = void 0;
        0 !== this.pengGangNode.children.length && this.pengGangNode.children[this.pengGangNode.children.length - 1].getPosition();
        switch (this._uipos) {
         case SeatEnum.xia:
          chiGangPos = chiGangPos || -40;
          pos = cc.p(chiGangPos + 60 * i + 20, 180);
          break;

         case SeatEnum.you:
          chiGangPos = chiGangPos || -40;
          pos = cc.p(chiGangPos - 34 * i, -360);
          break;

         case SeatEnum.shang:
          chiGangPos = chiGangPos || -120;
          pos = cc.p(chiGangPos - 34 * i, -360);
          break;

         case SeatEnum.zuo:
          chiGangPos = chiGangPos || -40;
          pos = cc.p(chiGangPos - 34 * i, -360);
        }
        cc.log("--- pos, chiGangPos: ", pos, chiGangPos);
        for (var _i11 = 0; _i11 < cardArr; ++_i11) {
          var c = cc.instantiate(this.huPaiPrefab);
          c.setPosition(pos);
          var pai = WhUtils.getCardById(cardArr[_i11]);
          c.getChildByName("content").getComponent(cc.Sprite).spriteFrame = this.getSpriteFrameByCard(pai);
          c.parent = this.shouPaiNode;
        }
      },
      xiaPaiAllDown: function xiaPaiAllDown() {
        for (var _i12 = 0; _i12 < this._paiArray.length; ++_i12) -180 !== this._paiArray[_i12].getPositionY() && this._paiArray[_i12].setPositionY(-180);
      },
      setEnableSend: function setEnableSend(flag) {
        this.enableSendN.active = !flag;
      },
      setScore: function setScore() {
        var score = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
        this.scoreLabel.string = score;
      },
      showReady: function showReady(flag) {
        this.readyNode.active = flag;
      },
      showNoCard: function showNoCard(flag) {
        this.noCardNode.active = flag;
      },
      showQuan: function showQuan(flag) {
        this.quanNode.active = flag;
      },
      setDirect: function setDirect(direct) {
        this.setDirectEnable();
        this.directNode.active = true;
        for (var _i13 = 0; _i13 < JiaWeiArr.length; ++_i13) this.directNode.getChildByName(JiaWeiArr[_i13]).active = false;
        this.directNode.getChildByName(JiaWeiArr[direct]).active = true;
      },
      setDirectEnable: function setDirectEnable() {
        this.directNode.active = false;
      },
      setEmoji: function setEmoji(emoji) {},
      setText: function setText(text) {},
      setVoice: function setVoice(voice) {},
      showOffLine: function showOffLine(flag) {
        this.offlineNode.active = flag;
      },
      setBuhuaText: function setBuhuaText(text) {
        this.buhuaLabel.string = "补花: " + text;
      },
      setXianVisible: function setXianVisible(flag) {
        this.node.getChildByName("xian").active = flag;
      },
      getSpriteFrameByCard: function getSpriteFrameByCard(card) {
        return this.node.parent.getComponent("gameMgrWahua").paiMianAltas.getSpriteFrame(card);
      }
    });
    cc._RF.pop();
  }, {
    whDefine: "whDefine",
    whUtils: "whUtils"
  } ],
  publicVoiceBtn: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "31d00IBvupILrUnOcyHW8in", "publicVoiceBtn");
    "use strict";
    var JSPhoneVoice = require("JSPhoneVoice");
    cc.Class({
      extends: cc.Component,
      properties: {
        voiceHintPre: {
          type: cc.Prefab,
          default: null
        },
        bgResN: cc.Node
      },
      onLoad: function onLoad() {
        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouchBegan, this);
        this.node.on(cc.Node.EventType.TOUCH_MOVE, this.onTouchMoved, this);
        this.node.on(cc.Node.EventType.TOUCH_END, this.onTouchEnded, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this.onTouchCancelled, this);
        this.mRect = this.node.getBoundingBox();
        var pos = cc.p(this.mRect.x, this.mRect.y);
        pos = this.node.parent.convertToWorldSpaceAR(pos);
        this.mRect.x = pos.x;
        this.mRect.y = pos.y;
        this.touching = false;
        this.userId = fun.db.getData("UserInfo").UserId;
        this.queueMgr = require("voiceQueueMgr").new();
        this.queueMgr.init();
        if (this.bgResN) {
          this.bgResN._showHide = function() {
            this.bgResN.color = new cc.Color(255, 255, 255);
          }.bind(this);
          this.bgResN._showNormal = function() {
            this.bgResN.color = new cc.Color(100, 100, 100);
          }.bind(this);
          this.bgResN._showNormal();
        }
      },
      onDestroy: function onDestroy() {
        this.queueMgr.close();
      },
      startRecord: function startRecord() {
        this._startTime = Date.now();
        this._voiceName = "voice" + this._startTime;
        require("Audio").pauseAll();
        JSPhoneVoice.startAudio(this._voiceName);
        this.queueMgr.startRecord();
      },
      stopRecord: function stopRecord() {
        this._endTime = Date.now();
        JSPhoneVoice.stopAudio();
        this.queueMgr.endRecord();
      },
      sendRecord: function sendRecord() {
        var len = this._endTime - this._startTime;
        if (len < 1e3) {
          fun.event.dispatch("MinSingleButtonPop", {
            contentStr: "录音时间过短,请重新录制!"
          });
          return;
        }
        var s = JSPhoneVoice.getVoiceDataByName(this._voiceName);
        s ? fun.net.pSend("Chat", {
          chatType: "voice",
          content: s,
          length: len,
          from: this.userId
        }) : fun.event.dispatch("MinSingleButtonPop", {
          contentStr: "录音失败!"
        });
      },
      onTouchBegan: function onTouchBegan(event) {
        if (!this.queueMgr.isCanRecord()) return;
        this.voiceHint = cc.instantiate(this.voiceHintPre);
        this.voiceHint.parent = cc.director.getScene().getChildByName("Canvas") || cc.director.getScene().getChildByName("DDZ_UIROOT") || cc.director.getScene().getChildByName("DDZ_Replay");
        this.voiceHintCtr = this.voiceHint.getComponent("voiceHint");
        this.voiceHintCtr.showMove();
        this.sumTime = 0;
        this.touching = true;
        this.startRecord();
      },
      onTouchMoved: function onTouchMoved(event) {
        if (!this.touching) return;
        var pos = event.getTouches()[0].getLocation();
        cc.rectContainsPoint(this.mRect, pos) ? this.voiceHintCtr.showMove() : this.voiceHintCtr.showPress();
      },
      onTouchEnded: function onTouchEnded(event) {
        if (!this.touching) return;
        this.touching = false;
        this.voiceHint.destroy();
        this.stopRecord();
        this.sendRecord();
      },
      onTouchCancelled: function onTouchCancelled(event) {
        this.touching = false;
        this.voiceHint.destroy();
        this.stopRecord();
      },
      checkHide: function checkHide(data) {
        if (!this.bgResN) return;
        if (!this.queueMgr) return;
        this.queueMgr.isCanRecord() && this.bgResN._showNormal();
        this.bgResN._showHide();
      },
      update: function update(dt) {
        this.checkHide();
        if (!this.queueMgr) return;
        this.queueMgr.update(dt);
        if (!this.touching) return;
        this.sumTime += dt;
        this.voiceHintCtr.setVoiceTime(this.sumTime) || this.onTouchEnded();
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio",
    JSPhoneVoice: "JSPhoneVoice",
    voiceQueueMgr: "voiceQueueMgr"
  } ],
  roomDescScvWahua: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c205cu37tZExayKmM2kygvj", "roomDescScvWahua");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        roomNumLabel: {
          type: cc.Label,
          default: null
        },
        modelNameLabel: {
          type: cc.Label,
          default: null
        },
        chagreLabel: {
          type: cc.Label,
          default: null
        },
        playerSumLabel: {
          type: cc.Label,
          default: null
        },
        playLabel: {
          type: cc.Label,
          default: null
        },
        modelLabel: {
          type: cc.Label,
          default: null
        },
        special: {
          type: cc.Label,
          default: null
        }
      },
      onLoad: function onLoad() {
        var roomInfo = fun.db.getData("RoomInfo");
        this.roomNumLabel.string = roomInfo.roomRule.RoomId;
        var num = roomInfo.roomRule.roomNum || roomInfo.roomRule.ring;
        this.setModelLabel(num, roomInfo.roomRule.makersType);
        this.setSpecialLabel(roomInfo.roomRule.needLocation);
        this.setPlayLabel(roomInfo.roomRule.patterns);
        this.setPlayerSumLabel(roomInfo.roomRule.playerNum);
        this.setChagerLabel(roomInfo.roomRule.reduceCard);
      },
      setModelLabel: function setModelLabel(num) {
        var makersType = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
        if (1 === makersType) {
          this.modelNameLabel.string = "圈数";
          this.modelLabel.string = num + "圈";
        } else {
          this.modelNameLabel.string = "局数";
          this.modelLabel.string = num + "局";
        }
      },
      setChagerLabel: function setChagerLabel(reduceCard) {
        switch (reduceCard) {
         case 1:
          this.chagreLabel.string = "房主支付";
          break;

         case 2:
          this.chagreLabel.string = "平均支付";
          break;

         case 3:
          this.chagreLabel.string = "冠军支付";
        }
      },
      setPlayerSumLabel: function setPlayerSumLabel() {
        var playerNum = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 4;
        this.playerSumLabel.string = playerNum + "人";
      },
      setPlayLabel: function setPlayLabel() {
        var patterns = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
        switch (patterns) {
         case 1:
          this.playLabel.string = "庄家翻倍";
          break;

         case 2:
          this.playLabel.string = "平措";
        }
      },
      setSpecialLabel: function setSpecialLabel(flag) {
        this.special.string = flag ? "玩家需开启定位才可加入游戏" : "玩家无需开启定位就可加入游戏";
      }
    });
    cc._RF.pop();
  }, {} ],
  roomGongGao: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "86755Zo2o9ItamHCYQqEBKk", "roomGongGao");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        mask: {
          type: cc.Node,
          default: null
        },
        content: {
          type: cc.Node,
          default: null
        },
        contentLabel: {
          type: cc.Label,
          default: null
        }
      },
      onLoad: function onLoad() {
        this.init();
      },
      init: function init() {
        this.minx = this.mask.x - this.mask.width / 2 - 50;
        this.startx = this.content.x;
        this.isPlaying = false;
        this.sumdt = 0;
        this.inited = true;
        this.currTime = Date.now();
        this.orignalPy = this.node.y;
        this.announceInfo = [];
        var data = fun.db.getData("AnnounceInfo") || [];
        data.forEach(function(value) {
          if (11 !== value.type) {
            value.nextShowTime = this.currTime;
            this.announceInfo.push(value);
          }
        }, this);
        fun.event.add("RoomGongGaoAnnounceInfo", "AnnounceInfo", this.onAnnounceInfoEvent.bind(this));
        0 === this.announceInfo.length && (this.node.y = 1e3 * this.orignalPy);
      },
      update: function update(dt) {
        this.inited || this.init();
        this.sumdt += dt;
        if (this.sumdt >= 1) {
          this.currTime += 1e3;
          this.sumdt -= 1;
        }
        if (this.isPlaying) {
          this.content.x -= 2;
          if (this.content.x + this.content.width <= this.minx) {
            for (var i = 0; i < this.announceInfo.length; i++) if (this.announceInfo[i].id === this.currid) {
              this.announceInfo[i].nextShowTime = 1e3 * this.announceInfo[i].range + this.currTime;
              break;
            }
            this.isPlaying = false;
          }
        } else {
          var find = false;
          for (var _i = 0; _i < this.announceInfo.length; _i++) if (this.announceInfo[_i].nextShowTime <= this.currTime) {
            find = true;
            this.isPlaying = true;
            this.currid = this.announceInfo[_i].id;
            this.content.x = this.startx;
            this.contentLabel.string = this.announceInfo[_i].content;
            break;
          }
          this.node.y = find ? this.orignalPy : 1e3 * this.orignalPy;
        }
      },
      onDestroy: function onDestroy() {
        fun.event.remove("RoomGongGaoAnnounceInfo");
      },
      onAnnounceInfoEvent: function onAnnounceInfoEvent(data) {
        var tmp = [];
        data.forEach(function(value) {
          if (11 !== value.type) {
            value.nextShowTime = this.currTime;
            tmp.push(value);
          }
        }, this);
        this.announceInfo.forEach(function(value) {
          tmp.forEach(function(v, k) {
            v.id === value.id && (tmp[k].nextShowTime = value.nextShowTime);
          });
        });
        this.announceInfo = tmp;
        0 === this.announceInfo.length ? this.node.y = 1e3 * this.orignalPy : this.node.y = this.orignalPy;
      }
    });
    cc._RF.pop();
  }, {} ],
  scMjCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ea14f21JpdFN7w+nAoquts+", "scMjCfg");
    "use strict";
    var sc_MessageCfg = {
      Zhuang: {
        id: "Zhuang",
        desc: "本局庄",
        req: 400,
        rsp: 500,
        notify: 600
      },
      LeaveRoom: {
        id: "LeaveRoom",
        desc: "离开房间",
        req: 401,
        rsp: 501,
        notify: 601
      },
      DisbandRoomVote: {
        id: "DisbandRoomVote",
        desc: "解散房间投票",
        req: 402,
        rsp: 502,
        notify: 602
      },
      DisbandRoomResult: {
        id: "DisbandRoomResult",
        desc: "解散房间投票结果",
        req: 403,
        rsp: 503,
        notify: 603
      },
      PaiJuInfo: {
        id: "PaiJuInfo",
        desc: "进入房间时下发的牌局信息",
        req: 404,
        rsp: 504,
        notify: 604
      },
      Ready: {
        id: "Ready",
        desc: "准备开局",
        req: 405,
        rsp: 505,
        notify: 605
      },
      FaPai: {
        id: "FaPai",
        desc: "新一局发牌",
        req: 406,
        rsp: 506,
        notify: 606
      },
      EhgTriCards: {
        id: "EhgTriCards",
        desc: "换三张",
        req: 407,
        rsp: 507,
        notify: 607
      },
      DingQue: {
        id: "DingQue",
        desc: "定缺",
        req: 408,
        rsp: 508,
        notify: 608
      },
      Mo: {
        id: "Mo",
        desc: "摸牌",
        req: 409,
        rsp: 509,
        notify: 609
      },
      Ops: {
        id: "Ops",
        desc: "玩家操作",
        req: 410,
        rsp: 510,
        notify: 610
      },
      Da: {
        id: "Da",
        desc: "玩家打牌",
        req: 411,
        rsp: 511,
        notify: 611
      },
      Hu: {
        id: "Hu",
        desc: "玩家胡牌",
        req: 412,
        rsp: 512,
        notify: 612
      },
      Gang: {
        id: "Gang",
        desc: "杠牌",
        req: 413,
        rsp: 513,
        notify: 613
      },
      Peng: {
        id: "Peng",
        desc: "碰牌",
        req: 414,
        rsp: 514,
        notify: 614
      },
      Pass: {
        id: "Pass",
        desc: "过牌",
        req: 415,
        rsp: 515,
        notify: 615
      },
      RoundAcc: {
        id: "RoundAcc",
        desc: "当局结算",
        req: 416,
        rsp: 516,
        notify: 616
      },
      RoomAcc: {
        id: "RoomAcc",
        desc: "总结算",
        req: 417,
        rsp: 517,
        notify: 617
      },
      PaiTime: {
        id: "PaiTime",
        desc: "牌局阶段",
        req: 418,
        rsp: 518,
        notify: 618
      }
    };
    module.exports = sc_MessageCfg;
    cc._RF.pop();
  }, {} ],
  scmjNetMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "12a0csaQuNApaNmLMkm09Yz", "scmjNetMgr");
    "use strict";
    var scmjNetMgr = function scmjNetMgr() {
      this.getNetCfg = function() {
        return require("scMjCfg");
      };
      this.addGameNet = function(key, gameMgr) {
        this.reqCB(key, "Ready", gameMgr.prepareNoticeMessage.bind(gameMgr));
        this.reqPCB(key, "EnterRoom", function(data) {
          gameMgr.onUserEnterRoom(data, data.RoomOrder);
        });
        this.reqCB(key, "LeaveRoom", gameMgr.exitRoomNoticeUserid.bind(gameMgr));
        this.reqCB(key, "DisbandRoomVote", gameMgr.onDisbandRoomVoteIn.bind(gameMgr));
        this.reqCB(key, "DisbandRoomResult", gameMgr.onDisbandRoomResultIn.bind(gameMgr));
        this.reqPCB(key, "OffLine", gameMgr.OffLineNotice.bind(gameMgr));
        this.reqPCB(key, "OnLine", gameMgr.OnLineNotice.bind(gameMgr));
        this.reqCB(key, "FaPai", function(data) {
          data.Tiles = data.Cards;
          data.TileCount = [];
          for (var i in gameMgr.playerList) data.TileCount[i] = 16;
          gameMgr.initStartPai(data);
        });
        this.reqCB(key, "Zhuang", gameMgr.zhuangNotify.bind(gameMgr));
        this.reqCB(key, "Mo", gameMgr.WLMoPaiNotice.bind(gameMgr));
        this.reqCB(key, "Da", function(data) {
          if (!(0 == data.Card)) {
            data.Atile = data.Card;
            gameMgr.ChuPaiNotice(data);
          }
        });
        this.reqCB(key, "Ops", function(data) {
          var optData = [];
          data.Ops.forEach(function(item) {
            var atile = 64 != item.Op && item.Combs ? item.Combs[0][0] : gameMgr.lastChuPaiID;
            optData.push({
              Op: toLocalOptType[item.Op],
              Comb: item.Combs,
              Atile: atile
            });
          });
          gameMgr.showEatUI(optData);
        });
        this.reqCB(key, "Peng", function(data) {
          cc.log("--this.reqCB(key, peng---", data);
          data.Atile = data.Card;
          data.Opts = Math.pow(2, toLocalOptType[32]);
          gameMgr.ChuPaiZuHeNotice(data);
        });
        this.reqCB(key, "Gang", function(data) {
          data.Atile = data.Card;
          data.Opts = Math.pow(2, toLocalOptType[data.Type]);
          gameMgr.ChuPaiZuHeNotice(data);
        });
        this.reqCB(key, "ShowPai", function(data) {
          setTimeout(function() {
            gameMgr.ShowPaiNotify(data);
          }, 1e3);
        });
        this.reqCB(key, "BuPai", function(data) {
          setTimeout(function() {
            gameMgr.BuPaiNotify(data);
          }, 1e3);
        });
        this.reqCB(key, "RoundAcc", gameMgr.ZhanJiNoticeWl.bind(gameMgr));
        this.reqCB(key, "RoomAcc", gameMgr.TotalZhanJiWl.bind(gameMgr));
        this.reqCB(key, "PaiTime", gameMgr.onPaiTimeChange.bind(gameMgr));
        this.reqCB(key, "PaiJuInfo", gameMgr.onReconnectDataWl.bind(gameMgr));
      };
      this.addChatNet = function(key, ChatUI) {};
      this.addReaNet = function(key, Reconnect) {};
      this.addRebNet = function(key, Reconnect) {};
      this.addMenuNet = function(key, menUI) {};
      this.gotoReady = function(data, handler) {
        var content = {};
        content.UserId = data.PlayerID;
        fun.net.send("Ready", {}, handler);
      };
      this.exitOutRoom = function(data, handler) {
        fun.net.send("LeaveRoom", data, handler);
      };
      this.dissolvedRoom = function(data, handler) {
        this.exitOutRoom({}, handler);
      };
      this.chuPai = function(data) {
        var content = {
          Card: data.Atile
        };
        fun.net.send("Da", content, function(rsp) {
          !rsp || 26 != rsp.RetCode && 30 != rsp.RetCode || fun.net.close();
        });
      };
      this.optPai = function(content, eatObj) {
        eatObj.dataIndex == toLocalOptType[32] && this.pengOpt(content);
        eatObj.dataIndex != toLocalOptType[1] && eatObj.dataIndex != toLocalOptType[2] || this.huOpt(content);
        eatObj.dataIndex == toLocalOptType[4] && this.gangOpt(content, 4);
        eatObj.dataIndex == toLocalOptType[8] && this.gangOpt(content, 8);
        eatObj.dataIndex == toLocalOptType[16] && this.gangOpt(content, 16);
      };
      this.passOpt = function() {
        fun.net.send("Pass", {});
      };
      this.pengOpt = function(data) {
        fun.net.send("Peng", {
          Card: data.Atile
        });
      };
      this.chiPaiOpt = function(chiData) {
        var content = {
          Comb: chiData.Data
        };
        fun.net.send("Chi", content);
      };
      this.huOpt = function(data) {
        fun.net.send("Hu", {
          Card: data.Atile
        });
      };
      this.gangOpt = function(data, gangType) {
        fun.net.send("Gang", {
          Type: gangType,
          Card: data.Atile
        });
      };
      this.VoteOutRoom = function(data, handler) {
        fun.net.send("DisbandRoomVote", data, handler);
      };
      this.disbandRoomVote = function(data, handler) {
        fun.net.send("DisbandRoomVote", data, handler);
      };
    };
    module.exports = {
      new: function _new() {
        return scmjNetMgr;
      }
    };
    cc._RF.pop();
  }, {
    scMjCfg: "scMjCfg"
  } ],
  set: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a0c0azaHLxCaqEHAvdGmYF5", "set");
    "use strict";
    var Audio = require("Audio");
    cc.Class({
      extends: cc.Component,
      properties: {
        dialectToggle: cc.Node
      },
      onLoad: function onLoad() {
        var bg = this.node.getChildByName("back");
        this.soundToggle = bg.getChildByName("soundToggle").getComponent(cc.Toggle);
        this.soundProgress = bg.getChildByName("soundProgress").getComponent(cc.ProgressBar);
        this.soundSlider = bg.getChildByName("soundSlider");
        0 === fun.gameCfg.soundValume ? this.soundToggle.isChecked = false : this.soundToggle.isChecked = true;
        var progressBar = JSON.parse(cc.sys.localStorage.getItem("progressBar"));
        var s = fun.gameCfg.soundValume;
        this._soundProgress = progressBar && progressBar.sound ? progressBar.sound : s;
        this.soundProgress.progress = this._soundProgress;
        this.soundSlider.getComponent(cc.Slider).progress = this._soundProgress;
        this.soundSlider.on("slide", this.onSoundSliderSlide, this);
        this.musicToggle = bg.getChildByName("musicToggle").getComponent(cc.Toggle);
        this.musicProgress = bg.getChildByName("musicProgress").getComponent(cc.ProgressBar);
        this.musicSlider = bg.getChildByName("musicSlider");
        0 === fun.gameCfg.musicValume ? this.musicToggle.isChecked = false : this.musicToggle.isChecked = true;
        var m = fun.gameCfg.musicValume;
        this._musicProgress = progressBar && progressBar.music ? progressBar.music : m;
        this.musicProgress.progress = this._musicProgress;
        this.musicSlider.getComponent(cc.Slider).progress = this._musicProgress;
        this.musicSlider.on("slide", this.onMusicSliderSlide, this);
        var languageBox = bg.getChildByName("languageBox");
        this.mandarinToggle = languageBox.getChildByName("toggle1").getComponent(cc.Toggle);
        this.localismToggle = languageBox.getChildByName("toggle2").getComponent(cc.Toggle);
        if (parseInt(fun.gameCfg.voiceLanguage) === gameConst.voiceLanguage.mandarin) {
          this.mandarinToggle.isChecked = true;
          this.localismToggle.isChecked = false;
        } else {
          this.mandarinToggle.isChecked = false;
          this.localismToggle.isChecked = true;
        }
        bg.getChildByName("btnClose").on("click", this.onBtnCloseClick, this);
        this.writeOffBtn = bg.getChildByName("writeOffBtn");
        this.writeOffBtn.on("click", this.onWriteOffBtnClick, this);
        this.animation = this.node.getComponent(cc.Animation);
        this.clips = this.animation.getClips();
      },
      onEnable: function onEnable() {
        this.animation.play(this.clips[0].name);
      },
      onSoundSliderSlide: function onSoundSliderSlide(event) {
        this.soundProgress.progress = event.detail.progress;
        fun.gameCfg.soundValume = event.detail.progress;
        this._soundProgress = fun.gameCfg.soundValume;
        Audio.setEffectVolume(this._soundProgress);
        0 === this._soundProgress ? this.soundToggle.isChecked = false : this.soundToggle.isChecked = true;
      },
      onMusicSliderSlide: function onMusicSliderSlide(event) {
        this.musicProgress.progress = event.detail.progress;
        fun.gameCfg.musicValume = event.detail.progress;
        this._musicProgress = fun.gameCfg.musicValume;
        Audio.setMusicVolume(this._musicProgress);
        0 === this._musicProgress ? this.musicToggle.isChecked = false : this.musicToggle.isChecked = true;
      },
      onSoundToggleClicked: function onSoundToggleClicked() {
        this._soundVolum = this.soundToggle.isChecked ? this._soundProgress : 0;
        fun.gameCfg.soundValume = this._soundVolum;
        Audio.setEffectVolume(this._soundVolum);
      },
      onMusicToggleClicked: function onMusicToggleClicked() {
        this._musicVolum = this.musicToggle.isChecked ? this._musicProgress : 0;
        fun.gameCfg.musicValume = this._musicVolum;
        Audio.setMusicVolume(this._musicVolum);
      },
      setGameType: function setGameType(gameType) {
        if ("pork" === gameType) {
          this.dialectToggle.getComponent(cc.Toggle).interactable = false;
          this.dialectToggle.getChildByName("back").active = true;
        } else {
          this.dialectToggle.interactable = true;
          this.dialectToggle.getChildByName("back").active = false;
        }
      },
      onWriteOffBtnClick: function onWriteOffBtnClick() {
        Audio.playEffect("hall", "button_nomal.mp3");
        cc.sys.localStorage.removeItem("Token");
        fun.utils.restart();
      },
      onBtnCloseClick: function onBtnCloseClick() {
        Audio.playEffect("hall", "button_close.mp3");
        var s = this._soundVolum, m = this._musicVolum;
        fun.gameCfg.musicValume = m && m > 0 ? m : 0 === m ? 0 : fun.gameCfg.musicValume;
        fun.gameCfg.soundValume = s && s > 0 ? s : 0 === s ? 0 : fun.gameCfg.soundValume;
        var valumeData = JSON.stringify({
          sound: fun.gameCfg.soundValume,
          music: fun.gameCfg.musicValume
        });
        cc.sys.localStorage.setItem("valumeData", valumeData);
        fun.gameCfg.voiceLanguage = this.mandarinToggle.isChecked ? gameConst.voiceLanguage.mandarin : gameConst.voiceLanguage.huangYan;
        cc.sys.localStorage.setItem("voiceLanguage", fun.gameCfg.voiceLanguage);
        var progressBar = JSON.stringify({
          sound: this._soundProgress,
          music: this._musicProgress
        });
        cc.sys.localStorage.setItem("progressBar", progressBar);
        this.animation.play(this.clips[1].name).once("finished", function() {
          this.node.destroy();
        }, this);
      },
      hideWriteOffBtn: function hideWriteOffBtn() {
        this.writeOffBtn.active = false;
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio"
  } ],
  shareCardItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "97df7E+L5lGmJoOmwtmFB7E", "shareCardItem");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        cardNumberL: cc.Label,
        contentL: cc.Label,
        cardImg: cc.Node
      },
      onLoad: function onLoad() {
        this.node.getChildByName("btnFx").on("click", function() {
          this._data.isJiLu ? fun.event.dispatch("shareCardItemAgain", this._data) : fun.event.dispatch("shareCardItemNumber", this._data);
        }.bind(this));
      },
      setData: function setData(data) {
        this.cardNumberL.string = "x" + data.Cnt;
        var t = new Date(1e3 * (data.ExpiredAt || data.ExpireAt));
        var date = t.getFullYear() + "年" + (t.getMonth() + 1) + "月" + t.getDate() + "日" + t.getHours() + "时" + t.getMinutes() + "分";
        this.contentL.string = "将在" + date + "过期";
        this.cardImg.getChildByName("ka" + data.GameType).active = true;
        data.date = date;
        this._data = data;
      }
    });
    cc._RF.pop();
  }, {} ],
  store: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "117a1zOe0VHcbZu3nahm0A/", "store");
    "use strict";
    var Audio = require("Audio");
    var ApplePayResult = cc.Enum({
      OTHER: 0,
      SUCCESS: 1,
      FAILED: 2,
      PRODUCT_NOT_EXIST: 3,
      SUCCESSED: 4
    });
    cc.Class({
      extends: cc.Component,
      properties: {
        titleLabel: {
          type: cc.Label,
          default: null
        }
      },
      onLoad: function onLoad() {
        this.animation = this.node.getComponent(cc.Animation);
        this.clips = this.animation.getClips();
        this._isApple = cc.sys.os === cc.sys.OS_IOS;
        this.setGameType(gameConst.gameType.maJiangHuangYan);
        fun.event.add("Store_PayResult", "PhonePayResult", this.onPhonePayResultAck.bind(this));
      },
      start: function start() {
        fun.csv.turnCsvToJson("csv/shop.csv", function(csvJson) {
          var data = new Array();
          for (var i = 0; i < fun.utils.getLength(csvJson); ++i) this._gameType === parseInt(csvJson[i + 1].INT_Game) && (data[data.length] = csvJson[i + 1]);
          this._csvJson = data;
          this.initShopList();
        }.bind(this));
      },
      onDestroy: function onDestroy() {
        fun.event.remove("Store_PayResult");
      },
      setGameType: function setGameType(gameType) {
        this._gameType = gameType;
        this.titleLabel.string = gameConst.gameTypeZhNameMap[this._gameType];
      },
      initShopList: function initShopList() {
        var bg = this.node.getChildByName("back");
        var shopList = bg.getChildByName("shopList");
        for (var i = 0; i < shopList.childrenCount; i++) {
          var box = shopList.getChildByName("box" + (i + 1));
          var price = void 0, roomCard = box.getChildByName("num").getComponent(cc.Label);
          var songKa = box.getChildByName("label"), songKaBg = box.getChildByName("bg");
          price = "￥" + this._csvJson[i].INT_Price / 100;
          roomCard.string = this._csvJson[i].INT_OpValue + "z";
          if (this._csvJson[i].INT_GiveValue && parseInt(this._csvJson[i].INT_GiveValue)) songKa.getChildByName("num1").getComponent(cc.Label).string = this._csvJson[i].INT_GiveValue; else {
            songKa.active = false;
            songKaBg.active = false;
          }
          var btnShop = box.getChildByName("btnShop");
          btnShop.getChildByName("label").getComponent(cc.Label).string = price;
          btnShop.on("click", this.onBtnShopClick.bind(this, i));
        }
        bg.getChildByName("btnClose").on("click", this.onBtnCloseClick, this);
      },
      onBtnShopClick: function onBtnShopClick(num) {
        Audio.playEffect("hall", "button_nomal.mp3");
        if (!cc.sys.isNative) return;
        fun.event.dispatch("Zhuanquan", {
          flag: true,
          text: "支付中，请稍后..."
        });
        this._roomCardNum = num;
        this._isApple ? require("JSPhoneDevice").ApplePay(this._csvJson[num].STR_ID) : fun.net.pSend("WxPay", {
          GameType: this._gameType,
          Product: this._csvJson[num].INT_Index
        }, function(data) {
          if (data.RetCode && 0 !== data.RetCode) return;
          require("JSPhoneWeChat").WxPay(data);
        }.bind(this));
      },
      onPhonePayResultAck: function onPhonePayResultAck(msg) {
        fun.event.dispatch("Zhuanquan", {
          flag: false
        });
        "apple" === msg.from ? 3 === parseInt(msg.result) && fun.net.pSend("ApPay", {
          ReceiptStr: msg.receipt
        }, function(data) {
          if (data.RetCode && 0 !== data.RetCode) setTimeout(function() {
            this.onPhonePayResultAck(msg);
          }.bind(this), 2e3); else if (data.Status && data.Status === ApplePayResult.SUCCESS) {
            cc.sys.localStorage.setItem("applePayReceiptStr", JSON.stringify({
              check: false
            }));
            fun.event.dispatch("HuangYanAddRoomCard", this._csvJson[this._roomCardNum].INT_OpValue);
          } else setTimeout(function() {
            this.onPhonePayResultAck(msg);
          }.bind(this), 2e3);
        }.bind(this)) : "wechat" === msg.from && msg.result && "false" !== msg.result && fun.event.dispatch("HuangYanAddRoomCard", this._csvJson[this._roomCardNum].INT_OpValue);
      },
      onEnable: function onEnable() {
        this.animation.play(this.clips[0].name);
      },
      onBtnCloseClick: function onBtnCloseClick() {
        Audio.playEffect("hall", "button_close.mp3");
        this.animation.play(this.clips[1].name).once("finished", function() {
          this.node.destroy();
        }, this);
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio",
    JSPhoneDevice: "JSPhoneDevice",
    JSPhoneWeChat: "JSPhoneWeChat"
  } ],
  updatePanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c4b36CCoAZERrOiDmL1h3IA", "updatePanel");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        progressNode: {
          type: cc.Node,
          default: null
        },
        btnUpdate: {
          type: cc.Node,
          default: null
        },
        gressNode: {
          type: cc.Node,
          default: null
        },
        content: {
          type: cc.Label,
          default: null
        },
        tipsNode: {
          type: cc.Node,
          default: null
        },
        sizeNode: {
          type: cc.Node,
          default: null
        },
        checkingUpdate: {
          type: cc.Node,
          default: null
        }
      },
      onLoad: function onLoad() {
        this.gressLabel = this.gressNode.getComponent(cc.Label);
        this.progressBar = this.progressNode.getComponent(cc.ProgressBar);
        this.animation = this.node.getComponent(cc.Animation);
        this.clips = this.animation.getClips();
      },
      onEnable: function onEnable() {
        this.animation.play(this.clips[0].name);
      },
      onDisable: function onDisable() {
        this.animation.play(this.clips[1].name);
      },
      setVersionContent: function setVersionContent(data, updateCb) {
        this.content.string = data[0].replace(/\\n/g, "\n");
        this.updateCb = updateCb;
        this.btnUpdate.active = true;
        this.btnUpdate.once("click", this.onBtnUpdateClick, this);
        this.checkingUpdate.active = false;
      },
      setSourceSize: function setSourceSize(size) {
        this.tipsNode.active = false;
        this.gressNode.active = true;
        this.sizeNode.active = true;
        var sizeStr = size.toFixed(2);
        var cont = this.sizeNode.getChildByName("content");
        cont.getComponent(cc.Label).string = sizeStr;
        this.sizeNode.getChildByName("end").setPositionX(cont.getPositionX() + cont.getContentSize().width + 5);
      },
      onBtnUpdateClick: function onBtnUpdateClick() {
        require("Audio").playEffect("hall", "button_nomal.mp3");
        this.updateCb && this.updateCb();
        this.tipsNode.active = true;
        this.progressNode.active = true;
        this.btnUpdate.active = false;
      },
      updateProgress: function updateProgress() {
        var percent = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
        this.progressBar.progress = percent;
        var percentStr = (100 * percent).toFixed(2) + "%";
        "NaN%" === percentStr && (percentStr = "0%");
        this.gressLabel.string = percentStr;
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio"
  } ],
  voiceHint: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "14dbfPHo1hG5KZXrOuACCs1", "voiceHint");
    "use strict";
    var maxVoiceTime = 30;
    cc.Class({
      extends: cc.Component,
      properties: {
        pressText: {
          default: "松开手指，取消发送"
        },
        moveText: {
          default: "手指上划, 取消发送"
        },
        progressSprite: {
          type: cc.Sprite,
          default: null
        },
        cancelLabel: {
          type: cc.Label,
          default: null
        }
      },
      setVoiceTime: function setVoiceTime(time) {
        if (time > maxVoiceTime) return false;
        var subTime = Math.floor(maxVoiceTime - time);
        subTime < 0 && (subTime = 0);
        this.progressSprite.fillRange = -time / maxVoiceTime;
        return true;
      },
      showPress: function showPress() {
        this.cancelLabel.string = this.pressText;
      },
      showMove: function showMove() {
        this.cancelLabel.string = this.moveText;
      }
    });
    cc._RF.pop();
  }, {} ],
  voiceQueueMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "452d3quYwZGZZry6b5WqHmA", "voiceQueueMgr");
    "use strict";
    var QueueMgr = function QueueMgr() {
      this.voiceList = [];
      this.playVoiceTime = -1;
      this.isRecord = false;
      this.init = function(voiceBtn) {
        fun.event.add("publicVoice", "RoomChat", this.playerVoiceChat.bind(this));
      };
      this.close = function() {
        fun.event.remove("publicVoice", "RoomChat", this.playerVoiceChat.bind(this));
      };
      this.update = function(dt) {
        if (-1 != this.playVoiceTime) {
          this.playVoiceTime -= dt;
          if (this.playVoiceTime < 0) {
            this.playVoiceTime = -1;
            this.nextVoice();
          }
        }
      };
      this.playerVoiceChat = function(data) {
        if ("voice" != data.chatType) return;
        if (!cc.sys.isNative) return;
        this.voiceList.push(data);
        this.nextVoice();
      };
      this.nextVoice = function() {
        if (this.voiceList.length < 1) {
          this.voiceEnd();
          return;
        }
        if (-1 != this.playVoiceTime) return;
        if (this.isRecord) return;
        var voiceData = this.voiceList.shift();
        voiceData.length = voiceData.length / 1e3;
        this.playVoiceTime = voiceData.length;
        fun.event.dispatch("RoomChatVoice", voiceData);
        var PhoneVoice = require("JSPhoneVoice");
        require("Audio").pauseAll();
        PhoneVoice.playAudio(voiceData.content);
      };
      this.voiceEnd = function() {
        require("Audio").resumeAll();
      };
      this.startRecord = function() {
        this.isRecord = true;
      };
      this.endRecord = function() {
        this.isRecord = false;
        this.nextVoice();
      };
      this.isCanRecord = function() {
        return -1 == this.playVoiceTime;
      };
    };
    module.exports = {
      new: function _new() {
        return new QueueMgr();
      }
    };
    cc._RF.pop();
  }, {
    Audio: "Audio",
    JSPhoneVoice: "JSPhoneVoice"
  } ],
  whDefine: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b6612eoaslI0Jq0DiquNVjW", "whDefine");
    "use strict";
    var whDefine = {};
    whDefine.AllCardsNumber = 136;
    whDefine.InitCardsNumber = 20;
    whDefine.SendCardNumber = 30;
    whDefine.PlayCardHeight = -80;
    whDefine.DoubleClickTime = .2;
    whDefine.ErrorCode = {
      "10000": "成功Successful",
      "10001": "房卡不够",
      "10002": "用户为空",
      "10003": "房间ID为空",
      "10004": "房间信息异常",
      "10005": "连接GW失败",
      "10006": "用户在其他房间",
      "10007": "房间人数已满",
      "10008": "用户已经准备了",
      "10009": "房间roomPhase 错误",
      "10010": "庄家不为空",
      "10011": "已经摇过张",
      "10012": "手牌为空",
      "10013": "已经出过牌了",
      "10014": "牌没了",
      "10015": "信息为空",
      "10016": "房间禁止加入",
      "10017": "房间号错误",
      "10018": "庄参数错误",
      "10019": "已经操作过了",
      "10020": "分小了",
      "10021": "分错误",
      "10022": "操作失败",
      "10023": "人数超出",
      "10024": "定位出错",
      "10025": "出错SysError"
    };
    module.exports = whDefine;
    cc._RF.pop();
  }, {} ],
  whMenu: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "33f57xoP4RJDq34N2qjmS1e", "whMenu");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        btnMenu: {
          type: cc.Node,
          default: null
        },
        menuPrefab: {
          type: cc.Prefab,
          default: null
        },
        setPrefab: {
          type: cc.Prefab,
          default: null
        },
        skinPrefab: {
          type: cc.Prefab,
          default: null
        }
      },
      onLoad: function onLoad() {
        this.menu = cc.instantiate(this.menuPrefab);
        this.menu.parent = this.node.parent;
        this.menu.active = false;
        this.btnMenu.on("click", this.onBtnMenuClick, this);
        this.node.parent.getChildByName("bg").on("click", this.onMenuActive, this);
        this.menu.getChildByName("btn_a").on("click", this.onBtnSettingClick, this);
        this.menu.getChildByName("btn_b").on("click", this.onBtnSkinClick, this);
        this.menu.getChildByName("btn_c").on("click", this.onBtnQuitClick, this);
        this.menu.getChildByName("btn_f").on("click", this.onMenuActive, this);
        this.menu.getChildByName("btn_2d").on("click", this.onBtnTwoDClick, this);
        this.menu.getChildByName("btn_3d").on("click", this.onBtnThreeClick, this);
        this.menu.on("click", this.onMenuActive, this);
      },
      onBtnSettingClick: function onBtnSettingClick() {
        var set = cc.instantiate(this.setPrefab);
        set.parent = this.node.parent;
        this.onMenuActive();
      },
      onBtnSkinClick: function onBtnSkinClick() {
        var skin = cc.instantiate(this.skinPrefab);
        skin.parent = this.node.parent;
        this.onMenuActive();
      },
      onBtnQuitClick: function onBtnQuitClick() {
        fun.event.dispatch("wahuaQuitFromSetting");
        this.onMenuActive();
      },
      onBtnTwoDClick: function onBtnTwoDClick() {
        cc.log("--- onBtnTwoDClick ---");
        this.onMenuActive();
      },
      onBtnThreeClick: function onBtnThreeClick() {
        cc.log("--- onBtnThreeClick ---");
        this.onMenuActive();
      },
      onBtnMenuClick: function onBtnMenuClick() {
        this.menu.active = !this.menu.active;
      },
      onMenuActive: function onMenuActive() {
        this.menu.active = false;
      }
    });
    cc._RF.pop();
  }, {} ],
  whPaiTouch: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "83efc6XOJ1CL6wc+Vv0IrBh", "whPaiTouch");
    "use strict";
    var WhDefine = require("whDefine");
    var WhUtils = require("whUtils");
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {
        this.originalPos = this.node.getPosition();
        this.touchOn();
      },
      onDestroy: function onDestroy() {
        this.touchOff();
      },
      touchOn: function touchOn() {
        this.node.on("click", this.onPaiClick, this);
        this.node.on("touchmove", this.moveTouchFunc, this);
        this.node.on("touchend", this.endCancelTouchFunc, this);
        this.node.on("touchcancel", this.endCancelTouchFunc, this);
      },
      touchOff: function touchOff() {
        this.node.off("click", this.onPaiClick, this);
        this.node.off("touchmove", this.moveTouchFunc, this);
        this.node.off("touchend", this.endCancelTouchFunc, this);
        this.node.off("touchcancel", this.endCancelTouchFunc, this);
      },
      setCardNumber: function setCardNumber(card) {
        this.cardInfo = {
          cardNumber: card,
          xiaCP: true
        };
      },
      checkDoubleClick: function checkDoubleClick() {
        var nowTime = new Date().getTime();
        if (this._clickTime) {
          if (nowTime - this._clickTime < 1e3 * WhDefine.DoubleClickTime) {
            this._clickTime = nowTime;
            return true;
          }
          this._clickTime = nowTime;
          return false;
        }
        this._clickTime = nowTime;
        return false;
      },
      onPaiClick: function onPaiClick() {
        if (this.checkDoubleClick()) {
          this.node.parent.parent.parent.getComponent("playerUiWahua").chuPai(this.cardInfo, true);
          this.node.active = false;
        }
      },
      moveTouchFunc: function moveTouchFunc(event) {
        this._isMove = true;
        this.node.parent.parent.parent.getComponent("playerUiWahua").setXianVisible(true);
        cc.sys.isNative ? this.node.setPosition(event.touch.getDelta()) : this.node.setPosition(cc.p(event.getLocation().x - 120, event.getLocation().y - 220));
      },
      endCancelTouchFunc: function endCancelTouchFunc(event) {
        this.node.parent.parent.parent.getComponent("playerUiWahua").setXianVisible(false);
        if (this.node.getPositionY() < WhDefine.PlayCardHeight) this.node.setPosition(this.originalPos); else {
          this.node.parent.parent.parent.getComponent("playerUiWahua").chuPai(this.cardInfo, true);
          this.node.active = false;
        }
      }
    });
    cc._RF.pop();
  }, {
    whDefine: "whDefine",
    whUtils: "whUtils"
  } ],
  whSkin: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4d0abWLkmRBPINNdoQJVrZY", "whSkin");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        back: {
          type: cc.Node,
          default: null
        }
      },
      onLoad: function onLoad() {
        this.back.getChildByName("btnQuit").on("click", this.onBtnQuitClick, this);
      },
      onBtnQuitClick: function onBtnQuitClick() {
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {} ],
  whUtils: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "23e80XdYA9Ip6EH9GaF/m9B", "whUtils");
    "use strict";
    var HuaPai = [ "spring", "summer", "autumn", "winter", "mei", "lang", "zhu", "ju", "bai", "bai" ];
    var PaiId = [ "1_1", "1_2", "1_3", "1_4", "1_5", "1_6", "2_2", "2_3", "2_4", "2_5", "2_6", "3_3", "3_4", "3_5", "3_6", "4_4", "4_5", "4_6", "5_5", "5_6", "6_6" ];
    var whUtils = {
      getSameValueByArray: function getSameValueByArray(arr) {
        var list = [], indexArr = [];
        for (var i = 0; i < arr.length; ++i) {
          var hasRead = false;
          for (var k = 0; k < list.length; ++k) i === list[k] && (hasRead = true);
          if (!hasRead) {
            var _index = [], haveSame = false;
            _index[0] = i;
            for (var j = i + 1; j < arr.length; ++j) if (arr[i] == arr[j]) {
              list.push(j);
              _index[_index.length] = j;
              haveSame = true;
            }
            haveSame && (indexArr[indexArr.length] = _index);
          }
        }
        return indexArr;
      },
      getCardIndex: function getCardIndex(card) {
        var idx = card;
        var func = function func(id) {
          return id > 21 ? id - 21 : id;
        };
        if (idx < 127) do {
          idx = func(idx);
        } while (idx > 21);
        return idx;
      },
      setSortByCards: function setSortByCards(cards) {
        var cardsSort = {};
        var indexArr = new Array();
        for (var i = 0; i < cards.length; ++i) indexArr[i] = this.getCardIndex(cards[i]);
        var sameIdxArr = this.getSameValueByArray(indexArr);
        var sortPaiFunc = function sortPaiFunc(arr) {
          return arr.sort(function(a, b) {
            var ca = cards[a], cb = cards[b];
            if (ca < 127 && cb < 127) return ca > 63 && ca < 85 && cb > 84 || cb > 63 && cb < 85 && ca > 84 ? ca - cb : cb - ca;
          });
        };
        var songCardArray = [];
        for (var _i = 0; _i < sameIdxArr.length; ++_i) {
          sameIdxArr[_i] = sortPaiFunc(sameIdxArr[_i]);
          if (sameIdxArr[_i].length > 2) {
            var gang = true, bpCount = 0;
            for (var j = 0; j < sameIdxArr[_i].length; ++j) cards[sameIdxArr[_i][j]] < 64 && bpCount++;
            switch (sameIdxArr[_i].length) {
             case 3:
              bpCount >= 1 && (gang = false);
              break;

             case 4:
              bpCount >= 2 && (gang = false);
              break;

             case 5:
              bpCount >= 3 && (gang = false);
            }
            if (gang) {
              if (sameIdxArr[_i].length > 3) for (var s = 3; s < sameIdxArr[_i].length; s++) songCardArray[songCardArray.length] = cards[sameIdxArr[_i][s]];
              sameIdxArr[_i] = [ sameIdxArr[_i][0], sameIdxArr[_i][1], sameIdxArr[_i][2] ];
            } else {
              if (sameIdxArr[_i].length > 2) for (var _s = 2; _s < sameIdxArr[_i].length; _s++) songCardArray[songCardArray.length] = cards[sameIdxArr[_i][_s]];
              sameIdxArr[_i] = [ sameIdxArr[_i][0], sameIdxArr[_i][1] ];
            }
          }
        }
        var newCardArr = [], newIndexArr = [], newSameIdxArr = [];
        var singleCardArr = [], singleIndexArr = [], singleSameIdxArr = [];
        for (var _i2 = 0; _i2 < sameIdxArr.length; ++_i2) for (var _j = 0; _j < sameIdxArr[_i2].length; ++_j) {
          var idx = sameIdxArr[_i2][_j];
          newCardArr[newCardArr.length] = cards[idx];
          newIndexArr[newIndexArr.length] = indexArr[idx];
          newSameIdxArr[newSameIdxArr.length] = idx;
        }
        for (var _i3 = 0; _i3 < cards.length; ++_i3) {
          var same = false;
          for (var _j2 = 0; _j2 < newSameIdxArr.length; ++_j2) _i3 === newSameIdxArr[_j2] && (same = true);
          same || (singleSameIdxArr[singleSameIdxArr.length] = _i3);
        }
        singleSameIdxArr.sort(function(a, b) {
          return cards[a] - cards[b];
        });
        singleSameIdxArr = sortPaiFunc(singleSameIdxArr);
        for (var _i4 = 0; _i4 < singleSameIdxArr.length; ++_i4) if (cards[singleSameIdxArr[_i4]]) {
          singleCardArr[singleCardArr.length] = cards[singleSameIdxArr[_i4]];
          singleIndexArr[singleIndexArr.length] = indexArr[singleSameIdxArr[_i4]];
        }
        newCardArr.push.apply(newCardArr, singleCardArr);
        newIndexArr.push.apply(newIndexArr, singleIndexArr);
        var enableNum = newSameIdxArr.length;
        for (var _i5 = 0; _i5 < newCardArr.length; ++_i5) if (_i5 >= newSameIdxArr.length && newCardArr[_i5] < 64) {
          enableNum = _i5;
          break;
        }
        cardsSort.cardArr = newCardArr;
        cardsSort.indexArr = newIndexArr;
        cardsSort.enableNumber = enableNum;
        cardsSort.songCardArr = songCardArray;
        fun.event.dispatch("whUpdatedCards", cardsSort);
        return cardsSort;
      },
      getCardById: function getCardById(id) {
        var a = 0, bc = "1_1", newId = 1;
        if (id < 127) {
          if (id < 64) {
            a = 0;
            newId = id > 21 ? id > 42 ? id - 42 : id - 21 : id;
          } else if (id >= 64 && id < 85) {
            a = 2;
            newId = id - 63;
          } else {
            a = 1;
            newId = id > 105 ? id - 105 : id - 84;
          }
          bc = PaiId[newId - 1];
          var name = "card_" + a + "_" + bc;
          return name;
        }
        var _name = "card_" + HuaPai[id - 126 - 1];
        return _name;
      },
      checkCardEnable: function checkCardEnable(card, cardsAll) {
        var cards = cardsAll.cardArr;
        var singleIdx = void 0, cardIdx = this.getCardIndex(card);
        for (var i = 0; i < cards.length; i += 2) if (this.getCardIndex(cards[i]) !== this.getCardIndex(cards[i + 1])) {
          if (cards[i - 1] && this.getCardIndex(cards[i]) !== this.getCardIndex(cards[i - 1])) {
            singleIdx = i;
            break;
          }
          i++;
        }
        if (card > 63) {
          var isBaiPi = false;
          for (var _i6 = singleIdx; _i6 < cards.length; ++_i6) cards[_i6] < 64 && (isBaiPi = true);
          for (var _i7 = 0; _i7 < singleIdx; ++_i7) if (cardIdx === this.getCardIndex(cards[_i7]) && card !== cards[_i7]) {
            cc.log("--- 1.摸牌是框牌 且 对子里有 ---");
            if (cards[_i7 + 1] < 64) return {
              song: cards[_i7 + 1]
            };
            return true;
          }
          if (isBaiPi) {
            for (var _i8 = singleIdx; _i8 < cards.length; ++_i8) if (cardIdx === this.getCardIndex(cards[_i8]) && card !== cards[_i8]) {
              cc.log("--- 2.摸牌是框牌 且 对子里没有 且 单牌里有 ---");
              return cards[_i8];
            }
            cc.log("--- 3.摸牌是框牌 且 对子里没有 且 单牌里没有 ---");
            return true;
          }
          for (var _i9 = singleIdx; _i9 < cards.length; ++_i9) if (cardIdx === this.getCardIndex(cards[_i9]) && card !== cards[_i9]) {
            cc.log("--- 4.摸牌是框牌 且 对子里没有 且 单牌里有 ---");
            return cards[_i9];
          }
          cc.log("--- 5.摸牌是框牌 且 对子里没有 且 单牌里没有 且 没有白皮 ---");
          return false;
        }
        for (var _i10 = 0; _i10 < singleIdx; ++_i10) if (cardIdx === this.getCardIndex(cards[_i10])) {
          cc.log("--- 6.摸牌是白皮 且 对子里有 ---");
          return {
            song: true
          };
        }
        for (var _i11 = singleIdx; _i11 < cards.length; ++_i11) if (cardIdx === this.getCardIndex(cards[_i11]) && card !== cards[_i11]) {
          cc.log("--- 7.摸牌是白皮 且 对子里没有 且 单牌里有 ---");
          return cards[_i11];
        }
        cc.log("--- 8.摸牌是白皮 且 对子里没有 且 单牌里没有 ---");
        return false;
      },
      getSaiziPointByCard: function getSaiziPointByCard(card) {
        return {
          p1: card.substr(7, 1),
          p2: card.substr(9, 1)
        };
      },
      getMinMaxByArray: function getMinMaxByArray(type, arr) {
        return "min" === type ? Math.min.apply(Math, arr) : Math.max.apply(Math, arr);
      },
      getArrayByDouble: function getArrayByDouble(arr1, arr2) {
        return arr1.push.apply(arr1, arr2);
      },
      getNodePos: function getNodePos(curNode, targetNode) {
        var worldPos = curNode.parent.convertToWorldSpaceAR(curNode.position);
        var pos = targetNode.convertToNodeSpaceAR(worldPos);
        return pos;
      },
      setPaiEnable: function setPaiEnable(paiNode, isTouch, isVisable) {
        paiNode.getChildByName("touchOff").active = !isTouch;
        var rgb = isVisable ? {
          r: 255,
          g: 255,
          b: 255,
          a: 255
        } : {
          r: 187,
          g: 187,
          b: 187,
          a: 255
        };
        paiNode.color = new cc.Color(rgb);
      }
    };
    module.exports = whUtils;
    cc._RF.pop();
  }, {} ],
  whVotingPop: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f2a4eaPwl9IipZ02KExPTvE", "whVotingPop");
    "use strict";
    var DisbandState = cc.Enum({
      applicant: 0,
      agree: 1,
      disagree: 2,
      wait: 3
    });
    cc.Class({
      extends: cc.Component,
      properties: {
        back: {
          type: cc.Node,
          default: null
        },
        playerList: {
          type: cc.Node,
          default: null
        },
        applicantTabel: {
          type: cc.RichText,
          default: null
        },
        TimeLabel: {
          type: cc.Label,
          default: null
        },
        btnDisagree: {
          type: cc.Node,
          default: null
        },
        btnAgree: {
          type: cc.Node,
          default: null
        }
      },
      onLoad: function onLoad() {
        var children = this.playerList.children;
        for (var i = 0; i < children.length; ++i) children[i].active = false;
        this.MineUserId = fun.db.getData("UserInfo").UserId.toString();
        this.setBtnAgreeActive(false);
        this.back.getChildByName("btnAgree").on("click", this.onBtnAgreeClick, this);
        this.back.getChildByName("btnDisagree").on("click", this.onBtnDisagreeClick, this);
      },
      update: function update(dt) {
        if (this._isUpdate) {
          var time = parseInt(this.TimeLabel.string);
          if (time <= 0) {
            this._isUpdate = false;
            this.node.active = false;
          } else {
            this.dtTime = (this.dtTime || 0) + dt;
            if (this.dtTime >= 1) {
              this.dtTime -= 1;
              var newTime = time - 1;
              this.TimeLabel.string = newTime <= 0 ? 0 : newTime;
            }
          }
        }
      },
      setData: function setData(data) {
        var count = -1;
        data.timeBreak && (this.TimeLabel.string = data.timeBreak);
        this._isUpdate = true;
        var applyStatu = data.applyStatu;
        for (var id in applyStatu) {
          count++;
          var p = this.playerList.getChildByName("player_" + count);
          p.active = true;
          fun.utils.loadUrlRes(applyStatu[id].headUrl, p.getChildByName("img"));
          p.getChildByName("name").getComponent(cc.Label).string = applyStatu[id].name;
          var ok = p.getChildByName("ok");
          var no = p.getChildByName("no");
          id === this.MineUserId && applyStatu[id].state === DisbandState.wait && this.setBtnAgreeActive(true);
          switch (applyStatu[id].state) {
           case DisbandState.applicant:
            ok.active = true;
            no.active = false;
            this.applicantTabel.string = "玩家" + applyStatu[id].name + "申请退出游戏，请投票";
            break;

           case DisbandState.agree:
            ok.active = true;
            no.active = false;
            break;

           case DisbandState.disagree:
            ok.active = false;
            no.active = true;
            break;

           case DisbandState.wait:
            ok.active = false;
            no.active = false;
          }
        }
      },
      setBtnAgreeActive: function setBtnAgreeActive(active) {
        this.btnAgree.active = active;
        this.btnDisagree.active = active;
      },
      onBtnAgreeClick: function onBtnAgreeClick() {
        fun.net.send("DisbandRoomVote", {
          applyStatu: 1
        });
        this.setBtnAgreeActive(false);
      },
      onBtnDisagreeClick: function onBtnDisagreeClick() {
        fun.net.send("DisbandRoomVote", {
          applyStatu: 2
        });
        this.setBtnAgreeActive(false);
      }
    });
    cc._RF.pop();
  }, {} ],
  whVoting: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "63120V3EC1Ck7eiHc+zW8kT", "whVoting");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        back: {
          type: cc.Node,
          default: null
        }
      },
      onLoad: function onLoad() {},
      onBtnQuitClick: function onBtnQuitClick() {
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {} ],
  wlMjCfg: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5e2b8R4ljxMBJEie542D1rk", "wlMjCfg");
    "use strict";
    var wl_MessageCfg = {
      Zhuang: {
        id: "Zhuang",
        desc: "本局庄",
        req: 400,
        rsp: 500,
        notify: 600
      },
      SZDianShu: {
        id: "SZDianShu",
        desc: "摇出色子的点数",
        req: 401,
        rsp: 501,
        notify: 601
      },
      LeaveRoom: {
        id: "LeaveRoom",
        desc: "离开房间",
        req: 402,
        rsp: 502,
        notify: 602
      },
      DisbandRoomVote: {
        id: "DisbandRoomVote",
        desc: "解散房间投票",
        req: 403,
        rsp: 503,
        notify: 603
      },
      DisbandRoomResult: {
        id: "DisbandRoomResult",
        desc: "解散房间投票结果",
        req: 404,
        rsp: 504,
        notify: 604
      },
      ReadyNext: {
        id: "ReadyNext",
        desc: "准备好了可以下一局",
        req: 405,
        rsp: 505,
        notify: 605
      },
      PaiJuInfo: {
        id: "PaiJuInfo",
        desc: "进入房间时下发的牌局信息",
        req: 406,
        rsp: 506,
        notify: 606
      },
      FaPai: {
        id: "FaPai",
        desc: "新一局发牌",
        req: 407,
        rsp: 507,
        notify: 607
      },
      MoPai: {
        id: "MoPai",
        desc: "摸牌",
        req: 408,
        rsp: 508,
        notify: 608
      },
      CaiShen: {
        id: "CaiShen",
        desc: "财神牌",
        req: 409,
        rsp: 509,
        notify: 609
      },
      ShowPai: {
        id: "ShowPai",
        desc: "将特殊牌翻到桌面上",
        req: 410,
        rsp: 510,
        notify: 610
      },
      BuPai: {
        id: "BuPai",
        desc: "补牌到手中",
        req: 411,
        rsp: 511,
        notify: 611
      },
      Ops: {
        id: "Ops",
        desc: "玩家操作",
        req: 412,
        rsp: 512,
        notify: 612
      },
      DaPai: {
        id: "DaPai",
        desc: "玩家打牌",
        req: 413,
        rsp: 513,
        notify: 613
      },
      Hu: {
        id: "Hu",
        desc: "玩家胡牌",
        req: 414,
        rsp: 514,
        notify: 614
      },
      Gang: {
        id: "Gang",
        desc: "杠牌",
        req: 415,
        rsp: 515,
        notify: 615
      },
      Peng: {
        id: "Peng",
        desc: "碰牌",
        req: 416,
        rsp: 516,
        notify: 616
      },
      Chi: {
        id: "Chi",
        desc: "吃牌",
        req: 417,
        rsp: 517,
        notify: 617
      },
      Pass: {
        id: "Pass",
        desc: "过牌",
        req: 418,
        rsp: 518,
        notify: 618
      },
      RoundAcc: {
        id: "RoundAcc",
        desc: "当局结算",
        req: 419,
        rsp: 519,
        notify: 619
      },
      RoomAcc: {
        id: "RoomAcc",
        desc: "总结算",
        req: 420,
        rsp: 520,
        notify: 620
      },
      PaiTime: {
        id: "PaiTime",
        desc: "牌局阶段",
        req: 421,
        rsp: 521,
        notify: 621
      }
    };
    module.exports = wl_MessageCfg;
    cc._RF.pop();
  }, {} ],
  wlmjNetMgr: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "26fb3QHo6FKqYPW1wYQ6eAr", "wlmjNetMgr");
    "use strict";
    var toLocalOptType = {
      1: 0,
      2: 4,
      4: 5,
      8: 1,
      16: 6,
      32: 2,
      64: 3
    };
    var wlOptMessageList = {
      0: "HuReq",
      1: "GangReq",
      2: "PengReq",
      3: "ChiReq",
      4: "HuReq",
      5: "GangReq",
      6: "GangReq",
      8: "PassReq"
    };
    var wlmjNetMgr = function wlmjNetMgr() {
      this.getNetCfg = function() {
        return require("wlMjCfg");
      };
      this.addGameNet = function(key, gameMgr) {
        this.reqCB(key, "ReadyNext", gameMgr.prepareNoticeMessage.bind(gameMgr));
        this.reqPCB(key, "EnterRoom", function(data) {
          gameMgr.onUserEnterRoom(data, data.RoomOrder);
        });
        this.reqCB(key, "LeaveRoom", gameMgr.exitRoomNoticeUserid.bind(gameMgr));
        this.reqCB(key, "DisbandRoomVote", gameMgr.onDisbandRoomVoteIn.bind(gameMgr));
        this.reqCB(key, "DisbandRoomResult", gameMgr.onDisbandRoomResultIn.bind(gameMgr));
        this.reqPCB(key, "OffLine", gameMgr.OffLineNotice.bind(gameMgr));
        this.reqPCB(key, "OnLine", gameMgr.OnLineNotice.bind(gameMgr));
        this.reqCB(key, "FaPai", function(data) {
          data.Tiles = data.Cards;
          data.TileCount = [];
          for (var i in gameMgr.playerList) data.TileCount[i] = 16;
          gameMgr.initStartPai(data);
        });
        this.reqCB(key, "CaiShen", function(data) {
          gameMgr.caiShengPai(data.Card);
          gameMgr.newRound();
        });
        this.reqCB(key, "Zhuang", gameMgr.zhuangNotify.bind(gameMgr));
        this.reqCB(key, "MoPai", gameMgr.WLMoPaiNotice.bind(gameMgr));
        this.reqCB(key, "DaPai", function(data) {
          if (!(0 == data.Card)) {
            data.Atile = data.Card;
            gameMgr.ChuPaiNotice(data);
          }
        });
        this.reqCB(key, "Ops", function(data) {
          var optData = [];
          data.Ops.forEach(function(item) {
            var atile = 64 != item.Op && item.Combs ? item.Combs[0][0] : gameMgr.lastChuPaiID;
            optData.push({
              Op: toLocalOptType[item.Op],
              Comb: item.Combs,
              Atile: atile
            });
          });
          gameMgr.showEatUI(optData);
        });
        this.reqCB(key, "Peng", function(data) {
          cc.log("--his.reqCB(key, peng---", data);
          data.Atile = data.Card;
          data.Opts = Math.pow(2, toLocalOptType[32]);
          gameMgr.ChuPaiZuHeNotice(data);
        });
        this.reqCB(key, "Chi", function(data) {
          data.Atile = data.Card;
          data.Data = data.Comb;
          data.Opts = Math.pow(2, toLocalOptType[64]);
          gameMgr.ChuPaiZuHeNotice(data);
        });
        this.reqCB(key, "Gang", function(data) {
          data.Atile = data.Card;
          data.Opts = Math.pow(2, toLocalOptType[data.Type]);
          gameMgr.ChuPaiZuHeNotice(data);
        });
        this.reqCB(key, "ShowPai", function(data) {
          setTimeout(function() {
            gameMgr.ShowPaiNotify(data);
          }, 1e3);
        });
        this.reqCB(key, "BuPai", function(data) {
          setTimeout(function() {
            gameMgr.BuPaiNotify(data);
          }, 1e3);
        });
        this.reqCB(key, "RoundAcc", gameMgr.ZhanJiNoticeWl.bind(gameMgr));
        this.reqCB(key, "RoomAcc", gameMgr.TotalZhanJiWl.bind(gameMgr));
        this.reqCB(key, "PaiTime", gameMgr.onPaiTimeChange.bind(gameMgr));
        this.reqCB(key, "PaiJuInfo", gameMgr.onReconnectDataWl.bind(gameMgr));
      };
      this.addChatNet = function(key, ChatUI) {};
      this.addReaNet = function(key, Reconnect) {};
      this.addRebNet = function(key, Reconnect) {};
      this.addMenuNet = function(key, menUI) {};
      this.gotoReady = function(data, handler) {
        var content = {};
        content.UserId = data.PlayerID;
        fun.net.send("ReadyNext", content, handler);
      };
      this.exitOutRoom = function(data, handler) {
        fun.net.send("LeaveRoom", data, handler);
      };
      this.dissolvedRoom = function(data, handler) {
        this.exitOutRoom({}, handler);
      };
      this.chuPai = function(data) {
        var content = {
          Card: data.Atile
        };
        fun.net.send("DaPai", content, function(rsp) {
          cc.log("this i s  DaPai rsp", rsp);
          !rsp || 26 != rsp.RetCode && 30 != rsp.RetCode || fun.net.close();
        });
      };
      this.optPai = function(content, eatObj) {
        eatObj.dataIndex == toLocalOptType[32] && this.pengOpt(content);
        eatObj.dataIndex != toLocalOptType[1] && eatObj.dataIndex != toLocalOptType[2] || this.huOpt(content);
        eatObj.dataIndex == toLocalOptType[4] && this.gangOpt(content, 4);
        eatObj.dataIndex == toLocalOptType[8] && this.gangOpt(content, 8);
        eatObj.dataIndex == toLocalOptType[16] && this.gangOpt(content, 16);
      };
      this.passOpt = function() {
        fun.net.send("Pass", {});
      };
      this.pengOpt = function(data) {
        fun.net.send("Peng", {
          Card: data.Atile
        });
      };
      this.chiPaiOpt = function(chiData) {
        var content = {
          Comb: chiData.Data
        };
        fun.net.send("Chi", content);
      };
      this.huOpt = function(data) {
        fun.net.send("Hu", {
          Card: data.Atile
        });
      };
      this.gangOpt = function(data, gangType) {
        fun.net.send("Gang", {
          Type: gangType,
          Card: data.Atile
        });
      };
      this.VoteOutRoom = function(data, handler) {
        fun.net.send("DisbandRoomVote", data, handler);
      };
      this.disbandRoomVote = function(data, handler) {
        fun.net.send("DisbandRoomVote", data, handler);
      };
    };
    module.exports = {
      new: function _new() {
        return wlmjNetMgr;
      }
    };
    cc._RF.pop();
  }, {
    wlMjCfg: "wlMjCfg"
  } ],
  zhanjiDetailItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f6152Ic+iJJXK4IgUs9cKxZ", "zhanjiDetailItem");
    "use strict";
    var Audio = require("Audio");
    cc.Class({
      extends: cc.Component,
      properties: {
        ownNameColor: {
          default: cc.Color.WHITE,
          displayName: "自己名字颜色"
        },
        otherNameColor: {
          default: cc.Color.WHITE,
          displayName: "别人名字颜色"
        },
        addScoreColor: {
          default: cc.Color.WHITE,
          displayName: "加分颜色"
        },
        subScoreColor: {
          default: cc.Color.WHITE,
          displayName: "减分颜色"
        },
        maxUser: {
          default: 4,
          displayName: "最多玩家数"
        },
        juShuLabel: {
          type: cc.Label,
          default: null
        },
        btnShare: {
          type: cc.Node,
          default: null
        },
        btnPlay: {
          type: cc.Node,
          default: null
        }
      },
      onLoad: function onLoad() {
        this.btnShare && this.btnShare.on("click", this.onBtnShareClick, this);
        this.btnPlay && this.btnPlay.on("click", this.onBtnPlayClick, this);
      },
      init: function init(uid, gameType, accountData, userData) {
        this._selfId = fun.db.getData("UserInfo").UserId;
        this._uid = uid;
        this._gameType = gameType;
        this._round = accountData.round;
        var round = this._round;
        round < 10 && (round = "0" + round);
        this.juShuLabel.string = round;
        for (var i = 0; i < this.maxUser; i++) {
          var head = this.node.getChildByName("head" + (i + 1));
          if (accountData.players[i]) {
            var nameNode = head.getChildByName("name");
            nameNode.getComponent(cc.Label).string = userData[accountData.players[i].userId].name;
            fun.utils.loadUrlRes(userData[accountData.players[i].userId].url, head.getChildByName("icon"));
            if (this._selfId === accountData.players[i].userId) nameNode.color = this.ownNameColor; else {
              nameNode.color = this.otherNameColor;
              head.cascadeOpacity = false;
              head.opacity = 0;
            }
            var score = accountData.players[i].score || 0;
            var scoreNode = head.getChildByName("fenshu");
            scoreNode.getComponent(cc.Label).string = score;
            scoreNode.color = score >= 0 ? this.addScoreColor : this.subScoreColor;
          } else head.active = false;
        }
        false == this.node.getChildByName("head6").active && (this.node.getChildByName("BtnBG").active = true);
      },
      onBtnShareClick: function onBtnShareClick() {
        Audio.playEffect("hall", "button_nomal.mp3");
        fun.net.pSend("ShareRecord", {
          GameType: this._gameType,
          Id: this._uid,
          Round: this._round
        }, function(data) {
          var title = gameConst.gameTypeZhNameMap[this._gameType] + "-回放码：" + data.shareCode;
          require("JSPhoneWeChat").WxShareFriend({
            title: title,
            content: "在战绩界面输入回放码即可查看战绩录像"
          });
        }.bind(this));
      },
      onBtnPlayClick: function onBtnPlayClick() {
        Audio.playEffect("hall", "button_nomal.mp3");
        fun.event.dispatch("Zhuanquan", {
          flag: true,
          text: "回放加载中，请稍后..."
        });
        fun.net.pSend("ReplayRecord", {
          GameType: this._gameType,
          Id: this._uid,
          Round: this._round
        }, function(data) {
          data.RetCode && 0 !== data.RetCode && fun.event.dispatch("Zhuanquan", {
            flag: false
          });
          fun.db.setData("ReplayInfo", data);
        }.bind(this));
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio",
    JSPhoneWeChat: "JSPhoneWeChat"
  } ],
  zhanjiDetail: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "97287lDhyJC2ZEKh3nq/2cx", "zhanjiDetail");
    "use strict";
    var typeNode = cc.Class({
      name: "typeNode",
      properties: {
        gameType: {
          type: gameConst.gameType,
          default: gameConst.gameType.universal
        },
        titleNode: {
          type: cc.Node,
          default: null
        }
      }
    });
    cc.Class({
      extends: cc.Component,
      properties: {
        itemTemplate: {
          type: cc.Node,
          default: null
        },
        scrollView: {
          type: cc.ScrollView,
          default: null
        },
        spacing: {
          default: 0
        },
        timeLabe: {
          type: cc.Label,
          default: null
        },
        roomNumLabel: {
          type: cc.Label,
          default: null
        },
        btnClose: {
          type: cc.Node,
          default: null
        },
        titleNodes: {
          type: [ typeNode ],
          default: []
        }
      },
      onLoad: function onLoad() {
        this.btnClose.on("click", this.onBtnCloseClick, this);
        this.animation = this.node.getComponent(cc.Animation);
        this.clips = this.animation.getClips();
      },
      onEnable: function onEnable() {
        this.animation.play(this.clips[0].name);
      },
      init: function init(accountData, data) {
        this._content = this.scrollView.content;
        this._gameType = data.gameType;
        this._uid = data.id;
        this.titleNodes.forEach(function(value) {
          value.gameType === this._gameType && (value.titleNode.active = true);
        }.bind(this));
        this.timeLabe.string = data.timeStr;
        this.roomNumLabel.string = data.roomId;
        this.content = this.scrollView.content;
        this.totalCount = 0;
        this._userInfo = {};
        data.players.forEach(function(player) {
          this._userInfo[player.userId] = {
            name: player.userName,
            url: player.headUrl
          };
        }.bind(this));
        this.addItems(accountData);
      },
      addItems: function addItems() {
        var data = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
        data.forEach(function(value) {
          var item = cc.instantiate(this.itemTemplate);
          item.parent = this.content;
          item.active = true;
          item.getComponent("zhanjiDetailItem").init(this._uid, this._gameType, value, this._userInfo);
          item.y = -item.height * (.5 + this.totalCount) - this.spacing * this.totalCount;
          this.totalCount++;
        }, this);
        var newHeight = this.totalCount * (this.itemTemplate.height + this.spacing) + this.spacing;
        newHeight > this._content.height && (this._content.height = newHeight);
      },
      onBtnCloseClick: function onBtnCloseClick() {
        require("Audio").playEffect("hall", "button_close.mp3");
        this.animation.play(this.clips[1].name).once("finished", function() {
          this.node.destroy();
        }, this);
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio"
  } ],
  zhanjiItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a6f98L29bZHc4tXVSr960fZ", "zhanjiItem");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        ownNameColor: {
          default: cc.Color.WHITE,
          displayName: "自己名字颜色"
        },
        otherNameColor: {
          default: cc.Color.WHITE,
          displayName: "别人名字颜色"
        },
        addScoreColor: {
          default: cc.Color.WHITE,
          displayName: "加分颜色"
        },
        subScoreColor: {
          default: cc.Color.WHITE,
          displayName: "减分颜色"
        },
        maxUser: {
          default: 4,
          displayName: "最多玩家数"
        },
        infoBtn: {
          type: cc.Node,
          default: null
        },
        juShuLabel: {
          type: cc.Label,
          default: null
        },
        timeLabel: {
          type: cc.Label,
          default: null
        },
        roomNumLabel: {
          type: cc.Label,
          default: null
        },
        detailPre: {
          type: cc.Prefab,
          default: null
        }
      },
      onLoad: function onLoad() {
        this.infoBtn.on("click", this.onInfoBtnClick, this);
      },
      _padZero: function _padZero(num) {
        num < 10 && (num = "0" + num);
        return num;
      },
      init: function init(data) {
        this._selfId = fun.db.getData("UserInfo").UserId;
        this._gameType = data.gameType;
        var time = new Date(1e3 * data.createdAt);
        var month = this._padZero(time.getMonth() + 1);
        var day = this._padZero(time.getDate());
        var hours = this._padZero(time.getHours());
        var minutes = this._padZero(time.getMinutes());
        data.timeStr = time.getFullYear() + "." + month + "." + day + " " + hours + ":" + minutes;
        this.timeLabel.string = data.timeStr;
        this.roomNumLabel.string = data.roomId;
        this._uid = data.id;
        this._data = data;
        for (var i = 0; i < this.maxUser; i++) {
          var head = this.node.getChildByName("head" + (i + 1));
          var nameNode = head.getChildByName("name");
          if (data.players[i]) {
            nameNode.getComponent(cc.Label).string = data.players[i].userName;
            fun.utils.loadUrlRes(data.players[i].headUrl, head.getChildByName("icon"));
            if (this._selfId === data.players[i].userId) nameNode.color = this.ownNameColor; else {
              head.cascadeOpacity = false;
              head.opacity = 0;
              nameNode.color = this.otherNameColor;
            }
            var score = data.players[i].score || 0;
            var scoreNode = head.getChildByName("fenshu");
            scoreNode.getComponent(cc.Label).string = score;
            scoreNode.color = score >= 0 ? this.addScoreColor : this.subScoreColor;
          } else head.active = false;
        }
      },
      onInfoBtnClick: function onInfoBtnClick() {
        require("Audio").playEffect("hall", "button_nomal.mp3");
        fun.net.pSend("StandingDetail", {
          GameType: this._gameType,
          Id: this._uid
        }, function(data) {
          var detailNode = cc.instantiate(this.detailPre);
          detailNode.parent = cc.director.getScene().getChildByName("Canvas");
          detailNode.getComponent("zhanjiDetail").init(data.accounts, this._data);
        }.bind(this));
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio"
  } ],
  zhanjiLayer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "82ff7fROUlM1LsyMzxo7HU4", "zhanjiLayer");
    "use strict";
    var Audio = require("Audio");
    cc.Class({
      extends: cc.Component,
      properties: {
        noZhanji: {
          type: cc.Node,
          default: null
        },
        toggleGroupNode: {
          type: cc.Node,
          default: null
        },
        btnClose: {
          type: cc.Node,
          default: null
        },
        btnView: {
          type: cc.Node,
          default: null
        },
        viewPlaybackPre: {
          type: cc.Prefab,
          default: null
        },
        pukeZhanjiPre: {
          type: cc.Prefab,
          default: null
        },
        majiangZhanjiPre: {
          type: cc.Prefab,
          default: null
        }
      },
      onLoad: function onLoad() {
        this.animation = this.node.getComponent(cc.Animation);
        this.clips = this.animation.getClips();
        this.btnView.on("click", this.onBtnViewClick, this);
        this.btnClose.on("click", this.onBtnCloseClick, this);
        var intranet = fun.gameCfg.loginUrl === gameConst.loginUrl[gameConst.loginUrlType.intranet];
        var ddz = this.toggleGroupNode.getChildByName("DDZ");
        ddz.active = !!intranet;
      },
      init: function init(gameType, data) {
        cc.YL.info("战绩gametype", gameType, data);
        this.toggleGroupNode.children.forEach(function(toggleNode) {
          toggleNode.getComponentInChildren("zhanjiScv").init();
          if (gameType === gameConst.gameType[toggleNode.name]) {
            toggleNode.getComponent(cc.Toggle).check();
            toggleNode.getComponentInChildren("zhanjiScv").initWithData(data);
          } else toggleNode.getComponentInChildren("zhanjiScv").enableCheck(true);
        });
      },
      onEnable: function onEnable() {
        this.animation.play(this.clips[0].name);
      },
      onBtnToggleClicked: function onBtnToggleClicked() {
        Audio.playEffect("hall", "button_nomal.mp3");
      },
      onBtnViewClick: function onBtnViewClick() {
        Audio.playEffect("hall", "button_nomal.mp3");
        var viewPlaybackPre = cc.instantiate(this.viewPlaybackPre);
        viewPlaybackPre.parent = this.node;
      },
      onBtnCloseClick: function onBtnCloseClick() {
        Audio.playEffect("hall", "button_close.mp3");
        this.toggleGroupNode.children.forEach(function(toggleNode) {
          toggleNode.getComponentInChildren("zhanjiScv").enableCheck(false);
        });
        this.animation.play(this.clips[1].name).once("finished", function() {
          this.node.destroy();
        }, this);
      }
    });
    cc._RF.pop();
  }, {
    Audio: "Audio"
  } ],
  zhanjiScv: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "de17fR1MoVHUIp1T0nhVnX/", "zhanjiScv");
    "use strict";
    var eventName = "";
    cc.Class({
      extends: cc.Component,
      properties: {
        _hasInit: {
          default: false
        },
        _lastStart: {
          default: false
        },
        _enableCheck: {
          default: false
        },
        gameType: {
          type: gameConst.gameType,
          default: gameConst.gameType.universal
        },
        spacing: {
          default: 0
        },
        scrollView: {
          type: cc.ScrollView,
          default: null
        },
        itemTemplate: {
          default: null,
          type: cc.Node
        },
        zhanjiDetailPre: {
          type: cc.Prefab,
          default: null
        }
      },
      enableCheck: function enableCheck(flag) {
        this._enableCheck = flag;
      },
      onLoad: function onLoad() {
        this._content = this.scrollView.content;
        this._totalCount = 0;
      },
      onDestroy: function onDestroy() {
        fun.event.remove(eventName);
      },
      init: function init() {
        eventName = "zhanjiScv" + fun.event.getSum();
        fun.event.add(eventName, "ReplayInfo", this.onReplayInfoIn.bind(this));
      },
      onReplayInfoIn: function onReplayInfoIn() {
        this._enableCheck = false;
      },
      onEnable: function onEnable() {
        if (this._hasInit || !this._enableCheck) return;
        cc.log("--onEnable-", this.node.parent.parent.name, this._enableCheck);
        fun.net.pSend("StandingBrief", {
          GameType: this.gameType,
          Start: 0
        }, function(data) {
          this.initWithData(data);
        }.bind(this));
      },
      initWithData: function initWithData(data) {
        this._hasInit = true;
        this.addItems(data.accounts);
      },
      addItems: function addItems() {
        var data = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
        var lastStart = false;
        data.forEach(function(value) {
          var item = cc.instantiate(this.itemTemplate);
          item.parent = this._content;
          value.gameType = this.gameType;
          item.getComponent("zhanjiItem").init(value);
          item.y = -item.height * (.5 + this._totalCount) - this.spacing * this._totalCount;
          item.x = 0;
          this._totalCount++;
          (!lastStart || lastStart > value.createdAt) && (lastStart = value.createdAt);
        }.bind(this));
        if (lastStart && lastStart !== this._lastStart) {
          this._lastStart = lastStart;
          this.node.once("scroll-to-bottom", this.onBottomCb, this);
        }
        var newHeight = this._totalCount * (this.itemTemplate.height + this.spacing) + this.spacing;
        newHeight > this._content.height && (this._content.height = newHeight);
      },
      onBottomCb: function onBottomCb() {
        cc.log("--onBottomCb-");
        fun.net.pSend("StandingBrief", {
          GameType: this.gameType,
          Start: this._lastStart
        }, function(data) {
          this.initWithData(data);
        }.bind(this));
      }
    });
    cc._RF.pop();
  }, {} ],
  zhuanquan: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "def4dHOSutFXL7yolIMaB9b", "zhuanquan");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        textNode: {
          type: cc.Node,
          default: null
        }
      },
      onLoad: function onLoad() {},
      setString: function setString() {
        var str = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
        this.textNode.getComponent(cc.Label).string = str;
      }
    });
    cc._RF.pop();
  }, {} ]
}, {}, [ "AesUtils", "Audio", "TestLog", "hotUpdate", "ChatCfg", "GameCfg", "MessageCfg", "createDDZRoom", "createMajiangRoom", "createNiuNiuRoom", "createRoomSys", "createSanGongRoom", "createScMahjongRoom", "createWahuaRoom", "funBase64", "funCsv", "funDB", "funEvent", "funLog", "funNetMgr", "funUtils", "initFun", "hall", "hallActivity", "hallEnterNum", "hallGangGao", "hallMoreGame", "hallRenzheng", "hallShare", "hallSpineBtn", "globalUI", "login", "mailDetail", "mailItem", "mailLayer", "chat", "freeCardDetail", "freeCardItem", "interact", "playerDetailUI", "playerMap", "publicVoiceBtn", "roomGongGao", "set", "shareCardItem", "store", "updatePanel", "voiceHint", "voiceQueueMgr", "minDoubleButtonPop", "minSingleButtonPop", "zhuanquan", "zhanjiDetail", "zhanjiDetailItem", "zhanjiItem", "zhanjiLayer", "zhanjiScv", "hyMjCfg", "scMjCfg", "wlMjCfg", "hymjNetMgr", "mjAnimHelper", "mjDataMgr", "mjGameDefine", "mjGameManager", "mjNetMgr", "mjPai", "mjPlayer", "mjPlayerPai", "mjReconnectMgr", "mjReplayMgr", "scmjNetMgr", "wlmjNetMgr", "mjPaijuMgr", "mjPaijuShang", "mjPaijuXia", "mjPaijuYou", "mjPaijuZuo", "mjChatUI", "mjEndUI", "mjGameUI", "mjInteractUI", "mjMenuUI", "mjPlayerUI", "mjReadyUI", "mjReplayUI", "mjReportListUI", "mjReportUI", "mjChiDetailUI", "mjDpaoUI", "mjHuAnimUI", "mjOptsUI", "mjPaiUI", "mjSaiziUI", "mjVotingPopUI", "mjVotingUI", "allAccountWahua", "oneAccountWahua", "whDefine", "whUtils", "WahuaCfg", "commonWahua", "gameMgrWahua", "opsWahua", "phoneStatusWahua", "playerDataWahua", "playerUiWahua", "roomDescScvWahua", "whMenu", "whPaiTouch", "whSkin", "whVoting", "whVotingPop", "JSPhoneBaiDu", "JSPhoneDevice", "JSPhoneNetBattery", "JSPhoneUmeng", "JSPhoneVoice", "JSPhoneWeChat", "DDZ_Animation", "DDZ_AnimationManager", "DDZ_OSDate", "DDZ_Sound", "DDZ_Tools", "DDZ_CardTypeConfig", "DDZ_CardValueConfig", "DDZ_MsgConfig", "DDZ_Chat", "DDZ_DeskInfo", "DDZ_Disslove", "DDZ_LeaveAndDiss", "DDZ_Main", "DDZ_PlayerGPS", "DDZ_PopWin", "DDZ_Setting", "DDZ_DiPai", "DDZ_FaiPaiAction", "DDZ_GameAction", "DDZ_GameManager", "DDZ_JiaBei", "DDZ_JiaoFen", "DDZ_OutCard", "DDZ_Pass", "DDZ_PlayerBtn", "DDZ_PokerTip", "DDZ_Ready", "DDZ_AllGameOver", "DDZ_AllGameOverItem", "DDZ_OneGameOver", "DDZ_OneGameOverItem", "DDZ_NetEventManager", "DDZ_PlayerInfoNode", "DDZ_PlayerLeftInfo", "DDZ_PlayerLeftOutPoker", "DDZ_PlayerLeftPoker", "DDZ_PlayerRightInfo", "DDZ_PlayerRightOutPoker", "DDZ_PlayerRightPoker", "DDZ_PlayerSelfCloseUpPoker", "DDZ_PlayerSelfInfo", "DDZ_PlayerSelfOutPoker", "DDZ_PlayerSelfPoker", "DDZ_Poker", "DDZ_PokerTouchEvent", "DDZ_ReplayMain", "PukeUI", "PukeAccount", "PukeAccountBox", "PukeDisband", "PukeSkin", "NiuNiuCfg", "SanGongCfg", "CuoPai", "NiuNiuManager", "PukeChatUI", "PukeCommUI", "PukeData", "PukeDefine", "SanGongManager", "PukeUtils", "papaparse.min" ]);